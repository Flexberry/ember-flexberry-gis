{"version":3,"sources":["dummy/tests/adapters/application-offline.jscs-test.js","dummy/tests/adapters/application-offline.jshint.js","dummy/tests/adapters/application.jscs-test.js","dummy/tests/adapters/application.jshint.js","dummy/tests/app.jscs-test.js","dummy/tests/app.jshint.js","dummy/tests/controllers/api-test-map.jscs-test.js","dummy/tests/controllers/api-test-map.jshint.js","dummy/tests/controllers/application.jscs-test.js","dummy/tests/controllers/application.jshint.js","dummy/tests/controllers/components-examples/flexberry-boundingbox/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-boundingbox/settings-example.jshint.js","dummy/tests/controllers/map.jscs-test.js","dummy/tests/controllers/map.jshint.js","dummy/tests/controllers/map/new.jscs-test.js","dummy/tests/controllers/map/new.jshint.js","dummy/tests/controllers/maps.jscs-test.js","dummy/tests/controllers/maps.jshint.js","dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-e.jscs-test.js","dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-e.jshint.js","dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-e/new.jscs-test.js","dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-e/new.jshint.js","dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-l.jscs-test.js","dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-l.jshint.js","dummy/tests/controllers/sitemap-node.jscs-test.js","dummy/tests/controllers/sitemap-node.jshint.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jscs-test.js","dummy/tests/helpers/destroy-app.jshint.js","dummy/tests/helpers/ember-i18n/test-helpers.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jscs-test.js","dummy/tests/helpers/module-for-acceptance.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jscs-test.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jscs-test.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/helpers/to-safe-string.jscs-test.js","dummy/tests/helpers/to-safe-string.jshint.js","dummy/tests/helpers/to-string.jscs-test.js","dummy/tests/helpers/to-string.jshint.js","dummy/tests/helpers/validate-properties.js","dummy/tests/integration/components/flexberry-boundingbox-test.js","dummy/tests/integration/components/flexberry-boundingbox-test.jscs-test.js","dummy/tests/integration/components/flexberry-boundingbox-test.jshint.js","dummy/tests/integration/components/flexberry-dropdown-input-test.js","dummy/tests/integration/components/flexberry-dropdown-input-test.jscs-test.js","dummy/tests/integration/components/flexberry-dropdown-input-test.jshint.js","dummy/tests/integration/components/flexberry-edit-crs-test.js","dummy/tests/integration/components/flexberry-edit-crs-test.jscs-test.js","dummy/tests/integration/components/flexberry-edit-crs-test.jshint.js","dummy/tests/integration/components/flexberry-layers-attributes-panel-test.js","dummy/tests/integration/components/flexberry-layers-attributes-panel-test.jscs-test.js","dummy/tests/integration/components/flexberry-layers-attributes-panel-test.jshint.js","dummy/tests/integration/components/flexberry-layers-intersections-panel-test.js","dummy/tests/integration/components/flexberry-layers-intersections-panel-test.jscs-test.js","dummy/tests/integration/components/flexberry-layers-intersections-panel-test.jshint.js","dummy/tests/integration/components/flexberry-layers-test.js","dummy/tests/integration/components/flexberry-layers-test.jscs-test.js","dummy/tests/integration/components/flexberry-layers-test.jshint.js","dummy/tests/integration/components/flexberry-map-test.js","dummy/tests/integration/components/flexberry-map-test.jscs-test.js","dummy/tests/integration/components/flexberry-map-test.jshint.js","dummy/tests/integration/components/flexberry-maptoolbar-test.js","dummy/tests/integration/components/flexberry-maptoolbar-test.jscs-test.js","dummy/tests/integration/components/flexberry-maptoolbar-test.jshint.js","dummy/tests/integration/components/flexberry-multiple-select-test.js","dummy/tests/integration/components/flexberry-multiple-select-test.jscs-test.js","dummy/tests/integration/components/flexberry-multiple-select-test.jshint.js","dummy/tests/integration/components/flexberry-table-test.js","dummy/tests/integration/components/flexberry-table-test.jscs-test.js","dummy/tests/integration/components/flexberry-table-test.jshint.js","dummy/tests/integration/components/flexberry-wfs-filter-test.js","dummy/tests/integration/components/flexberry-wfs-filter-test.jscs-test.js","dummy/tests/integration/components/flexberry-wfs-filter-test.jshint.js","dummy/tests/integration/components/geometry-add-modes/draw-test.js","dummy/tests/integration/components/geometry-add-modes/draw-test.jscs-test.js","dummy/tests/integration/components/geometry-add-modes/draw-test.jshint.js","dummy/tests/integration/components/geometry-add-modes/geoprovider-test.js","dummy/tests/integration/components/geometry-add-modes/geoprovider-test.jscs-test.js","dummy/tests/integration/components/geometry-add-modes/geoprovider-test.jshint.js","dummy/tests/integration/components/geometry-add-modes/manual-test.js","dummy/tests/integration/components/geometry-add-modes/manual-test.jscs-test.js","dummy/tests/integration/components/geometry-add-modes/manual-test.jshint.js","dummy/tests/integration/components/layers-dialogs/attributes/edit-test.js","dummy/tests/integration/components/layers-dialogs/attributes/edit-test.jscs-test.js","dummy/tests/integration/components/layers-dialogs/attributes/edit-test.jshint.js","dummy/tests/integration/components/layers-dialogs/tabs/identification-settings-test.js","dummy/tests/integration/components/layers-dialogs/tabs/identification-settings-test.jscs-test.js","dummy/tests/integration/components/layers-dialogs/tabs/identification-settings-test.jshint.js","dummy/tests/integration/components/layers-dialogs/tabs/legend-settings-test.js","dummy/tests/integration/components/layers-dialogs/tabs/legend-settings-test.jscs-test.js","dummy/tests/integration/components/layers-dialogs/tabs/legend-settings-test.jshint.js","dummy/tests/integration/components/layers/group-layer-test.js","dummy/tests/integration/components/layers/group-layer-test.jscs-test.js","dummy/tests/integration/components/layers/group-layer-test.jshint.js","dummy/tests/integration/components/layers/osm-layer-test.js","dummy/tests/integration/components/layers/osm-layer-test.jscs-test.js","dummy/tests/integration/components/layers/osm-layer-test.jshint.js","dummy/tests/integration/components/legends/wms-legend-test.js","dummy/tests/integration/components/legends/wms-legend-test.jscs-test.js","dummy/tests/integration/components/legends/wms-legend-test.jshint.js","dummy/tests/integration/components/minimap-control-test.js","dummy/tests/integration/components/minimap-control-test.jscs-test.js","dummy/tests/integration/components/minimap-control-test.jshint.js","dummy/tests/integration/components/spatial-bookmark-test.js","dummy/tests/integration/components/spatial-bookmark-test.jscs-test.js","dummy/tests/integration/components/spatial-bookmark-test.jshint.js","dummy/tests/locales/en/forms.jscs-test.js","dummy/tests/locales/en/forms.jshint.js","dummy/tests/locales/en/forms/application.jscs-test.js","dummy/tests/locales/en/forms/application.jshint.js","dummy/tests/locales/en/forms/application/footer.jscs-test.js","dummy/tests/locales/en/forms/application/footer.jshint.js","dummy/tests/locales/en/forms/application/header.jscs-test.js","dummy/tests/locales/en/forms/application/header.jshint.js","dummy/tests/locales/en/forms/application/sitemap.jscs-test.js","dummy/tests/locales/en/forms/application/sitemap.jshint.js","dummy/tests/locales/en/forms/components-examples.jscs-test.js","dummy/tests/locales/en/forms/components-examples.jshint.js","dummy/tests/locales/en/forms/edit-form.jscs-test.js","dummy/tests/locales/en/forms/edit-form.jshint.js","dummy/tests/locales/en/forms/index.jscs-test.js","dummy/tests/locales/en/forms/index.jshint.js","dummy/tests/locales/en/forms/loading.jscs-test.js","dummy/tests/locales/en/forms/loading.jshint.js","dummy/tests/locales/en/forms/map.jscs-test.js","dummy/tests/locales/en/forms/map.jshint.js","dummy/tests/locales/en/forms/maps.jscs-test.js","dummy/tests/locales/en/forms/maps.jshint.js","dummy/tests/locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-e.jscs-test.js","dummy/tests/locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-e.jshint.js","dummy/tests/locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-l.jscs-test.js","dummy/tests/locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-l.jshint.js","dummy/tests/locales/en/translations.jscs-test.js","dummy/tests/locales/en/translations.jshint.js","dummy/tests/locales/ru/forms.jscs-test.js","dummy/tests/locales/ru/forms.jshint.js","dummy/tests/locales/ru/forms/application.jscs-test.js","dummy/tests/locales/ru/forms/application.jshint.js","dummy/tests/locales/ru/forms/application/footer.jscs-test.js","dummy/tests/locales/ru/forms/application/footer.jshint.js","dummy/tests/locales/ru/forms/application/header.jscs-test.js","dummy/tests/locales/ru/forms/application/header.jshint.js","dummy/tests/locales/ru/forms/application/sitemap.jscs-test.js","dummy/tests/locales/ru/forms/application/sitemap.jshint.js","dummy/tests/locales/ru/forms/components-examples.jscs-test.js","dummy/tests/locales/ru/forms/components-examples.jshint.js","dummy/tests/locales/ru/forms/edit-form.jscs-test.js","dummy/tests/locales/ru/forms/edit-form.jshint.js","dummy/tests/locales/ru/forms/index.jscs-test.js","dummy/tests/locales/ru/forms/index.jshint.js","dummy/tests/locales/ru/forms/loading.jscs-test.js","dummy/tests/locales/ru/forms/loading.jshint.js","dummy/tests/locales/ru/forms/map.jscs-test.js","dummy/tests/locales/ru/forms/map.jshint.js","dummy/tests/locales/ru/forms/maps.jscs-test.js","dummy/tests/locales/ru/forms/maps.jshint.js","dummy/tests/locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-e.jscs-test.js","dummy/tests/locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-e.jshint.js","dummy/tests/locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-l.jscs-test.js","dummy/tests/locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-l.jshint.js","dummy/tests/locales/ru/translations.jscs-test.js","dummy/tests/locales/ru/translations.jshint.js","dummy/tests/models/components-examples/flexberry-ddau-checkbox/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-ddau-checkbox/settings-example/base.jshint.js","dummy/tests/models/custom-inflector-rules.jscs-test.js","dummy/tests/models/custom-inflector-rules.jshint.js","dummy/tests/resolver.jscs-test.js","dummy/tests/resolver.jshint.js","dummy/tests/router.jscs-test.js","dummy/tests/router.jshint.js","dummy/tests/routes/api-test-map.jscs-test.js","dummy/tests/routes/api-test-map.jshint.js","dummy/tests/routes/application.jscs-test.js","dummy/tests/routes/application.jshint.js","dummy/tests/routes/components-examples/flexberry-boundingbox/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-boundingbox/settings-example.jshint.js","dummy/tests/routes/index.jscs-test.js","dummy/tests/routes/index.jshint.js","dummy/tests/routes/map.jscs-test.js","dummy/tests/routes/map.jshint.js","dummy/tests/routes/map/new.jscs-test.js","dummy/tests/routes/map/new.jshint.js","dummy/tests/routes/maps.jscs-test.js","dummy/tests/routes/maps.jshint.js","dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-e.jscs-test.js","dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-e.jshint.js","dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-e/new.jscs-test.js","dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-e/new.jshint.js","dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-l.jscs-test.js","dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-l.jshint.js","dummy/tests/serializers/application-offline.jscs-test.js","dummy/tests/serializers/application-offline.jshint.js","dummy/tests/serializers/application.jscs-test.js","dummy/tests/serializers/application.jshint.js","dummy/tests/services/store.jscs-test.js","dummy/tests/services/store.jshint.js","dummy/tests/services/user-settings.jscs-test.js","dummy/tests/services/user-settings.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jscs-test.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/components/base-control-test.js","dummy/tests/unit/components/base-control-test.jscs-test.js","dummy/tests/unit/components/base-control-test.jshint.js","dummy/tests/unit/components/base-layer-test.js","dummy/tests/unit/components/base-layer-test.jscs-test.js","dummy/tests/unit/components/base-layer-test.jshint.js","dummy/tests/unit/components/base-vector-layer-test.js","dummy/tests/unit/components/base-vector-layer-test.jscs-test.js","dummy/tests/unit/components/base-vector-layer-test.jshint.js","dummy/tests/unit/components/flexberry-map-test.js","dummy/tests/unit/components/flexberry-map-test.jscs-test.js","dummy/tests/unit/components/flexberry-map-test.jshint.js","dummy/tests/unit/components/layers/group-layer-test.js","dummy/tests/unit/components/layers/group-layer-test.jscs-test.js","dummy/tests/unit/components/layers/group-layer-test.jshint.js","dummy/tests/unit/components/layers/odata-vector-layer-test.js","dummy/tests/unit/components/layers/odata-vector-layer-test.jscs-test.js","dummy/tests/unit/components/layers/odata-vector-layer-test.jshint.js","dummy/tests/unit/components/layers/tile-layer-test.js","dummy/tests/unit/components/layers/tile-layer-test.jscs-test.js","dummy/tests/unit/components/layers/tile-layer-test.jshint.js","dummy/tests/unit/components/layers/wfs-layer-test.js","dummy/tests/unit/components/layers/wfs-layer-test.jscs-test.js","dummy/tests/unit/components/layers/wfs-layer-test.jshint.js","dummy/tests/unit/components/layers/wms-layer-test.js","dummy/tests/unit/components/layers/wms-layer-test.jscs-test.js","dummy/tests/unit/components/layers/wms-layer-test.jshint.js","dummy/tests/unit/components/minimap-control-test.js","dummy/tests/unit/components/minimap-control-test.jscs-test.js","dummy/tests/unit/components/minimap-control-test.jshint.js","dummy/tests/unit/components/scale-control-test.js","dummy/tests/unit/components/scale-control-test.jscs-test.js","dummy/tests/unit/components/scale-control-test.jshint.js","dummy/tests/unit/components/switch-scale-control-test.js","dummy/tests/unit/components/switch-scale-control-test.jscs-test.js","dummy/tests/unit/components/switch-scale-control-test.jshint.js","dummy/tests/unit/components/zoomslider-control-test.js","dummy/tests/unit/components/zoomslider-control-test.jscs-test.js","dummy/tests/unit/components/zoomslider-control-test.jshint.js","dummy/tests/unit/controllers/edit-map-test.js","dummy/tests/unit/controllers/edit-map-test.jscs-test.js","dummy/tests/unit/controllers/edit-map-test.jshint.js","dummy/tests/unit/controllers/gis-search-form-test.js","dummy/tests/unit/controllers/gis-search-form-test.jscs-test.js","dummy/tests/unit/controllers/gis-search-form-test.jshint.js","dummy/tests/unit/controllers/list-map-test.js","dummy/tests/unit/controllers/list-map-test.jscs-test.js","dummy/tests/unit/controllers/list-map-test.jshint.js","dummy/tests/unit/helpers/flexberry-search-properties-osm-ru-test.js","dummy/tests/unit/helpers/flexberry-search-properties-osm-ru-test.jscs-test.js","dummy/tests/unit/helpers/flexberry-search-properties-osm-ru-test.jshint.js","dummy/tests/unit/helpers/instance-of-test.js","dummy/tests/unit/helpers/instance-of-test.jscs-test.js","dummy/tests/unit/helpers/instance-of-test.jshint.js","dummy/tests/unit/initializers/flexberry-map-commands-test.js","dummy/tests/unit/initializers/flexberry-map-commands-test.jscs-test.js","dummy/tests/unit/initializers/flexberry-map-commands-test.jshint.js","dummy/tests/unit/initializers/flexberry-map-tools-test.js","dummy/tests/unit/initializers/flexberry-map-tools-test.jscs-test.js","dummy/tests/unit/initializers/flexberry-map-tools-test.jshint.js","dummy/tests/unit/initializers/local-storage-test.js","dummy/tests/unit/initializers/local-storage-test.jscs-test.js","dummy/tests/unit/initializers/local-storage-test.jshint.js","dummy/tests/unit/instance-initializers/open-map-test.js","dummy/tests/unit/instance-initializers/open-map-test.jscs-test.js","dummy/tests/unit/instance-initializers/open-map-test.jshint.js","dummy/tests/unit/mixins/dynamic-properties-test.js","dummy/tests/unit/mixins/dynamic-properties-test.jscs-test.js","dummy/tests/unit/mixins/dynamic-properties-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-convert-object-coord-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-convert-object-coord-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-convert-object-coord-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-copy-object-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-copy-object-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-copy-object-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-cosmos-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-cosmos-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-cosmos-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-create-polygon-object-rhumb-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-create-polygon-object-rhumb-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-create-polygon-object-rhumb-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-delete-layer-objects-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-delete-layer-objects-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-delete-layer-objects-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-download-file-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-download-file-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-download-file-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-edit-layer-object-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-edit-layer-object-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-edit-layer-object-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-expansion-add-object-to-layer-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-expansion-add-object-to-layer-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-expansion-add-object-to-layer-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-expansion-trim-line-to-polygon-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-expansion-trim-line-to-polygon-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-expansion-trim-line-to-polygon-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-between-objects-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-between-objects-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-between-objects-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-object-center-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-object-center-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-object-center-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-rhumb-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-rhumb-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-get-rhumb-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-savelayer-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-savelayer-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-savelayer-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-set-visibilitty-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-set-visibilitty-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-set-visibilitty-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-set-visibility-objects-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-set-visibility-objects-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-set-visibility-objects-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-test.jshint.js","dummy/tests/unit/mixins/flexberry-map-model-api-visualedit-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-visualedit-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-map-model-api-visualedit-test.jshint.js","dummy/tests/unit/mixins/flexberry_map_model_api_show_and_hide_test.js","dummy/tests/unit/mixins/flexberry_map_model_api_show_and_hide_test.jscs-test.js","dummy/tests/unit/mixins/flexberry_map_model_api_show_and_hide_test.jshint.js","dummy/tests/unit/mixins/leaflet-events-test.js","dummy/tests/unit/mixins/leaflet-events-test.jscs-test.js","dummy/tests/unit/mixins/leaflet-events-test.jshint.js","dummy/tests/unit/mixins/leaflet-options-test.js","dummy/tests/unit/mixins/leaflet-options-test.jscs-test.js","dummy/tests/unit/mixins/leaflet-options-test.jshint.js","dummy/tests/unit/mixins/leaflet-properties-test.js","dummy/tests/unit/mixins/leaflet-properties-test.jscs-test.js","dummy/tests/unit/mixins/leaflet-properties-test.jshint.js","dummy/tests/unit/mixins/map-model-api-comparelayers-test.js","dummy/tests/unit/mixins/map-model-api-comparelayers-test.jscs-test.js","dummy/tests/unit/mixins/map-model-api-comparelayers-test.jshint.js","dummy/tests/unit/mixins/map-model-api-getlayerobjectoptions-test.js","dummy/tests/unit/mixins/map-model-api-getlayerobjectoptions-test.jscs-test.js","dummy/tests/unit/mixins/map-model-api-getlayerobjectoptions-test.jshint.js","dummy/tests/unit/mixins/map-model-api-getmergegeometry-test-test.js","dummy/tests/unit/mixins/map-model-api-getmergegeometry-test-test.jscs-test.js","dummy/tests/unit/mixins/map-model-api-getmergegeometry-test-test.jshint.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-link-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-link-test.jscs-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-link-test.jshint.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-metadata-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-metadata-test.jscs-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-metadata-test.jshint.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-metadata-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-metadata-test.jscs-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-metadata-test.jshint.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-parameter-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-parameter-test.jscs-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-parameter-test.jshint.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-layer-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-layer-test.jscs-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-layer-test.jshint.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-object-setting-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-object-setting-test.jscs-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-object-setting-test.jshint.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-test.jscs-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-test.jshint.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-parameter-metadata-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-parameter-metadata-test.jscs-test.js","dummy/tests/unit/models/new-platform-flexberry-g-i-s-parameter-metadata-test.jshint.js","dummy/tests/unit/routes/edit-map-new-test.js","dummy/tests/unit/routes/edit-map-new-test.jscs-test.js","dummy/tests/unit/routes/edit-map-new-test.jshint.js","dummy/tests/unit/routes/edit-map-test.js","dummy/tests/unit/routes/edit-map-test.jscs-test.js","dummy/tests/unit/routes/edit-map-test.jshint.js","dummy/tests/unit/routes/gis-search-form-test.js","dummy/tests/unit/routes/gis-search-form-test.jscs-test.js","dummy/tests/unit/routes/gis-search-form-test.jshint.js","dummy/tests/unit/routes/list-map-test.js","dummy/tests/unit/routes/list-map-test.jscs-test.js","dummy/tests/unit/routes/list-map-test.jshint.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-link-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-link-test.jscs-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-link-test.jshint.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-metadata-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-metadata-test.jscs-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-metadata-test.jshint.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-metadata-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-metadata-test.jscs-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-metadata-test.jshint.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-parameter-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-parameter-test.jscs-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-parameter-test.jshint.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-layer-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-layer-test.jscs-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-layer-test.jshint.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-object-setting-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-object-setting-test.jscs-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-object-setting-test.jshint.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-test.jscs-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-test.jshint.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-parameter-metadata-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-parameter-metadata-test.jscs-test.js","dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-parameter-metadata-test.jshint.js","dummy/tests/unit/services/local-storage-test.js","dummy/tests/unit/services/local-storage-test.jscs-test.js","dummy/tests/unit/services/local-storage-test.jshint.js","dummy/tests/unit/services/map-store-test.js","dummy/tests/unit/services/map-store-test.jscs-test.js","dummy/tests/unit/services/map-store-test.jshint.js","dummy/tests/unit/utils/download-file-test.js","dummy/tests/unit/utils/download-file-test.jscs-test.js","dummy/tests/unit/utils/download-file-test.jshint.js","dummy/tests/unit/utils/get-crs-by-name-test.js","dummy/tests/unit/utils/get-crs-by-name-test.jscs-test.js","dummy/tests/unit/utils/get-crs-by-name-test.jshint.js","dummy/tests/unit/utils/lat-lng-to-coord-test.js","dummy/tests/unit/utils/lat-lng-to-coord-test.jscs-test.js","dummy/tests/unit/utils/lat-lng-to-coord-test.jshint.js","dummy/tests/unit/utils/layer-to-ewkt-test.js","dummy/tests/unit/utils/layer-to-ewkt-test.jscs-test.js","dummy/tests/unit/utils/layer-to-ewkt-test.jshint.js","dummy/tests/unit/utils/layer-to-jsts-test.js","dummy/tests/unit/utils/layer-to-jsts-test.jscs-test.js","dummy/tests/unit/utils/layer-to-jsts-test.jshint.js","dummy/tests/unit/utils/leaflet-opacity-test.js","dummy/tests/unit/utils/leaflet-opacity-test.jscs-test.js","dummy/tests/unit/utils/leaflet-opacity-test.jshint.js","dummy/tests/unit/utils/polygon-intersect-check-test.js","dummy/tests/unit/utils/polygon-intersect-check-test.jscs-test.js","dummy/tests/unit/utils/polygon-intersect-check-test.jshint.js","dummy/tests/unit/utils/rhumb-operations-test.js","dummy/tests/unit/utils/rhumb-operations-test.jscs-test.js","dummy/tests/unit/utils/rhumb-operations-test.jshint.js","dummy/tests/views/components-examples/flexberry-maplayers/settings-example.jscs-test.js","dummy/tests/views/components-examples/flexberry-maplayers/settings-example.jshint.js","dummy/tests/views/components-examples/flexberry-tree/settings-example.jscs-test.js","dummy/tests/views/components-examples/flexberry-tree/settings-example.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/adapters/application-offline.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - adapters');\n  test('adapters/application-offline.js should pass jscs', function () {\n    ok(true, 'adapters/application-offline.js should pass jscs.');\n  });\n});","define('dummy/tests/adapters/application-offline.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters/application-offline.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application-offline.js should pass jshint.');\n  });\n});","define('dummy/tests/adapters/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - adapters');\n  test('adapters/application.js should pass jscs', function () {\n    ok(true, 'adapters/application.js should pass jscs.');\n  });\n});","define('dummy/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('dummy/tests/app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('app.js should pass jscs', function () {\n    ok(true, 'app.js should pass jscs.');\n  });\n});","define('dummy/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/api-test-map.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/api-test-map.js should pass jscs', function () {\n    ok(true, 'controllers/api-test-map.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/api-test-map.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/api-test-map.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/api-test-map.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/application.js should pass jscs', function () {\n    ok(true, 'controllers/application.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-boundingbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-boundingbox');\n  test('controllers/components-examples/flexberry-boundingbox/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-boundingbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-boundingbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-boundingbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-boundingbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/map.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/map.js should pass jscs', function () {\n    ok(true, 'controllers/map.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/map.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/map.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/map.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/map/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/map');\n  test('controllers/map/new.js should pass jscs', function () {\n    ok(true, 'controllers/map/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/map/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/map/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/map/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/maps.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/maps.js should pass jscs', function () {\n    ok(true, 'controllers/maps.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/maps.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/maps.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/maps.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-e.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jscs', function () {\n    ok(true, 'controllers/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-e.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/new-platform-flexberry-g-i-s-map-object-setting-e.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-e/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/new-platform-flexberry-g-i-s-map-object-setting-e');\n  test('controllers/new-platform-flexberry-g-i-s-map-object-setting-e/new.js should pass jscs', function () {\n    ok(true, 'controllers/new-platform-flexberry-g-i-s-map-object-setting-e/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-e/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/new-platform-flexberry-g-i-s-map-object-setting-e/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/new-platform-flexberry-g-i-s-map-object-setting-e/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-l.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jscs', function () {\n    ok(true, 'controllers/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/new-platform-flexberry-g-i-s-map-object-setting-l.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/new-platform-flexberry-g-i-s-map-object-setting-l.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/sitemap-node.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/sitemap-node.js should pass jscs', function () {\n    ok(true, 'controllers/sitemap-node.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/sitemap-node.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/sitemap-node.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/sitemap-node.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/destroy-app.js should pass jscs', function () {\n    ok(true, 'helpers/destroy-app.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/ember-i18n/test-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember['default'].Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember['default'].Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = (function () {\n    if (typeof QUnit !== 'undefined' && typeof ok === 'function') {\n      return function (element, key, text) {\n        ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  })();\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/module-for-acceptance.js should pass jscs', function () {\n    ok(true, 'helpers/module-for-acceptance.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/resolver.js should pass jscs', function () {\n    ok(true, 'helpers/resolver.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/start-app.js should pass jscs', function () {\n    ok(true, 'helpers/start-app.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/to-safe-string.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/to-safe-string.js should pass jscs', function () {\n    ok(true, 'helpers/to-safe-string.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/to-safe-string.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/to-safe-string.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/to-safe-string.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/to-string.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/to-string.js should pass jscs', function () {\n    ok(true, 'helpers/to-string.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/to-string.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/to-string.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/to-string.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/validate-properties', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n  var run = _ember['default'].run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('dummy/tests/integration/components/flexberry-boundingbox-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-boundingbox', 'Integration | Component | flexberry boundingbox', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('temporary test', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    assert.equal('', '');\n  });\n});","define('dummy/tests/integration/components/flexberry-boundingbox-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-boundingbox-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-boundingbox-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-boundingbox-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-boundingbox-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-boundingbox-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-dropdown-input-test', ['exports', 'ember', 'ember-qunit', 'ember-i18n/services/i18n', 'ember-flexberry/locales/ru/translations', 'ember-flexberry/locales/en/translations'], function (exports, _ember, _emberQunit, _emberI18nServicesI18n, _emberFlexberryLocalesRuTranslations, _emberFlexberryLocalesEnTranslations) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-dropdown-input', 'Integration | Component | flexberry dropdown input', {\n    beforeEach: function beforeEach(assert) {\n      this.register('locale:ru/translations', _emberFlexberryLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      this.set('i18n.locale', 'ru');\n    },\n\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-dropdown-input', ['loc', [null, [1, 0], [1, 28]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '(нет значения)');\n  });\n});","define('dummy/tests/integration/components/flexberry-dropdown-input-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-dropdown-input-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-dropdown-input-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-dropdown-input-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-dropdown-input-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-dropdown-input-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-edit-crs-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-edit-crs', 'Integration | Component | flexberry edit crs', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('temp test', function (assert) {\n    assert.equal('', '');\n  });\n});","define('dummy/tests/integration/components/flexberry-edit-crs-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-edit-crs-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-edit-crs-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-edit-crs-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-edit-crs-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-edit-crs-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-layers-attributes-panel-test', ['exports', 'ember-qunit', 'ember', 'ember-i18n/services/i18n', 'ember-flexberry-gis/locales/ru/translations', 'ember-flexberry-gis/locales/en/translations'], function (exports, _emberQunit, _ember, _emberI18nServicesI18n, _emberFlexberryGisLocalesRuTranslations, _emberFlexberryGisLocalesEnTranslations) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-layers-attributes-panel', 'Integration | Component | flexberry layers attributes panel', {\n\n    beforeEach: function beforeEach(assert) {\n      this.register('locale:ru/translations', _emberFlexberryGisLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryGisLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      this.set('i18n.locale', 'en');\n    },\n\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.equal(this.$().text().trim(), '');\n\n    var geoJsonData = '\\n    {\\n      \"type\": \"FeatureCollection\",\\n      \"features\": [{\\n        \"type\": \"Feature\",\\n        \"geometry\": {\\n          \"type\": \"Point\",\\n          \"coordinates\": [102.0, 0.5]\\n        },\\n        \"properties\": {\\n          \"prop0\": \"value0\"\\n        }\\n      }\\n    ]\\n  }';\n    var geoJson = L.geoJSON(JSON.parse(geoJsonData));\n    _ember['default'].set(geoJson, 'readFormat', {\n      featureType: {\n        fieldTypes: { prop0: 'string' },\n        fields: { prop0: function prop0(val) {\n            return val;\n          } }\n      }\n    });\n    this.set('items', _ember['default'].A([{\n      name: 'test layer',\n      leafletObject: geoJson\n    }]));\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 3,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('\\n  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-layers-attributes-panel', [], ['items', ['subexpr', '@mut', [['get', 'items', ['loc', [null, [2, 46], [2, 51]]]]], [], []], 'folded', false], ['loc', [null, [2, 4], [2, 66]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    var $tab = this.$().find('div[data-tab=\"test layer\"]');\n\n    assert.equal($tab.length, 1, 'Layer tab was rendered');\n    assert.equal($tab.find('tbody td:last-child').text().trim(), 'value0', 'Property cell was rendered');\n  });\n});","define('dummy/tests/integration/components/flexberry-layers-attributes-panel-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-layers-attributes-panel-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-layers-attributes-panel-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-layers-attributes-panel-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-layers-attributes-panel-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-layers-attributes-panel-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-layers-intersections-panel-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  // import hbs from 'htmlbars-inline-precompile';\n\n  (0, _emberQunit.moduleForComponent)('flexberry-layers-intersections-panel', 'Integration | Component | flexberry layers intersections panel', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    // this.render(hbs`{{flexberry-layers-intersections-panel}}`);\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    // this.render(hbs`\n    //   {{#flexberry-layers-intersections-panel}}\n    //     template block text\n    //   {{/flexberry-layers-intersections-panel}}\n    // `);\n\n    // assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dummy/tests/integration/components/flexberry-layers-intersections-panel-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-layers-intersections-panel-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-layers-intersections-panel-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-layers-intersections-panel-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-layers-intersections-panel-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-layers-intersections-panel-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-layers-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-layers', 'Integration | Component | flexberry layers', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-layers', ['loc', [null, [1, 0], [1, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n\n  (0, _emberQunit.test)('layer component sends actions', function (assert) {\n    var geoJsonData = '\\n    {\\n      \"type\": \"FeatureCollection\",\\n      \"features\": [{\\n        \"type\": \"Feature\",\\n        \"geometry\": {\\n          \"type\": \"Point\",\\n          \"coordinates\": [102.0, 0.5]\\n        },\\n        \"properties\": {\\n          \"prop0\": \"value0\"\\n        }\\n      }\\n    ]\\n  }';\n    var geoJson = L.geoJSON(JSON.parse(geoJsonData));\n    this.set('items', _ember['default'].A([{\n      name: 'test layer',\n      type: 'geojson',\n      leafletObject: geoJson\n    }]));\n    this.set('leafletContainer', L.layerGroup());\n\n    this.on('onLayerInit', function (_ref) {\n      var leafletObject = _ref.leafletObject;\n      var layerModel = _ref.layerModel;\n\n      assert.ok(!_ember['default'].isNone(leafletObject), 'leafletObject should not be null');\n      assert.equal(_ember['default'].get(layerModel, 'name'), 'test layer');\n    });\n\n    this.on('onLayerDestroy', function (_ref2) {\n      var leafletObject = _ref2.leafletObject;\n      var layerModel = _ref2.layerModel;\n\n      assert.ok(!_ember['default'].isNone(leafletObject), 'leafletObject should not be null');\n      assert.equal(_ember['default'].get(layerModel, 'name'), 'test layer');\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 15,\n              'column': 9\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-layers', [], ['leafletContainer', ['subexpr', '@mut', [['get', 'leafletContainer', ['loc', [null, [3, 23], [3, 39]]]]], [], []], 'layers', ['subexpr', 'get-with-dynamic-actions', [['get', 'this', ['loc', [null, [4, 39], [4, 43]]]], 'items'], ['dynamicActions', ['subexpr', 'array', [['subexpr', 'hash', [], ['on', 'layerInit', 'actionName', 'onLayerInit'], ['loc', [null, [6, 10], [9, 11]]]], ['subexpr', 'hash', [], ['on', 'layerDestroy', 'actionName', 'onLayerDestroy'], ['loc', [null, [10, 10], [13, 11]]]]], [], ['loc', [null, [5, 23], [14, 9]]]]], ['loc', [null, [4, 13], [15, 7]]]]], ['loc', [null, [2, 4], [15, 9]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n  });\n});","define('dummy/tests/integration/components/flexberry-layers-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-layers-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-layers-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-layers-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-layers-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-layers-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-map-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-map', 'Integration | Component | flexberry map', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(0);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 17\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-map', ['loc', [null, [1, 0], [1, 17]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'flexberry-map', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [2, 27], [2, 32]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 22]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n  });\n});","define('dummy/tests/integration/components/flexberry-map-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-map-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-map-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-map-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-map-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-map-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-maptoolbar-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-maptoolbar', 'Integration | Component | flexberry maptoolbar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-maptoolbar', ['loc', [null, [1, 0], [1, 24]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'flexberry-maptoolbar', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dummy/tests/integration/components/flexberry-maptoolbar-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-maptoolbar-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-maptoolbar-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-maptoolbar-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-maptoolbar-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-maptoolbar-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-multiple-select-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-multiple-select', 'Integration | Component | flexberry multiple select', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 46\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-multiple-select', [], ['title', 'testHead'], ['loc', [null, [1, 0], [1, 46]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$('.default.text').text().trim(), 'testHead');\n  });\n});","define('dummy/tests/integration/components/flexberry-multiple-select-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-multiple-select-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-multiple-select-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-multiple-select-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-multiple-select-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-multiple-select-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-table-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-table', 'Integration | Component | flexberry table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('header', { name: 'gis-search-form.layer-metadata.header.name' });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 33\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-table', [], ['header', ['subexpr', '@mut', [['get', 'header', ['loc', [null, [1, 25], [1, 31]]]]], [], []]], ['loc', [null, [1, 0], [1, 33]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.notEqual(this.$().text().indexOf('No data'), -1, 'Should contain \"No data\"');\n\n    // Template block usage:\n    // this.render(hbs`\n    //   {{#flexberry-table}}\n    //     template block text\n    //   {{/flexberry-table}}\n    // `);\n\n    // assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dummy/tests/integration/components/flexberry-table-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-table-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-table-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-table-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-table-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-table-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-wfs-filter-test', ['exports', 'ember', 'ember-qunit', 'ember-i18n/services/i18n', 'ember-flexberry-gis/locales/ru/translations', 'ember-flexberry-gis/locales/en/translations'], function (exports, _ember, _emberQunit, _emberI18nServicesI18n, _emberFlexberryGisLocalesRuTranslations, _emberFlexberryGisLocalesEnTranslations) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-wfs-filter', 'Integration | Component | flexberry wfs filter', {\n    beforeEach: function beforeEach(assert) {\n      this.register('locale:ru/translations', _emberFlexberryGisLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryGisLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      this.set('i18n.locale', 'en');\n    },\n\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-wfs-filter', ['loc', [null, [1, 0], [1, 24]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.notEqual(this.$().text().indexOf('Fields isn\\'t loaded'), -1, 'Should contain \"Fields isn\\'t loaded\"');\n  });\n});","define('dummy/tests/integration/components/flexberry-wfs-filter-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-wfs-filter-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-wfs-filter-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-wfs-filter-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-wfs-filter-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-wfs-filter-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/geometry-add-modes/draw-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  // import hbs from 'htmlbars-inline-precompile';\n\n  (0, _emberQunit.moduleForComponent)('geometry-add-modes/draw', 'Integration | Component | geometry add modes/draw', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('empty test', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    assert.equal('', '');\n\n    // this.render(hbs`{{geometry-add-modes/draw}}`);\n\n    // assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    // this.render(hbs`\n    //   {{#geometry-add-modes/draw}}\n    //     template block text\n    //   {{/geometry-add-modes/draw}}\n    // `);\n\n    // assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dummy/tests/integration/components/geometry-add-modes/draw-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/geometry-add-modes');\n  test('integration/components/geometry-add-modes/draw-test.js should pass jscs', function () {\n    ok(true, 'integration/components/geometry-add-modes/draw-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/geometry-add-modes/draw-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/geometry-add-modes/draw-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/geometry-add-modes/draw-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/geometry-add-modes/geoprovider-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  // import hbs from 'htmlbars-inline-precompile';\n\n  (0, _emberQunit.moduleForComponent)('geometry-add-modes/geoprovider', 'Integration | Component | geometry add modes/geoprovider', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('empty test', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    // this.render(hbs`{{geometry-add-modes/geoprovider}}`);\n\n    // assert.equal(this.$().text().trim(), '');\n\n    assert.equal('', '');\n\n    // Template block usage:\n    // this.render(hbs`\n    //   {{#geometry-add-modes/geoprovider}}\n    //     template block text\n    //   {{/geometry-add-modes/geoprovider}}\n    // `);\n\n    // assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dummy/tests/integration/components/geometry-add-modes/geoprovider-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/geometry-add-modes');\n  test('integration/components/geometry-add-modes/geoprovider-test.js should pass jscs', function () {\n    ok(true, 'integration/components/geometry-add-modes/geoprovider-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/geometry-add-modes/geoprovider-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/geometry-add-modes/geoprovider-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/geometry-add-modes/geoprovider-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/geometry-add-modes/manual-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  // import hbs from 'htmlbars-inline-precompile';\n\n  (0, _emberQunit.moduleForComponent)('geometry-add-modes/manual', 'Integration | Component | geometry add modes/manual', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('empty test', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    // this.render(hbs`{{geometry-add-modes/manual}}`);\n\n    // assert.equal(this.$().text().trim(), '');\n\n    assert.equal('', '');\n\n    // Template block usage:\n    // this.render(hbs`\n    //   {{#geometry-add-modes/manual}}\n    //     template block text\n    //   {{/geometry-add-modes/manual}}\n    // `);\n\n    // assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dummy/tests/integration/components/geometry-add-modes/manual-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/geometry-add-modes');\n  test('integration/components/geometry-add-modes/manual-test.js should pass jscs', function () {\n    ok(true, 'integration/components/geometry-add-modes/manual-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/geometry-add-modes/manual-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/geometry-add-modes/manual-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/geometry-add-modes/manual-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/layers-dialogs/attributes/edit-test', ['exports', 'ember', 'ember-qunit', 'ember-i18n/services/i18n', 'ember-flexberry-gis/locales/ru/translations', 'ember-flexberry-gis/locales/en/translations'], function (exports, _ember, _emberQunit, _emberI18nServicesI18n, _emberFlexberryGisLocalesRuTranslations, _emberFlexberryGisLocalesEnTranslations) {\n\n  (0, _emberQunit.moduleForComponent)('layers-dialogs/attributes/edit', 'Integration | Component | layers dialogs/attributes/edit', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      this.register('locale:ru/translations', _emberFlexberryGisLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryGisLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      // Set 'ru' as initial locale.\n      this.set('i18n.locale', 'ru');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(1);\n\n    this.set('fieldNames', {\n      field: 'field'\n    });\n    this.set('fieldTypes', {\n      field: 'string'\n    });\n    this.set('fieldParsers', {\n      field: function field(text) {\n        return text;\n      }\n    });\n    this.set('fieldValidators', {\n      field: function field(value) {\n        return true;\n      }\n    });\n    this.set('data', {\n      field: 'test field'\n    });\n\n    this.set('visible', true);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 9,\n              'column': 6\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n    ');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'layers-dialogs/attributes/edit', [], ['visible', ['subexpr', '@mut', [['get', 'visible', ['loc', [null, [3, 14], [3, 21]]]]], [], []], 'fieldNames', ['subexpr', '@mut', [['get', 'fieldNames', ['loc', [null, [4, 17], [4, 27]]]]], [], []], 'fieldTypes', ['subexpr', '@mut', [['get', 'fieldTypes', ['loc', [null, [5, 17], [5, 27]]]]], [], []], 'fieldParsers', ['subexpr', '@mut', [['get', 'fieldParsers', ['loc', [null, [6, 19], [6, 31]]]]], [], []], 'fieldValidators', ['subexpr', '@mut', [['get', 'fieldValidators', ['loc', [null, [7, 22], [7, 37]]]]], [], []], 'data', ['subexpr', '@mut', [['get', 'data', ['loc', [null, [8, 11], [8, 15]]]]], [], []]], ['loc', [null, [2, 4], [9, 6]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // Component is rendered outside of the testing container.\n    var $dialog = this.$().closest('#ember-testing-container').siblings('.ui.modals').find('.flexberry-edit-layer-attributes-dialog');\n\n    assert.ok($dialog.find('.flexberry-dialog-content .field input').length === 1, 'It renders one input');\n  });\n});","define('dummy/tests/integration/components/layers-dialogs/attributes/edit-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/layers-dialogs/attributes');\n  test('integration/components/layers-dialogs/attributes/edit-test.js should pass jscs', function () {\n    ok(true, 'integration/components/layers-dialogs/attributes/edit-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/layers-dialogs/attributes/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/layers-dialogs/attributes/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/layers-dialogs/attributes/edit-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/layers-dialogs/tabs/identification-settings-test', ['exports', 'ember', 'ember-qunit', 'ember-i18n/services/i18n', 'ember-flexberry-gis/locales/ru/translations', 'ember-flexberry-gis/locales/en/translations'], function (exports, _ember, _emberQunit, _emberI18nServicesI18n, _emberFlexberryGisLocalesRuTranslations, _emberFlexberryGisLocalesEnTranslations) {\n\n  (0, _emberQunit.moduleForComponent)('identification-settings', 'Integration | Component | identification settings', {\n    beforeEach: function beforeEach(assert) {\n      this.register('locale:ru/translations', _emberFlexberryGisLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryGisLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      this.set('i18n.locale', 'ru');\n\n      var obj = {\n        settings: {\n          displaySettings: {\n            canBeIdentified: true\n          }\n        }\n      };\n\n      this.set('_layer', obj);\n    },\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 85\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'layers-dialogs/tabs/identification-settings', [], ['value', ['subexpr', '@mut', [['get', '_layer.settings.displaySettings', ['loc', [null, [1, 52], [1, 83]]]]], [], []]], ['loc', [null, [1, 0], [1, 85]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'Может быть идентифицирован');\n  });\n});","define('dummy/tests/integration/components/layers-dialogs/tabs/identification-settings-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/layers-dialogs/tabs');\n  test('integration/components/layers-dialogs/tabs/identification-settings-test.js should pass jscs', function () {\n    ok(true, 'integration/components/layers-dialogs/tabs/identification-settings-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/layers-dialogs/tabs/identification-settings-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/layers-dialogs/tabs/identification-settings-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/layers-dialogs/tabs/identification-settings-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/layers-dialogs/tabs/legend-settings-test', ['exports', 'ember', 'ember-qunit', 'ember-i18n/services/i18n', 'ember-flexberry-gis/locales/ru/translations', 'ember-flexberry-gis/locales/en/translations'], function (exports, _ember, _emberQunit, _emberI18nServicesI18n, _emberFlexberryGisLocalesRuTranslations, _emberFlexberryGisLocalesEnTranslations) {\n\n  (0, _emberQunit.moduleForComponent)('layers-dialogs/tabs/legend-settings', 'Integration | Component | layers dialogs/tabs/legend settings', {\n    beforeEach: function beforeEach(assert) {\n      this.register('locale:ru/translations', _emberFlexberryGisLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryGisLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      this.set('i18n.locale', 'ru');\n\n      var obj = {\n        settings: {\n          legendSettings: {\n            legendCanBeDisplayed: true\n          }\n        }\n      };\n      this.set('_layer', obj);\n    },\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'layers-dialogs/tabs/legend-settings', [], ['value', ['subexpr', '@mut', [['get', '_layer.settings.legendSettings', ['loc', [null, [2, 26], [2, 56]]]]], [], []], 'type', ['subexpr', '@mut', [['get', '_layer.type', ['loc', [null, [3, 25], [3, 36]]]]], [], []]], ['loc', [null, [1, 0], [4, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'Отображать легенду');\n  });\n});","define('dummy/tests/integration/components/layers-dialogs/tabs/legend-settings-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/layers-dialogs/tabs');\n  test('integration/components/layers-dialogs/tabs/legend-settings-test.js should pass jscs', function () {\n    ok(true, 'integration/components/layers-dialogs/tabs/legend-settings-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/layers-dialogs/tabs/legend-settings-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/layers-dialogs/tabs/legend-settings-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/layers-dialogs/tabs/legend-settings-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/layers/group-layer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('layers/group-layer', 'Integration | Component | layers/group layer', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('leafletContainer', L.layerGroup());\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 56\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'layers/group-layer', [], ['leafletContainer', ['subexpr', '@mut', [['get', 'leafletContainer', ['loc', [null, [1, 38], [1, 54]]]]], [], []]], ['loc', [null, [1, 0], [1, 56]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('dummy/tests/integration/components/layers/group-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/layers');\n  test('integration/components/layers/group-layer-test.js should pass jscs', function () {\n    ok(true, 'integration/components/layers/group-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/layers/group-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/layers/group-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/layers/group-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/layers/osm-layer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('layers/osm-layer', 'Integration | Component | layers/osm layer', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'layers/osm-layer', ['loc', [null, [1, 0], [1, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'layers/osm-layer', [], [], 0, null, ['loc', [null, [2, 4], [4, 25]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('dummy/tests/integration/components/layers/osm-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/layers');\n  test('integration/components/layers/osm-layer-test.js should pass jscs', function () {\n    ok(true, 'integration/components/layers/osm-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/layers/osm-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/layers/osm-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/layers/osm-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/legends/wms-legend-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('legends/wms-legend', 'Integration | Component | legends/wms legend', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    this.set('testLayer', {\n      settingsAsObject: {\n        url: 'http://212.192.76.235:8080/geoserver/wms',\n        layers: 'lesonas1969:goszem,lesonas1969:river,lesonas1969:kvartal'\n      }\n    });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 38\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'legends/wms-legend', [], ['layer', ['subexpr', '@mut', [['get', 'testLayer', ['loc', [null, [1, 27], [1, 36]]]]], [], []]], ['loc', [null, [1, 0], [1, 38]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    var $images = this.$('img');\n    var expectedSrc = 'http://212.192.76.235:8080/geoserver/wms?service=WMS&request=GetLegendGraphic&version=1.1.0&format=image%2Fpng&layer=lesonas1969%3Agoszem';\n\n    assert.equal($images.size(), 3, 'Images for all defined layers are rendered');\n    assert.equal($images.first().attr('src'), expectedSrc, 'Image\\'s \\'src\\' attribute computed as expected');\n  });\n});","define('dummy/tests/integration/components/legends/wms-legend-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components/legends');\n  test('integration/components/legends/wms-legend-test.js should pass jscs', function () {\n    ok(true, 'integration/components/legends/wms-legend-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/legends/wms-legend-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/legends/wms-legend-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/legends/wms-legend-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/minimap-control-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('minimap-control', 'Integration | Component | minimap control', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('template return L.layerGroup', function (assert) {\n\n    assert.expect(1);\n\n    this.set('layerGroupClass', L.LayerGroup);\n\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 1,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('       ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createElement('div');\n            dom.setAttribute(el1, 'class', 'layerG-body');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var element0 = dom.childAt(fragment, [1]);\n            var morphs = new Array(1);\n            morphs[0] = dom.createAttrMorph(element0, 'is-layergroup');\n            return morphs;\n          },\n          statements: [['attribute', 'is-layergroup', ['concat', [['subexpr', 'instance-of', [['get', 'layerG', ['loc', [null, [3, 61], [3, 67]]]], ['get', 'layerGroupClass', ['loc', [null, [3, 68], [3, 83]]]]], [], ['loc', [null, [3, 47], [3, 85]]]]]]]],\n          locals: ['layerG'],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'minimap-control', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.ok(this.$('div.layerG-body').attr('is-layergroup'));\n  });\n});","define('dummy/tests/integration/components/minimap-control-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/minimap-control-test.js should pass jscs', function () {\n    ok(true, 'integration/components/minimap-control-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/minimap-control-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/minimap-control-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/minimap-control-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/spatial-bookmark-test', ['exports', 'ember', 'ember-qunit', 'ember-flexberry-gis/services/local-storage', 'ember-i18n/services/i18n', 'ember-flexberry-gis/locales/ru/translations', 'ember-flexberry-gis/locales/en/translations'], function (exports, _ember, _emberQunit, _emberFlexberryGisServicesLocalStorage, _emberI18nServicesI18n, _emberFlexberryGisLocalesRuTranslations, _emberFlexberryGisLocalesEnTranslations) {\n\n  (0, _emberQunit.moduleForComponent)('spatial-bookmark', 'Integration | Component | spatial bookmark', {\n    beforeEach: function beforeEach(assert) {\n      this.register('locale:ru/translations', _emberFlexberryGisLocalesRuTranslations['default']);\n      this.register('locale:en/translations', _emberFlexberryGisLocalesEnTranslations['default']);\n      this.register('service:i18n', _emberI18nServicesI18n['default']);\n\n      this.inject.service('i18n', { as: 'i18n' });\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n\n      this.set('i18n.locale', 'ru');\n\n      this.register('service:local-storage', _emberFlexberryGisServicesLocalStorage['default']);\n\n      this.inject.service('local-storage', { as: 'local-storage-service' });\n      _ember['default'].Component.reopen({\n        'local-storage-service': _ember['default'].inject.service('local-storage')\n      });\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].Component.reopen({\n        'local-storage-service': undefined\n      });\n    },\n\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 20\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'spatial-bookmark', ['loc', [null, [1, 0], [1, 20]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$().text().trim(), 'Добавить в закладки');\n  });\n});","define('dummy/tests/integration/components/spatial-bookmark-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/spatial-bookmark-test.js should pass jscs', function () {\n    ok(true, 'integration/components/spatial-bookmark-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/spatial-bookmark-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/spatial-bookmark-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/spatial-bookmark-test.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en');\n  test('locales/en/forms.js should pass jscs', function () {\n    ok(true, 'locales/en/forms.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms');\n  test('locales/en/forms/application.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/application.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/application.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/application/footer.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms/application');\n  test('locales/en/forms/application/footer.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/application/footer.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/application/footer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/application/footer.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/application/footer.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/application/header.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms/application');\n  test('locales/en/forms/application/header.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/application/header.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/application/header.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/application/header.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/application/header.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/application/sitemap.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms/application');\n  test('locales/en/forms/application/sitemap.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/application/sitemap.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/application/sitemap.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/application/sitemap.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/application/sitemap.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/components-examples.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms');\n  test('locales/en/forms/components-examples.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/components-examples.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/components-examples.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/components-examples.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/components-examples.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/edit-form.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms');\n  test('locales/en/forms/edit-form.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/edit-form.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/edit-form.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/edit-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/edit-form.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/index.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms');\n  test('locales/en/forms/index.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/index.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/index.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/loading.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms');\n  test('locales/en/forms/loading.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/loading.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/loading.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/loading.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/loading.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/map.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms');\n  test('locales/en/forms/map.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/map.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/map.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/map.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/map.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/maps.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms');\n  test('locales/en/forms/maps.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/maps.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/maps.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/maps.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/maps.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-e.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms');\n  test('locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-e.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-e.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-l.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en/forms');\n  test('locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jscs', function () {\n    ok(true, 'locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-l.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-l.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/forms/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/translations.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en');\n  test('locales/en/translations.js should pass jscs', function () {\n    ok(true, 'locales/en/translations.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru');\n  test('locales/ru/forms.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms');\n  test('locales/ru/forms/application.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/application.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/application.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/application/footer.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms/application');\n  test('locales/ru/forms/application/footer.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/application/footer.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/application/footer.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/application/footer.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/application/footer.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/application/header.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms/application');\n  test('locales/ru/forms/application/header.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/application/header.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/application/header.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/application/header.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/application/header.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/application/sitemap.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms/application');\n  test('locales/ru/forms/application/sitemap.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/application/sitemap.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/application/sitemap.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/application/sitemap.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/application/sitemap.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/components-examples.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms');\n  test('locales/ru/forms/components-examples.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/components-examples.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/components-examples.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/components-examples.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/components-examples.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/edit-form.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms');\n  test('locales/ru/forms/edit-form.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/edit-form.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/edit-form.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/edit-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/edit-form.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/index.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms');\n  test('locales/ru/forms/index.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/index.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/index.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/loading.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms');\n  test('locales/ru/forms/loading.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/loading.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/loading.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/loading.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/loading.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/map.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms');\n  test('locales/ru/forms/map.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/map.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/map.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/map.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/map.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/maps.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms');\n  test('locales/ru/forms/maps.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/maps.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/maps.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/maps.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/maps.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-e.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms');\n  test('locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-e.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-e.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-l.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru/forms');\n  test('locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jscs', function () {\n    ok(true, 'locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-l.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-l.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/forms/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/translations.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru');\n  test('locales/ru/translations.js should pass jscs', function () {\n    ok(true, 'locales/ru/translations.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/translations.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-ddau-checkbox/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-ddau-checkbox/settings-example');\n  test('models/components-examples/flexberry-ddau-checkbox/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-ddau-checkbox/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-ddau-checkbox/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-ddau-checkbox/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-ddau-checkbox/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/custom-inflector-rules.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/custom-inflector-rules.js should pass jscs', function () {\n    ok(true, 'models/custom-inflector-rules.js should pass jscs.');\n  });\n});","define('dummy/tests/models/custom-inflector-rules.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/custom-inflector-rules.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/custom-inflector-rules.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('resolver.js should pass jscs', function () {\n    ok(true, 'resolver.js should pass jscs.');\n  });\n});","define('dummy/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('router.js should pass jscs', function () {\n    ok(true, 'router.js should pass jscs.');\n  });\n});","define('dummy/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/api-test-map.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/api-test-map.js should pass jscs', function () {\n    ok(true, 'routes/api-test-map.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/api-test-map.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/api-test-map.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/api-test-map.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/application.js should pass jscs', function () {\n    ok(true, 'routes/application.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-boundingbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-boundingbox');\n  test('routes/components-examples/flexberry-boundingbox/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-boundingbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-boundingbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-boundingbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-boundingbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/index.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/index.js should pass jscs', function () {\n    ok(true, 'routes/index.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/map.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/map.js should pass jscs', function () {\n    ok(true, 'routes/map.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/map.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/map.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/map.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/map/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/map');\n  test('routes/map/new.js should pass jscs', function () {\n    ok(true, 'routes/map/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/map/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/map/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/map/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/maps.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/maps.js should pass jscs', function () {\n    ok(true, 'routes/maps.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/maps.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/maps.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/maps.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-e.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jscs', function () {\n    ok(true, 'routes/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-e.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/new-platform-flexberry-g-i-s-map-object-setting-e.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/new-platform-flexberry-g-i-s-map-object-setting-e.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-e/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/new-platform-flexberry-g-i-s-map-object-setting-e');\n  test('routes/new-platform-flexberry-g-i-s-map-object-setting-e/new.js should pass jscs', function () {\n    ok(true, 'routes/new-platform-flexberry-g-i-s-map-object-setting-e/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-e/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/new-platform-flexberry-g-i-s-map-object-setting-e/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/new-platform-flexberry-g-i-s-map-object-setting-e/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-l.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jscs', function () {\n    ok(true, 'routes/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/new-platform-flexberry-g-i-s-map-object-setting-l.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/new-platform-flexberry-g-i-s-map-object-setting-l.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/new-platform-flexberry-g-i-s-map-object-setting-l.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/application-offline.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/application-offline.js should pass jscs', function () {\n    ok(true, 'serializers/application-offline.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/application-offline.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/application-offline.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application-offline.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/application.js should pass jscs', function () {\n    ok(true, 'serializers/application.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('dummy/tests/services/store.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - services');\n  test('services/store.js should pass jscs', function () {\n    ok(true, 'services/store.js should pass jscs.');\n  });\n});","define('dummy/tests/services/store.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/store.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/store.js should pass jshint.');\n  });\n});","define('dummy/tests/services/user-settings.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - services');\n  test('services/user-settings.js should pass jscs', function () {\n    ok(true, 'services/user-settings.js should pass jscs.');\n  });\n});","define('dummy/tests/services/user-settings.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/user-settings.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/user-settings.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('test-helper.js should pass jscs', function () {\n    ok(true, 'test-helper.js should pass jscs.');\n  });\n});","define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/base-control-test', ['exports', 'ember-qunit', 'sinon'], function (exports, _emberQunit, _sinon) {\n\n  (0, _emberQunit.moduleForComponent)('base-control', 'Unit | Component | base control', {\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it should call leafletMap.addControl method on initControl', function (assert) {\n    var addControl = _sinon['default'].spy();\n    var component = this.subject({ leafletMap: { addControl: addControl } });\n\n    component.initControl();\n\n    assert.ok(addControl.calledOnce);\n  });\n});","define('dummy/tests/unit/components/base-control-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components');\n  test('unit/components/base-control-test.js should pass jscs', function () {\n    ok(true, 'unit/components/base-control-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/base-control-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/base-control-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/base-control-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/base-layer-test', ['exports', 'ember-qunit', 'sinon'], function (exports, _emberQunit, _sinon) {\n\n  (0, _emberQunit.moduleForComponent)('base-layer', 'Unit | Component | base layer', {\n    unit: true,\n    needs: ['service:map-api', 'config:environment']\n  });\n\n  // stubs for createLayer method\n  var layer = {};\n  var createLayer = function createLayer() {\n    return layer;\n  };\n\n  (0, _emberQunit.test)('it should throw at init', function (assert) {\n    var _this = this;\n\n    assert.throws(function () {\n      _this.subject();\n    });\n  });\n\n  (0, _emberQunit.test)('it should call layer.setZIndex on _setLayerZIndex', function (assert) {\n    assert.expect(1);\n\n    var setZIndex = _sinon['default'].spy();\n    var component = this.subject({\n      createLayer: function createLayer() {\n        return {\n          setZIndex: setZIndex\n        };\n      }\n    });\n\n    var leafletLayerPromiseResolved = assert.async();\n    component.get('_leafletLayerPromise').then(function (leafletLayer) {\n      component._setLayerZIndex();\n      assert.ok(setZIndex.called);\n    })['finally'](function () {\n      leafletLayerPromiseResolved();\n    });\n  });\n\n  (0, _emberQunit.test)('should call _setLayerVisibility and _setLayerZIndex on render', function (assert) {\n    assert.expect(1);\n\n    var setLayerVisibility = _sinon['default'].spy();\n\n    var component = this.subject({\n      createLayer: createLayer,\n      _setLayerVisibility: setLayerVisibility\n    });\n\n    this.render();\n\n    var leafletLayerPromiseResolved = assert.async();\n    component.get('_leafletLayerPromise').then(function (leafletLayer) {\n      assert.ok(setLayerVisibility.called, 'should call visibilityDidChange');\n    })['finally'](function () {\n      leafletLayerPromiseResolved();\n    });\n  });\n\n  (0, _emberQunit.test)('should call container addLayer/removeLayer based on visibility property', function (assert) {\n    assert.expect(4);\n\n    var addLayer = _sinon['default'].spy();\n    var removeLayer = _sinon['default'].spy();\n\n    var leafletContainerHasLayer = false;\n    var hasLayer = function hasLayer() {\n      return leafletContainerHasLayer;\n    };\n\n    var component = this.subject({\n      createLayer: createLayer,\n\n      leafletContainer: {\n        addLayer: addLayer,\n        removeLayer: removeLayer,\n        hasLayer: hasLayer\n      }\n    });\n\n    var leafletLayerPromiseResolved = assert.async();\n    component.get('_leafletLayerPromise').then(function (leafletLayer) {\n      component.set('visibility', true);\n\n      assert.ok(addLayer.calledOnce, 'addLayer should be called once');\n      assert.ok(addLayer.calledWith(layer), 'addLayer should be called with layer instance');\n\n      leafletContainerHasLayer = true;\n      component.set('visibility', false);\n\n      assert.ok(removeLayer.calledOnce, 'removeLayer should be called once');\n      assert.ok(removeLayer.calledWith(layer), 'removeLayer should be called with layer instance');\n    })['finally'](function () {\n      leafletLayerPromiseResolved();\n    });\n  });\n});","define('dummy/tests/unit/components/base-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components');\n  test('unit/components/base-layer-test.js should pass jscs', function () {\n    ok(true, 'unit/components/base-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/base-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/base-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/base-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/base-vector-layer-test', ['exports', 'ember', 'ember-qunit', 'sinon', 'dummy/tests/helpers/start-app'], function (exports, _ember, _emberQunit, _sinon, _dummyTestsHelpersStartApp) {\n\n  var app = undefined;\n\n  (0, _emberQunit.moduleForComponent)('base-vector-layer', 'Unit | Component | base-vector-layer', {\n    unit: true,\n    needs: ['service:map-api', 'config:environment', 'component:base-vector-layer', 'model:new-platform-flexberry-g-i-s-map'],\n    beforeEach: function beforeEach() {\n      app = (0, _dummyTestsHelpersStartApp['default'])();\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(app, 'destroy');\n    }\n  });\n\n  (0, _emberQunit.test)('it identify on \\'geojson\\' layer', function (assert) {\n    var _this = this;\n\n    assert.expect(3);\n    var done = assert.async(3);\n    _ember['default'].run(function () {\n      /*\n        9  . . . . . . . . .\n        8 MPMP . .CpCp .MLML\n        7 MP .MP . . . . . .\n        6  .MPMP . P P .MLML\n        5  . . . . P P . . .\n        4  .CPCP . . . . L .\n        3  . .CP . . . p . L\n        2 CLCL . . . . . L .\n        1 CL . .MpMp . . . .\n        0  1 2 3 4 5 6 7 8 9\n      */\n      var component = _this.subject({\n        _createLayer: function _createLayer() {\n          this.set('_leafletObject', L.geoJson([{\n            type: 'Feature',\n            geometry: { type: 'Point', coordinates: [3, 7] }\n          }, {\n            type: 'Feature',\n            geometry: { type: 'MultiPoint', coordinates: [[1, 4], [1, 5]] }\n          }, {\n            type: 'Feature',\n            geometry: { type: 'LineString', coordinates: [[2, 8], [3, 9], [4, 8]] }\n          }, {\n            type: 'Feature',\n            geometry: { type: 'MultiLineString', coordinates: [[[6, 8], [6, 9]], [[8, 8], [8, 9]]] }\n          }, {\n            type: 'Feature',\n            geometry: { type: 'Polygon', coordinates: [[[5, 5], [5, 6], [6, 6], [6, 5]]] }\n          }, {\n            type: 'Feature',\n            geometry: { type: 'MultiPolygon', coordinates: [[[[7, 1], [8, 1], [8, 2]]], [[[6, 2], [6, 3], [7, 3]]]] }\n          }, {\n            type: 'GeometryCollection',\n            geometries: [{ type: 'Polygon', coordinates: [[[3, 3], [4, 3], [4, 2]]] }, { type: 'LineString', coordinates: [[1, 1], [2, 1], [2, 2]] }]\n          }, {\n            type: 'FeatureCollection',\n            features: [{ type: 'Feature', geometry: { type: 'Point', coordinates: [8, 5] } }, { type: 'Feature', geometry: { type: 'Point', coordinates: [8, 6] } }]\n          }]));\n          this.set('_leafletObject.options', { crs: L.CRS.EPSG4326 });\n        }\n      });\n\n      var select = function select(ar) {\n        return {\n          polygonLayer: {\n            toGeoJSON: function toGeoJSON() {\n              return {\n                type: 'Feature',\n                geometry: { type: 'Polygon', coordinates: ar }\n              };\n            }\n          }\n        };\n      };\n\n      var store = app.__container__.lookup('service:store');\n      var mapModel = store.createRecord('new-platform-flexberry-g-i-s-map');\n      var getmapApiStub = _sinon['default'].stub(component.get('mapApi'), 'getFromApi');\n      getmapApiStub.returns(mapModel);\n\n      component.identify(select([[[4, 4], [2, 4], [2, 6], [4, 6], [4, 4]]])).then(function (results) {\n        assert.equal(results.length, 0, 'Empty area is selected.');\n      })['finally'](done);\n\n      component.identify(select([[[9, 5], [8, 8], [6, 6], [9, 5]]])).then(function (results) {\n        assert.equal(results.length, 3, 'Point (from FeatureCollection), MultiLineString and Polygon.');\n      })['finally'](done);\n\n      component.identify(select([[[9, 1], [1, 1], [1, 9], [9, 9], [9, 1]]])).then(function (results) {\n        assert.equal(results.length, 10, 'All geometries is selected.');\n      })['finally'](done);\n    });\n  });\n});","define('dummy/tests/unit/components/base-vector-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components');\n  test('unit/components/base-vector-layer-test.js should pass jscs', function () {\n    ok(true, 'unit/components/base-vector-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/base-vector-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/base-vector-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/base-vector-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/flexberry-map-test', ['exports', 'ember', 'ember-qunit', 'sinon'], function (exports, _ember, _emberQunit, _sinon) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-map', 'Unit | Component | flexberry map', {\n    unit: true,\n    needs: ['component:flexberry-layers', 'service:map-api', 'service:i18n', 'map-tool:drag', 'config:environment']\n  });\n\n  (0, _emberQunit.test)('it should create leaflet map on didInsertElement', function (assert) {\n    var component = this.subject();\n    this.render();\n    assert.ok(component.get('_leafletObject') instanceof L.Map);\n  });\n\n  (0, _emberQunit.test)('test function queryToMap', function (assert) {\n    assert.expect(8);\n    var leafletMap = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n    var querySpy = _sinon['default'].stub(leafletMap, 'fire', function (st, e) {\n      e.results.push({ features: _ember['default'].RSVP.resolve([{ id: '1' }]) });\n    });\n    var component = this.subject({\n      _leafletObject: leafletMap\n    });\n    var done = assert.async(2);\n\n    var res = component._queryToMap('1', '2');\n\n    assert.ok(res instanceof _ember['default'].RSVP.Promise, 'Является ли результат работы функции Promise');\n    res.then(function (e) {\n      assert.equal(e.results.length, 1, 'Length results equals 1');\n      assert.equal(e.queryFilter, '1', 'Check parameter queryFilter');\n      assert.equal(e.mapObjectSetting, '2', 'Check parameter mapObjectSetting');\n      assert.equal(querySpy.callCount, 1, 'Count call method fire');\n      assert.equal(querySpy.args[0][0], 'flexberry-map:query', 'Check call first arg to method fire');\n      assert.deepEqual(querySpy.args[0][1], e, 'Check call second arg to method fire');\n      e.results[0].features.then(function (result) {\n        assert.equal(result[0].id, 1, 'Cherck result id');\n        done(1);\n      });\n      done(1);\n    });\n  });\n\n  (0, _emberQunit.test)('should compute center from lat/lng', function (assert) {\n    var lat = 10;\n    var lng = 10;\n\n    var component = this.subject({ lat: lat, lng: lng });\n\n    var center = component.get('center');\n    assert.ok(center instanceof L.LatLng);\n    assert.ok(center.equals([10, 10]));\n  });\n\n  (0, _emberQunit.test)('should pass center/zoom from properties to leaflet map', function (assert) {\n    assert.expect(4);\n\n    var component = this.subject({\n      lat: 10,\n      lng: 10,\n      zoom: 10\n    });\n\n    this.render();\n\n    var leafletMap = component.get('_leafletObject');\n\n    assert.equal(leafletMap.getZoom(), 10);\n    assert.ok(leafletMap.getCenter().equals([10, 10]));\n\n    _ember['default'].run(function () {\n      component.set('zoom', 0);\n    });\n\n    assert.equal(leafletMap.getZoom(), 0);\n\n    // After update to leaflet-1.0.0 panTo not directly change center,\n    // it will changed after animation will trigger 'moveend' event.\n    var promise = new _ember['default'].Test.promise(function (resolve) {\n      leafletMap.on('moveend', function () {\n        setTimeout(resolve, 500);\n      });\n    });\n\n    _ember['default'].run(function () {\n      component.setProperties({\n        'lat': 0,\n        'lng': 0\n      });\n    });\n\n    return promise.then(function () {\n      assert.ok(leafletMap.getCenter().equals([0, 0]));\n    });\n  });\n\n  (0, _emberQunit.test)('should pass zoomSnap/zoomDelta options to leaflet map', function (assert) {\n    var component = this.subject({\n      zoomSnap: 0.5,\n      zoomDelta: 0.1\n    });\n\n    this.render();\n\n    var leafletMap = component.get('_leafletObject');\n\n    assert.equal(leafletMap.options.zoomSnap, 0.5);\n    assert.equal(leafletMap.options.zoomDelta, 0.1);\n  });\n});","define('dummy/tests/unit/components/flexberry-map-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components');\n  test('unit/components/flexberry-map-test.js should pass jscs', function () {\n    ok(true, 'unit/components/flexberry-map-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/flexberry-map-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/flexberry-map-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/flexberry-map-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/layers/group-layer-test', ['exports', 'ember-qunit', 'sinon'], function (exports, _emberQunit, _sinon) {\n\n  (0, _emberQunit.moduleForComponent)('layers/group-layer', 'Unit | Component | layers/group layer', {\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it return L.LayerGroup on createLayer', function (assert) {\n    assert.expect(1);\n\n    var component = this.subject();\n    var layer = component.createLayer();\n    assert.ok(layer instanceof L.LayerGroup, 'Expected L.LayerGroup instance');\n  });\n\n  (0, _emberQunit.test)('it not call _leafletObject.setZIndex on setZIndex', function (assert) {\n    assert.expect(1);\n\n    var component = this.subject();\n    var leafletLayerPromiseResolved = assert.async();\n    component.get('_leafletLayerPromise').then(function (leafletLayer) {\n      var layer = component.get('_leafletObject');\n      var spy = _sinon['default'].spy(layer, 'setZIndex');\n\n      component.setZIndex(0);\n\n      assert.equal(spy.callCount, 0);\n    })['finally'](function () {\n      leafletLayerPromiseResolved();\n    });\n  });\n});","define('dummy/tests/unit/components/layers/group-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components/layers');\n  test('unit/components/layers/group-layer-test.js should pass jscs', function () {\n    ok(true, 'unit/components/layers/group-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/layers/group-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/layers/group-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/layers/group-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/layers/odata-vector-layer-test', ['exports', 'ember', 'ember-data', 'ember-qunit', 'dummy/tests/helpers/start-app', 'ember-flexberry-data', 'sinon', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326'], function (exports, _ember, _emberData, _emberQunit, _dummyTestsHelpersStartApp, _emberFlexberryData, _sinon, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326) {\n\n  var app = undefined;\n  var options = undefined;\n  var param = undefined;\n  var odataServerFake = undefined;\n  var bounds = undefined;\n  var store = undefined;\n  var responseBatchUpdate = undefined;\n\n  (0, _emberQunit.moduleForComponent)('layers/odata-vector-layer', 'Unit | Component | layers/odata vector layer', {\n    unit: true,\n    needs: ['service:map-api', 'service:layers-styles-renderer', 'config:environment', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-map-layer', 'adapter:application', 'layer:odata-vector'],\n    beforeEach: function beforeEach() {\n      app = (0, _dummyTestsHelpersStartApp['default'])();\n\n      var testModelMixin = _ember['default'].Mixin.create({\n        name: _emberData['default'].attr('string', { defaultValue: '' }),\n        shape: _emberData['default'].attr('json')\n      });\n\n      var testModel = _emberFlexberryData.Projection.Model.extend(testModelMixin);\n      testModel.defineProjection('TestModelL', 'test-model', {\n        name: _emberFlexberryData.Projection.attr(''),\n        shape: _emberFlexberryData.Projection.attr('')\n      });\n\n      var testSerializer = _emberFlexberryData.Serializer.Odata.extend({\n        primaryKey: '__PrimaryKey'\n      });\n\n      this.register('model:test-model', testModel);\n      this.register('mixin:test-model', testModelMixin);\n      this.register('serializer:test-model', testSerializer);\n\n      app.register('model:test-model', testModel);\n      app.register('mixin:test-model', testModelMixin);\n      app.register('serializer:test-model', testSerializer);\n\n      options = {\n        geometryField: 'shape',\n        showExisting: false,\n        withCredentials: false,\n        crs: L.CRS.EPSG3857,\n        continueLoading: false\n      };\n\n      var leafletOptions = ['geometryField', 'crs', 'maxFeatures', 'showExisting', 'style', 'forceMulti', 'withCredentials', 'continueLoading'];\n\n      param = {\n        format: 'GeoJSON',\n        leafletOptions: leafletOptions\n      };\n      param = _ember['default'].$.extend(param, options);\n\n      bounds = L.latLngBounds(L.latLng(58.4436454695997, 56.369991302490234), L.latLng(58.46793791815783, 56.53478622436524));\n      var getBounds = function getBounds() {\n        return bounds;\n      };\n\n      var getPane = function getPane() {\n        return undefined;\n      };\n\n      var createPane = function createPane() {\n        return {};\n      };\n\n      var hasLayer = function hasLayer() {\n        return true;\n      };\n\n      var removeLayer = function removeLayer() {\n        return {};\n      };\n\n      store = app.__container__.lookup('service:store');\n      var layerModel = store.createRecord('test-model');\n      layerModel.type = 'odata-vector';\n      layerModel.visibility = true;\n      _ember['default'].$.extend(param, {\n        'geometryType': 'MultiPolygonPropertyType',\n        'modelName': 'test-model',\n        'projectionName': 'TestModelL',\n        'geometryField': 'shape',\n        'typeName': 'test-model',\n        'odataClass': 'TestModel',\n        'continueLoading': true,\n        'store': store,\n        'layerModel': layerModel,\n        'leafletMap': {\n          getBounds: getBounds,\n          getPane: getPane,\n          createPane: createPane,\n          hasLayer: hasLayer,\n          removeLayer: removeLayer\n        }\n      });\n\n      odataServerFake = _sinon['default'].fakeServer.create();\n      odataServerFake.autoRespond = true;\n\n      var responseText = '--batchresponse_97a87974-3baf-4a2d-a8d4-bc7af540b74f\\n    Content-Type: application/http\\n    Content-Transfer-Encoding: binary\\n\\n    HTTP/1.1 200 OK\\n    Content-Type: application/json; charset=utf-8; odata.metadata=minimal\\n    OData-Version: 4.0\\n\\n    {\\n      \"@odata.context\":\"http://dh.ics.perm.ru:8085/map/odata/$metadata#TestModel(__PrimaryKey,ID,Name,Shape)\",\"value\":[\\n        {\\n          \"__PrimaryKey\":\"13681407-924d-4d2f-9c0d-f3059830a79b\", \"Name\":null,\"Shape\":{\\n            \"type\":\"MultiPolygon\",\"coordinates\":[\\n              [\\n                [\\n                  [468709.463318981,6478884.81118851],\\n            [468578.508624007,6478880.73565037],\\n            [468541.567377907,6478925.23599015],\\n            [468533.564191116,6478946.2331571],\\n            [468614.492922407,6478979.21144234],\\n            [468657.52589005,6478981.2057549],\\n            [468672.503518996,6478963.71619159],\\n            [468717.482394432,6478946.21010284],\\n            [468709.463318981,6478884.81118851]\\n                ]\\n              ]\\n            ],\"crs\":{\\n              \"type\":\"name\",\"properties\":{\\n                \"name\":\"EPSG:32640\"\\n              }\\n            }\\n          }\\n      },\\n\\n      {\\n          \"__PrimaryKey\":\"5b969764-acc2-4b48-8d6a-33b395c811ce\", \"Name\":null,\"Shape\":{\\n            \"type\":\"MultiPolygon\",\"coordinates\":[\\n              [\\n                [\\n                  [468709.463318981,6478884.81118851],\\n            [468578.508624007,6478880.73565037],\\n            [468541.567377907,6478925.23599015],\\n            [468533.564191116,6478946.2331571],\\n            [468614.492922407,6478979.21144234],\\n            [468657.52589005,6478981.2057549],\\n            [468672.503518996,6478963.71619159],\\n            [468717.482394432,6478946.21010284],\\n            [468709.463318981,6478884.81118851]\\n                ]\\n              ]\\n            ],\"crs\":{\\n              \"type\":\"name\",\"properties\":{\\n                \"name\":\"EPSG:32640\"\\n              }\\n            }\\n          }\\n      }\\n      ]\\n    }\\n    --batchresponse_97a87974-3baf-4a2d-a8d4-bc7af540b74f--';\n\n      responseBatchUpdate = '--batchresponse_36948c8f-1a0a-46f7-b66d-6692dc185197\\n    Content-Type: multipart/mixed; boundary=changesetresponse_80ff11bf-cdeb-4dd0-9654-e316dc4bd7a0\\n\\n    --changesetresponse_80ff11bf-cdeb-4dd0-9654-e316dc4bd7a0\\n    Content-Type: application/http\\n    Content-Transfer-Encoding: binary\\n    Content-ID: 1\\n\\n    HTTP/1.1 204 No Content\\n\\n\\n    --changesetresponse_80ff11bf-cdeb-4dd0-9654-e316dc4bd7a0\\n    Content-Type: application/http\\n    Content-Transfer-Encoding: binary\\n    Content-ID: 2\\n\\n    HTTP/1.1 200 OK\\n    Preference-Applied: return=representation\\n    Content-Type: application/json; charset=utf-8; odata.metadata=minimal\\n    OData-Version: 4.0\\n\\n    {\\n      \"@odata.context\":\"http://dh.ics.perm.ru:8085/map/odata/$metadata#TestModel/$entity\",\"Shape\":{\\n        \"type\":\"MultiPolygon\",\"coordinates\":[\\n          [\\n            [\\n              [\\n                436033.67676677159,6495840.3180785989\\n              ],[\\n                436363.34399267368,6496168.5915842094\\n              ],[\\n                436698.1414727,6495894.2219982184\\n              ],[\\n                436423.43417282181,6495569.9820099371\\n              ],[\\n                436033.67676677159,6495840.3180785989\\n              ]\\n            ]\\n          ]\\n        ],\"crs\":{\\n          \"type\":\"name\",\"properties\":{\\n            \"name\":\"EPSG:32640\"\\n          }\\n        }\\n      },\"Name\":\"test\",\"__PrimaryKey\":\"13681407-924d-4d2f-9c0d-f3059830a79b\"\\n    }\\n    --changesetresponse_80ff11bf-cdeb-4dd0-9654-e316dc4bd7a0\\n    Content-Type: application/http\\n    Content-Transfer-Encoding: binary\\n    Content-ID: 3\\n\\n    HTTP/1.1 201 Created\\n    Preference-Applied: return=representation\\n    Content-Type: application/json; charset=utf-8; odata.metadata=minimal\\n    OData-Version: 4.0\\n\\n    {\\n      \"@odata.context\":\"http://dh.ics.perm.ru:8085/map/odata/$metadata#TestModel/$entity\",\"Shape\":{\\n        \"type\":\"MultiPolygon\",\"coordinates\":[\\n          [\\n            [\\n              [\\n                437417.96742371243,6495668.4535367191\\n              ],[\\n                437838.01481024339,6495726.4829143463\\n              ],[\\n                437685.16544237174,6495215.9105252894\\n              ],[\\n                437417.96742371243,6495668.4535367191\\n              ]\\n            ]\\n          ]\\n        ],\"crs\":{\\n          \"type\":\"name\",\"properties\":{\\n            \"name\":\"EPSG:32640\"\\n          }\\n        }\\n      },\"Name\":null,\"__PrimaryKey\":\"a5532858-dbdc-4d3c-9eaf-3d71d097ceb0\"\\n    }\\n    --changesetresponse_80ff11bf-cdeb-4dd0-9654-e316dc4bd7a0--\\n    --batchresponse_36948c8f-1a0a-46f7-b66d-6692dc185197\\n    Content-Type: application/http\\n    Content-Transfer-Encoding: binary\\n\\n    HTTP/1.1 200 OK\\n    Content-Type: application/json; charset=utf-8; odata.metadata=minimal\\n    OData-Version: 4.0\\n\\n    {\\n      \"@odata.context\":\"http://dh.ics.perm.ru:8085/map/odata/$metadata#TestModel/$entity\",\"Shape\":{\\n        \"type\":\"MultiPolygon\",\"coordinates\":[\\n          [\\n            [\\n              [\\n                436033.676766772,6495840.3180786\\n              ],[\\n                436363.343992674,6496168.59158421\\n              ],[\\n                436698.1414727,6495894.22199822\\n              ],[\\n                436423.434172822,6495569.98200994\\n              ],[\\n                436033.676766772,6495840.3180786\\n              ]\\n            ]\\n          ]\\n        ],\"crs\":{\\n          \"type\":\"name\",\"properties\":{\\n            \"name\":\"EPSG:32640\"\\n          }\\n        }\\n      },\"Name\":\"test\",\"__PrimaryKey\":\"13681407-924d-4d2f-9c0d-f3059830a79b\"\\n    }\\n    --batchresponse_36948c8f-1a0a-46f7-b66d-6692dc185197\\n    Content-Type: application/http\\n    Content-Transfer-Encoding: binary\\n\\n    HTTP/1.1 200 OK\\n    Content-Type: application/json; charset=utf-8; odata.metadata=minimal\\n    OData-Version: 4.0\\n\\n    {\\n      \"@odata.context\":\"http://dh.ics.perm.ru:8085/map/odata/$metadata#TestModel/$entity\",\"Shape\":{\\n        \"type\":\"MultiPolygon\",\"coordinates\":[\\n          [\\n            [\\n              [\\n                437417.967423712,6495668.45353672\\n              ],[\\n                437838.014810243,6495726.48291435\\n              ],[\\n                437685.165442372,6495215.91052529\\n              ],[\\n                437417.967423712,6495668.45353672\\n              ]\\n            ]\\n          ]\\n        ],\"crs\":{\\n          \"type\":\"name\",\"properties\":{\\n            \"name\":\"EPSG:32640\"\\n          }\\n        }\\n      },\"Name\":null,\"__PrimaryKey\":\"a5532858-dbdc-4d3c-9eaf-3d71d097ceb0\"\\n    }\\n    --batchresponse_36948c8f-1a0a-46f7-b66d-6692dc185197--';\n\n      odataServerFake.respondWith('POST', 'http://134.209.30.115:1818/odata/$batch', function (request) {\n        if (request.requestBody.indexOf('POST') !== -1) {\n          request.respond(200, { 'content-type': 'multipart/mixed; boundary=batchresponse_36948c8f-1a0a-46f7-b66d-6692dc185197' }, responseBatchUpdate);\n        } else {\n          request.respond(200, { 'content-type': 'multipart/mixed; boundary=batchresponse_97a87974-3baf-4a2d-a8d4-bc7af540b74f' }, responseText);\n        }\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(app, 'destroy');\n      odataServerFake.restore();\n    }\n  });\n\n  var jsonModel = {\n    name: 'TestModel',\n    modelName: 'test-model',\n    className: 'TestModel',\n    nameSpace: 'nm',\n    parentModelName: null,\n    parentClassName: null,\n    attrs: [{\n      name: 'shape',\n      type: 'json',\n      flexberryType: 'polygon32640',\n      notNull: false,\n      defaultValue: '',\n      stored: true,\n      ordered: false\n    }, {\n      name: 'nomer',\n      type: 'string',\n      flexberryType: 'Строка250',\n      notNull: false,\n      defaultValue: '',\n      stored: true,\n      ordered: false\n    }],\n    belongsTo: [],\n    hasMany: [],\n    projections: [{\n      name: 'AuditView',\n      modelName: 'test-model',\n      attrs: [{\n        name: 'shape',\n        caption: '',\n        hidden: false,\n        index: 0\n      }, {\n        name: 'nomer',\n        caption: '',\n        hidden: false,\n        index: 1\n      }],\n      belongsTo: [],\n      hasMany: []\n    }, {\n      name: 'TestModel_L',\n      modelName: 'test-model',\n      attrs: [{\n        name: 'shape',\n        caption: '',\n        hidden: false,\n        index: 0\n      }, {\n        name: 'nomer',\n        caption: '',\n        hidden: false,\n        index: 1\n      }],\n      belongsTo: [],\n      hasMany: []\n    }],\n    stored: true,\n    offline: true,\n    external: false\n  };\n\n  var realCountArr = function realCountArr(arr) {\n    return arr.filter(function (item) {\n      if (item) {\n        return item;\n      }\n    }).length;\n  };\n\n  (0, _emberQunit.test)('getFilterParameters return SimplePredicate on single value in array', function (assert) {\n    var _this = this;\n\n    assert.expect(2);\n    var done = assert.async(1);\n    _ember['default'].run(function () {\n      // arrange\n      var component = _this.subject();\n      var linkParameter = _ember['default'].Object.create({\n        'queryKey': 'PK',\n        'layerField': 'testField'\n      });\n\n      // act\n      var result = component.getFilterParameters([linkParameter], { 'PK': ['id1'] });\n\n      // assert\n      var firstValue = result[0];\n      assert.ok(firstValue instanceof _emberFlexberryData.Query.SimplePredicate);\n      assert.equal(firstValue.toString(), '(testField eq id1)');\n      done();\n    });\n  });\n\n  (0, _emberQunit.test)('loadLayerFeatures() with featureIds=null', function (assert) {\n    var _this2 = this;\n\n    assert.expect(2);\n    var done = assert.async(3);\n    _ember['default'].run(function () {\n      var component = _this2.subject(param);\n\n      var mapModel = store.createRecord('new-platform-flexberry-g-i-s-map');\n      var getmapApiStub = _sinon['default'].stub(component.get('mapApi'), 'getFromApi');\n      getmapApiStub.returns(mapModel);\n\n      var getPkFieldStub = _sinon['default'].stub(mapModel, '_getLayerFeatureId');\n      getPkFieldStub.returns('123');\n\n      var e = {\n        featureIds: null,\n        layer: 'f34ea73d-9f00-4f02-b02d-675d459c972b',\n        results: _ember['default'].A()\n      };\n\n      component.get('_leafletLayerPromise').then(function (leafletLayer) {\n        component.set('_leafletObject', leafletLayer);\n\n        component.loadLayerFeatures(e).then(function (layers) {\n          assert.ok(layers, 'Load with null featureIds');\n          done();\n        });\n      })['finally'](function () {\n        done();\n        getmapApiStub.restore();\n        getPkFieldStub.restore();\n      });\n\n      assert.ok(component, 'Create odata-layer');\n      done();\n    });\n  });\n\n  (0, _emberQunit.test)('getLayerFeatures() with featureIds=null', function (assert) {\n    var _this3 = this;\n\n    assert.expect(2);\n    var done = assert.async(3);\n    _ember['default'].run(function () {\n      var component = _this3.subject(param);\n\n      var getCountFeaturesStub = _sinon['default'].stub(component, 'getCountFeatures');\n      getCountFeaturesStub.returns(_ember['default'].run(function () {\n        return _ember['default'].RSVP.resolve(123);\n      }));\n\n      var e = {\n        featureIds: null,\n        layer: 'f34ea73d-9f00-4f02-b02d-675d459c972b',\n        results: _ember['default'].A()\n      };\n\n      component.get('_leafletLayerPromise').then(function (leafletLayer) {\n        component.set('_leafletObject', leafletLayer);\n\n        component.getLayerFeatures(e).then(function (layers) {\n          assert.ok(layers, 'Get with null featureIds');\n          done();\n        });\n      })['finally'](function () {\n        done();\n        getCountFeaturesStub.restore();\n      });\n\n      assert.ok(component, 'Create odata-layer');\n      done();\n    });\n  });\n\n  (0, _emberQunit.test)('continueLoad()', function (assert) {\n    var _this4 = this;\n\n    assert.expect(7);\n    var done = assert.async(3);\n\n    _ember['default'].run(function () {\n      var component = _this4.subject(param);\n      _ember['default'].run(function () {\n        component.get('_leafletLayerPromise').then(function (leafletLayer) {\n          component.set('_leafletObject', leafletLayer);\n          leafletLayer.promiseLoadLayer.then(_ember['default'].run(function () {\n            var loadedBounds = component.get('loadedBounds');\n            assert.ok(loadedBounds, 'loadedBounds');\n            assert.ok(loadedBounds.getBounds() instanceof L.LatLngBounds, 'loadedBounds.getBounds() is L.LatLngBounds');\n            assert.ok(JSON.stringify(loadedBounds.getBounds()) === JSON.stringify(bounds), 'loadedBounds get from map');\n\n            bounds = L.latLngBounds(L.latLng(58.46807257997011, 56.61014556884766), L.latLng(58.443780224452524, 56.44535064697266));\n\n            var load = component.continueLoad();\n            load.then(_ember['default'].run(function () {\n              loadedBounds = component.get('loadedBounds');\n              assert.ok(loadedBounds, 'loadedBounds');\n              assert.ok(loadedBounds.getBounds() instanceof L.LatLngBounds, 'loadedBounds.getBounds() is L.LatLngBounds');\n              var strBounds = '{\"_southWest\":{\"lat\":58.4436454695997,\"lng\":56.369991302490234},\"_northEast\":{\"lat\":58.46807257997011,\"lng\":56.61014556884766}}';\n              assert.ok(JSON.stringify(loadedBounds.getBounds()) === strBounds, 'loadedBounds get from map');\n\n              done();\n            }));\n          }));\n        })['finally'](function () {\n          done();\n        });\n      });\n\n      assert.ok(component, 'Create odata-layer');\n      done();\n    });\n  });\n\n  (0, _emberQunit.test)('test methos identify()', function (assert) {\n    var _this5 = this;\n\n    assert.expect(3);\n    var done = assert.async(1);\n    _ember['default'].run(function () {\n      var latlngs = [[L.latLng(30, 10), L.latLng(40, 40), L.latLng(20, 40), L.latLng(10, 20)]];\n      var layer = L.polygon(latlngs);\n      var e = {\n        polygonLayer: layer\n      };\n      _ember['default'].$.extend(param, {\n        crs: _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'].create(),\n        _getFeature: function _getFeature() {\n          return _ember['default'].RSVP.resolve(['1']);\n        },\n        _addLayersOnMap: function _addLayersOnMap() {\n          return null;\n        }\n      });\n      var component = _this5.subject(param);\n      var spyGetFeature = _sinon['default'].spy(component, '_getFeature');\n\n      component.identify(e);\n\n      assert.ok(spyGetFeature.getCall(0).args[0] instanceof _emberFlexberryData.Query.GeometryPredicate);\n      assert.equal(spyGetFeature.getCall(0).args[0]._attributePath, 'shape');\n      assert.equal(spyGetFeature.getCall(0).args[0]._intersectsValue, 'SRID=4326;POLYGON((10 30, 40 40, 40 20, 20 10, 10 30))');\n      done();\n      spyGetFeature.restore();\n    });\n  });\n\n  (0, _emberQunit.test)('test method createAdapterForModel() with odataUrl', function (assert) {\n    assert.expect(1);\n    _ember['default'].$.extend(param, {\n      'odataUrl': 'http://localhost:6500/odata/'\n    });\n    var component = this.subject(param);\n\n    var adapterModel = component.createAdapterForModel();\n\n    assert.ok(adapterModel);\n  });\n\n  (0, _emberQunit.test)('test method createAdapterForModel() without odataUrl', function (assert) {\n    assert.expect(1);\n    var component = this.subject(param);\n\n    var adapterModel = component.createAdapterForModel();\n\n    assert.notOk(adapterModel);\n  });\n\n  (0, _emberQunit.test)('test method createDynamicModel() with json', function (assert) {\n    assert.expect(24);\n    var done = assert.async(1);\n    _ember['default'].$.extend(param, {\n      'odataUrl': 'http://localhost:6500/odata/',\n      'namespace': 'NS',\n      'metadataUrl': 'assert/felxberry/models/'\n    });\n    jsonModel.parentModelName = null;\n    var component = this.subject(param);\n    var spyUnregister = _sinon['default'].spy(_ember['default'].getOwner(this), 'unregister');\n    var spyRegister = _sinon['default'].spy(_ember['default'].getOwner(this), 'register');\n    var spyCreateAdapterForModel = _sinon['default'].spy(component, 'createAdapterForModel');\n    var spyCreateModel = _sinon['default'].spy(component, 'createModel');\n    var spyCreateProjection = _sinon['default'].spy(component, 'createProjection');\n    var spyCreateMixin = _sinon['default'].spy(component, 'createMixin');\n    var spyCreateSerializer = _sinon['default'].spy(component, 'createSerializer');\n    var spyCreateModelHierarchy = _sinon['default'].spy(component, 'сreateModelHierarchy');\n    var stubAjax = _sinon['default'].stub(_ember['default'].$, 'ajax');\n    stubAjax.yieldsTo('success', jsonModel);\n\n    component.createDynamicModel().then(function () {\n      assert.equal(spyCreateAdapterForModel.callCount, 1);\n      assert.equal(spyCreateModel.callCount, 1);\n      assert.equal(spyCreateProjection.callCount, 1);\n      assert.equal(spyCreateMixin.callCount, 1);\n      assert.equal(spyCreateSerializer.callCount, 1);\n\n      assert.equal(spyUnregister.callCount, 4);\n      assert.equal(spyUnregister.firstCall.args[0], 'model:test-model');\n      assert.equal(spyUnregister.secondCall.args[0], 'mixin:test-model');\n      assert.equal(spyUnregister.thirdCall.args[0], 'serializer:test-model');\n      assert.equal(spyUnregister.lastCall.args[0], 'adapter:test-model');\n\n      assert.equal(spyRegister.callCount, 4);\n      assert.equal(spyRegister.firstCall.args[0], 'model:test-model');\n      assert.ok(spyRegister.firstCall.args[1].ClassMixin.mixins[1].properties.hasOwnProperty('namespace'));\n      assert.equal(spyRegister.firstCall.args[1].ClassMixin.mixins[1].properties.namespace, 'NS');\n      assert.ok(spyRegister.firstCall.args[1].ClassMixin.mixins[2].properties.projections.hasOwnProperty('TestModelL'));\n      assert.equal(spyRegister.secondCall.args[0], 'mixin:test-model');\n      assert.equal(Object.values(spyRegister.secondCall.args[1].mixins[0].properties).length, 2);\n      assert.ok(spyRegister.secondCall.args[1].mixins[0].properties.hasOwnProperty('nomer'));\n      assert.ok(spyRegister.secondCall.args[1].mixins[0].properties.hasOwnProperty('shape'));\n      assert.equal(spyRegister.thirdCall.args[0], 'serializer:test-model');\n      assert.equal(spyRegister.lastCall.args[0], 'adapter:test-model');\n      assert.ok(spyRegister.lastCall.args[1].PrototypeMixin.mixins[2].properties.hasOwnProperty('host'));\n      assert.equal(spyRegister.lastCall.args[1].PrototypeMixin.mixins[2].properties.host, 'http://localhost:6500/odata/');\n\n      assert.equal(spyCreateModelHierarchy.callCount, 1);\n\n      done();\n      spyRegister.restore();\n      spyUnregister.restore();\n      spyCreateAdapterForModel.restore();\n      spyCreateModel.restore();\n      spyCreateProjection.restore();\n      spyCreateMixin.restore();\n      spyCreateSerializer.restore();\n      spyCreateModelHierarchy.restore();\n      stubAjax.restore();\n    });\n  });\n\n  (0, _emberQunit.test)('test method createDynamicModel() with json with parent', function (assert) {\n    assert.expect(27);\n    var done = assert.async(1);\n    _ember['default'].$.extend(param, {\n      'odataUrl': 'http://localhost:6500/odata/',\n      'namespace': 'NS',\n      'metadataUrl': 'assert/felxberry/models/'\n    });\n\n    var component = this.subject(param);\n    var spyUnregister = _sinon['default'].spy(_ember['default'].getOwner(this), 'unregister');\n    var spyRegister = _sinon['default'].spy(_ember['default'].getOwner(this), 'register');\n    var spyCreateAdapterForModel = _sinon['default'].spy(component, 'createAdapterForModel');\n    var spyCreateModel = _sinon['default'].spy(component, 'createModel');\n    var spyCreateProjection = _sinon['default'].spy(component, 'createProjection');\n    var spyCreateMixin = _sinon['default'].spy(component, 'createMixin');\n    var spyCreateSerializer = _sinon['default'].spy(component, 'createSerializer');\n    var spyCreateModelHierarchy = _sinon['default'].spy(component, 'сreateModelHierarchy');\n\n    jsonModel.parentModelName = 'Polygon32640';\n    var parentJsonModel = {\n      name: 'Polygon32640',\n      modelName: 'Polygon32640',\n      className: 'Polygon32640',\n      nameSpace: 'NS1',\n      parentModelName: null,\n      parentClassName: null,\n      attrs: [{\n        name: 'name',\n        type: 'string',\n        flexberryType: 'Строка250',\n        notNull: false,\n        defaultValue: '',\n        stored: true,\n        ordered: false\n      }],\n      belongsTo: [],\n      hasMany: [],\n      projections: [],\n      stored: false,\n      offline: true,\n      external: false\n    };\n\n    var stubAjax = _sinon['default'].stub(_ember['default'].$, 'ajax');\n    stubAjax.onCall(0).yieldsTo('success', jsonModel).onCall(1).yieldsTo('success', parentJsonModel);\n\n    component.createDynamicModel().then(function () {\n      assert.equal(spyCreateAdapterForModel.callCount, 1);\n      assert.equal(spyCreateModel.callCount, 1);\n      assert.equal(spyCreateProjection.callCount, 1);\n      assert.equal(spyCreateMixin.callCount, 2);\n      assert.equal(spyCreateSerializer.callCount, 1);\n      assert.equal(stubAjax.callCount, 2);\n      assert.equal(stubAjax.getCall(0).args[0].url, 'assert/felxberry/models/test-model.json');\n      assert.equal(stubAjax.getCall(1).args[0].url, 'assert/felxberry/models/Polygon32640.json');\n\n      assert.equal(spyUnregister.callCount, 4);\n      assert.equal(spyUnregister.firstCall.args[0], 'model:test-model');\n      assert.equal(spyUnregister.secondCall.args[0], 'mixin:test-model');\n      assert.equal(spyUnregister.thirdCall.args[0], 'serializer:test-model');\n      assert.equal(spyUnregister.lastCall.args[0], 'adapter:test-model');\n\n      assert.equal(spyRegister.callCount, 4);\n      assert.equal(spyRegister.firstCall.args[0], 'model:test-model');\n      assert.ok(spyRegister.firstCall.args[1].ClassMixin.mixins[1].properties.hasOwnProperty('namespace'));\n      assert.equal(spyRegister.firstCall.args[1].ClassMixin.mixins[1].properties.namespace, 'NS');\n      assert.ok(spyRegister.firstCall.args[1].ClassMixin.mixins[2].properties.projections.hasOwnProperty('TestModelL'));\n      assert.equal(spyRegister.secondCall.args[0], 'mixin:test-model');\n      assert.equal(Object.values(spyRegister.secondCall.args[1].mixins[0].properties).length, 2);\n      assert.ok(spyRegister.secondCall.args[1].mixins[0].properties.hasOwnProperty('nomer'));\n      assert.ok(spyRegister.secondCall.args[1].mixins[0].properties.hasOwnProperty('shape'));\n      assert.equal(spyRegister.thirdCall.args[0], 'serializer:test-model');\n      assert.equal(spyRegister.lastCall.args[0], 'adapter:test-model');\n      assert.ok(spyRegister.lastCall.args[1].PrototypeMixin.mixins[2].properties.hasOwnProperty('host'));\n      assert.equal(spyRegister.lastCall.args[1].PrototypeMixin.mixins[2].properties.host, 'http://localhost:6500/odata/');\n\n      assert.equal(spyCreateModelHierarchy.callCount, 2);\n\n      done();\n      spyRegister.restore();\n      spyUnregister.restore();\n      spyCreateAdapterForModel.restore();\n      spyCreateModel.restore();\n      spyCreateProjection.restore();\n      spyCreateMixin.restore();\n      spyCreateSerializer.restore();\n      stubAjax.restore();\n      spyCreateModelHierarchy.restore();\n    });\n  });\n\n  (0, _emberQunit.test)('test method createDynamicModel() without json', function (assert) {\n    assert.expect(1);\n    var done = assert.async(1);\n    var component = this.subject(param);\n\n    component.createDynamicModel()['catch'](function (error) {\n      assert.equal(error, 'Can\\'t create dynamic model: test-model. Error: ModelName and metadataUrl is empty');\n      done();\n    });\n  });\n\n  (0, _emberQunit.test)('test method _createVectorLayer()', function (assert) {\n    assert.expect(3);\n    param.layerModel.visibility = false;\n    var component = this.subject(param);\n    var spyContinueLoad = _sinon['default'].spy(component, 'continueLoad');\n\n    var layerResult = component._createVectorLayer();\n\n    assert.ok(layerResult);\n    assert.equal(spyContinueLoad.callCount, 1);\n    assert.equal(spyContinueLoad.getCall(0).args[0], layerResult);\n\n    spyContinueLoad.restore();\n  });\n\n  (0, _emberQunit.test)('test method createVectorLayer() without dynamicModel', function (assert) {\n    assert.expect(7);\n    var done = assert.async(1);\n    param.layerModel.visibility = false;\n    var component = this.subject(param);\n    var spyContinueLoad = _sinon['default'].spy(component, 'continueLoad');\n    var _createVectorLayerSpy = _sinon['default'].spy(component, '_createVectorLayer');\n    var spyCreateDynamicModel = _sinon['default'].spy(component, 'createDynamicModel');\n    var spyAjax = _sinon['default'].spy(_ember['default'].$, 'ajax');\n    var spyCreateModelHierarchy = _sinon['default'].spy(component, 'сreateModelHierarchy');\n\n    component.createVectorLayer().then(function (layer) {\n      assert.ok(layer);\n      assert.equal(spyContinueLoad.callCount, 1);\n      assert.equal(spyContinueLoad.getCall(0).args[0], layer);\n      assert.equal(_createVectorLayerSpy.callCount, 1);\n      assert.equal(spyAjax.callCount, 0);\n      assert.equal(spyCreateDynamicModel.callCount, 0);\n      assert.equal(spyCreateModelHierarchy.callCount, 0);\n      done();\n      spyContinueLoad.restore();\n      _createVectorLayerSpy.restore();\n      spyAjax.restore();\n      spyCreateDynamicModel.restore();\n      spyCreateModelHierarchy.restore();\n    });\n  });\n\n  (0, _emberQunit.test)('test method createVectorLayer() with dynamicModel=true', function (assert) {\n    assert.expect(8);\n    var done = assert.async(1);\n    param.layerModel.visibility = false;\n    param.dynamicModel = true;\n    param.metadataUrl = 'assert/felxberry/models/';\n    param.odataUrl = 'http://localhost:6500/odata/';\n    jsonModel.parentModelName = null;\n    var component = this.subject(param);\n    var spyContinueLoad = _sinon['default'].spy(component, 'continueLoad');\n    var _createVectorLayerSpy = _sinon['default'].spy(component, '_createVectorLayer');\n    var spyCreateDynamicModel = _sinon['default'].spy(component, 'createDynamicModel');\n    var stubAjax = _sinon['default'].stub(_ember['default'].$, 'ajax');\n    stubAjax.yieldsTo('success', jsonModel);\n    var spyCreateModelHierarchy = _sinon['default'].spy(component, 'сreateModelHierarchy');\n\n    component.createVectorLayer().then(function (layer) {\n      assert.ok(layer);\n      assert.equal(spyContinueLoad.callCount, 1);\n      assert.equal(spyContinueLoad.getCall(0).args[0], layer);\n      assert.equal(_createVectorLayerSpy.callCount, 1);\n      assert.equal(stubAjax.callCount, 1);\n      assert.equal(stubAjax.getCall(0).args[0].url, 'assert/felxberry/models/test-model.json');\n      assert.equal(spyCreateDynamicModel.callCount, 1);\n      assert.equal(spyCreateModelHierarchy.callCount, 1);\n      done();\n      spyContinueLoad.restore();\n      _createVectorLayerSpy.restore();\n      spyCreateDynamicModel.restore();\n      stubAjax.restore();\n      spyCreateModelHierarchy.restore();\n    });\n  });\n\n  (0, _emberQunit.test)('test method save() no modified objects', function (assert) {\n    assert.expect(5);\n    var done = assert.async(1);\n    var component = this.subject(param);\n\n    component.get('_leafletLayerPromise').then(function (leafletLayer) {\n      component.set('_leafletObject', leafletLayer);\n      leafletLayer.promiseLoadLayer.then(function () {\n        var leafletObject = component.get('_leafletObject');\n        var obj = component.get('_adapterStoreModelProjectionGeom');\n        var spyBatchUpdate = _sinon['default'].spy(obj.adapter, 'batchUpdate');\n\n        assert.equal(realCountArr(leafletObject.models), 0);\n        assert.equal(leafletObject.getLayers().length, 2);\n\n        component.save();\n\n        assert.equal(realCountArr(leafletObject.models), 0);\n        assert.equal(leafletObject.getLayers().length, 2);\n        assert.equal(spyBatchUpdate.callCount, 0);\n        done();\n\n        spyBatchUpdate.restore();\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('test method save() with objects', function (assert) {\n    assert.expect(15);\n    var done = assert.async(1);\n    var component = this.subject(param);\n\n    component.get('_leafletLayerPromise').then(function (leafletLayer) {\n      component.set('_leafletObject', leafletLayer);\n      leafletLayer.promiseLoadLayer.then(function () {\n        var leafletObject = component.get('_leafletObject');\n        var obj = component.get('_adapterStoreModelProjectionGeom');\n        var spyBatchUpdate = _sinon['default'].spy(obj.adapter, 'batchUpdate');\n\n        assert.equal(realCountArr(leafletObject.models), 0);\n        assert.equal(leafletObject.getLayers().length, 2);\n\n        var layerUpdate = leafletObject.getLayers()[0];\n        layerUpdate.feature.properties.name = 'test';\n        leafletObject.editLayer(layerUpdate);\n\n        assert.equal(realCountArr(leafletObject.models), 1);\n        assert.equal(leafletObject.getLayers().length, 2);\n\n        var layerRemove = leafletObject.getLayers()[1];\n        leafletObject.removeLayer(layerRemove);\n\n        assert.equal(realCountArr(leafletObject.models), 2);\n        assert.equal(leafletObject.getLayers().length, 1);\n\n        var feature = {\n          type: 'Polygon',\n          coordinates: [[[10, 30], [40, 40], [40, 20], [20, 10], [10, 30]]]\n        };\n        var layerAdd = L.geoJSON(feature).getLayers()[0];\n        layerAdd._label = {\n          _leaflet_id: 1000\n        };\n        leafletObject.addLayer(layerAdd);\n        leafletObject._labelsLayer = {\n          1000: {}\n        };\n        var pk = layerAdd.feature.properties.primarykey;\n        responseBatchUpdate.replace('a5532858-dbdc-4d3c-9eaf-3d71d097ceb0', pk);\n\n        assert.equal(realCountArr(leafletObject.models), 3);\n        assert.equal(leafletObject.getLayers().length, 2);\n\n        var mapModel = store.createRecord('new-platform-flexberry-g-i-s-map');\n        var stubGetmapApi = _sinon['default'].stub(component.get('mapApi'), 'getFromApi');\n        stubGetmapApi.returns(mapModel);\n\n        var _getModelLayerFeatureStub = _sinon['default'].stub(mapModel, '_getModelLayerFeature');\n        _getModelLayerFeatureStub.returns(_ember['default'].RSVP.resolve([null, null, [layerAdd]]));\n\n        var saveSuccess = function saveSuccess(data) {\n          assert.equal(_getModelLayerFeatureStub.callCount, 1);\n          assert.deepEqual(_getModelLayerFeatureStub.getCall(0).args[1], [pk]);\n          assert.equal(data.layers.length, 1);\n          assert.equal(realCountArr(leafletObject.models), 0);\n          assert.equal(leafletObject.getLayers().length, 1);\n          assert.equal(leafletObject.getLayers()[0].state, 'exist');\n          done();\n\n          spyBatchUpdate.restore();\n          stubGetmapApi.restore();\n          _getModelLayerFeatureStub.restore();\n        };\n\n        leafletObject.once('save:success', saveSuccess);\n        component.save();\n\n        assert.equal(spyBatchUpdate.callCount, 1);\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('test method createModelHierarchy() with 3 parent', function (assert) {\n    assert.expect(11);\n    var done = assert.async(1);\n    _ember['default'].$.extend(param, {\n      'odataUrl': 'http://localhost:6500/odata/',\n      'namespace': 'ns',\n      'metadataUrl': 'assert/felxberry/models/'\n    });\n\n    var component = this.subject(param);\n\n    jsonModel.parentModelName = 'parent1';\n    var parent1JsonModel = {\n      name: 'parent1',\n      parentModelName: 'parent2',\n      modelName: 'parent1',\n      className: 'parent1',\n      nameSpace: 'NS1',\n      attrs: [{\n        name: 'name',\n        type: 'string',\n        flexberryType: 'Строка250',\n        notNull: false,\n        defaultValue: '',\n        stored: true,\n        ordered: false\n      }],\n      belongsTo: [],\n      hasMany: [],\n      projections: [],\n      stored: false,\n      offline: true,\n      external: false\n    };\n\n    var parent2JsonModel = {\n      name: 'parent2',\n      parentModelName: 'parent3',\n      modelName: 'parent2',\n      className: 'parent2',\n      nameSpace: 'NS2',\n      attrs: [{\n        name: 'name2',\n        type: 'string',\n        flexberryType: 'Строка250',\n        notNull: false,\n        defaultValue: '',\n        stored: true,\n        ordered: false\n      }],\n      belongsTo: [],\n      hasMany: [],\n      projections: [],\n      stored: false,\n      offline: true,\n      external: false\n    };\n\n    var parent3JsonModel = {\n      name: 'parent3',\n      parentModelName: null,\n      modelName: 'parent3',\n      className: 'parent3',\n      nameSpace: 'NS3',\n      attrs: [{\n        name: 'name3',\n        type: 'string',\n        flexberryType: 'Строка250',\n        notNull: false,\n        defaultValue: '',\n        stored: true,\n        ordered: false\n      }],\n      belongsTo: [],\n      hasMany: [],\n      projections: [],\n      stored: false,\n      offline: true,\n      external: false\n    };\n    var stubAjax = _sinon['default'].stub(_ember['default'].$, 'ajax');\n    stubAjax.onCall(0).yieldsTo('success', jsonModel).onCall(1).yieldsTo('success', parent1JsonModel).onCall(2).yieldsTo('success', parent2JsonModel).onCall(3).yieldsTo('success', parent3JsonModel);\n\n    var spyCreateModel = _sinon['default'].spy(component, 'createModel');\n    var spyCreateMixin = _sinon['default'].spy(component, 'createMixin');\n    var spyCreateModelHierarchy = _sinon['default'].spy(component, 'сreateModelHierarchy');\n\n    component.сreateModelHierarchy(param.metadataUrl, param.modelName).then(function (_ref) {\n      var model = _ref.model;\n      var dataModel = _ref.dataModel;\n      var modelMixin = _ref.modelMixin;\n\n      assert.equal(stubAjax.callCount, 4);\n      assert.equal(spyCreateModel.callCount, 1);\n      assert.equal(spyCreateMixin.callCount, 4);\n      assert.equal(spyCreateModelHierarchy.callCount, 4);\n      assert.equal(spyCreateModelHierarchy.getCall(0).args[1], 'test-model');\n      assert.equal(spyCreateModelHierarchy.getCall(1).args[1], 'parent1');\n      assert.equal(spyCreateModelHierarchy.getCall(2).args[1], 'parent2');\n      assert.equal(spyCreateModelHierarchy.getCall(3).args[1], 'parent3');\n      assert.ok(model);\n      assert.ok(dataModel);\n      assert.ok(modelMixin);\n      done();\n      stubAjax.restore();\n      spyCreateModel.restore();\n      spyCreateMixin.restore();\n      spyCreateModelHierarchy.restore();\n    });\n  });\n\n  (0, _emberQunit.test)('test method clearLayers()', function (assert) {\n    assert.expect(4);\n    var done = assert.async(1);\n    var component = this.subject(param);\n\n    component.get('_leafletLayerPromise').then(function (leafletLayer) {\n      component.set('_leafletObject', leafletLayer);\n      leafletLayer.promiseLoadLayer.then(function () {\n        var leafletObject = component.get('_leafletObject');\n\n        assert.equal(realCountArr(leafletObject.models), 0);\n        assert.equal(leafletObject.getLayers().length, 2);\n        leafletObject.clearLayers();\n        assert.equal(realCountArr(leafletObject.models), 0);\n        assert.equal(leafletObject.getLayers().length, 0);\n        done();\n      });\n    });\n  });\n});","define('dummy/tests/unit/components/layers/odata-vector-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components/layers');\n  test('unit/components/layers/odata-vector-layer-test.js should pass jscs', function () {\n    ok(true, 'unit/components/layers/odata-vector-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/layers/odata-vector-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/layers/odata-vector-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/layers/odata-vector-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/layers/tile-layer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('layers/tile-layer', 'Unit | Component | layers/tile layer', {\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it return L.TileLayer on createLayer', function (assert) {\n    var component = this.subject({\n      requiredOptions: ['']\n    });\n    var layer = component.createLayer();\n    assert.ok(layer instanceof L.TileLayer, 'Expected L.TileLayer instance');\n  });\n});","define('dummy/tests/unit/components/layers/tile-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components/layers');\n  test('unit/components/layers/tile-layer-test.js should pass jscs', function () {\n    ok(true, 'unit/components/layers/tile-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/layers/tile-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/layers/tile-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/layers/tile-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/layers/wfs-layer-test', ['exports', 'ember', 'ember-qunit', 'sinon', 'dummy/tests/helpers/start-app'], function (exports, _ember, _emberQunit, _sinon, _dummyTestsHelpersStartApp) {\n\n  var app = undefined;\n  var geoserverFake = undefined;\n  var options = undefined;\n  var param = undefined;\n\n  (0, _emberQunit.moduleForComponent)('layers/wfs-layer', 'Unit | Component | layers/wfs layer', {\n    unit: true,\n    needs: ['service:map-api', 'config:environment', 'component:base-vector-layer', 'model:new-platform-flexberry-g-i-s-map'],\n    beforeEach: function beforeEach() {\n      app = (0, _dummyTestsHelpersStartApp['default'])();\n\n      options = {\n        url: 'http://geoserverFake/geoserver/ows',\n        geometryField: 'shape',\n        showExisting: false,\n        withCredentials: false,\n        crs: L.CRS.EPSG3857,\n        typeNSName: 'rgisperm',\n        filter: null,\n        version: '1.1.0',\n        continueLoading: true\n      };\n\n      var leafletOptions = ['url', 'version', 'namespaceUri', 'typeNS', 'typeName', 'typeNSName', 'geometryField', 'crs', 'maxFeatures', 'showExisting', 'style', 'filter', 'forceMulti', 'withCredentials', 'continueLoading'];\n\n      param = {\n        format: 'GeoJSON',\n        leafletOptions: leafletOptions\n      };\n      param = _ember['default'].$.extend(param, options);\n\n      geoserverFake = _sinon['default'].fakeServer.create();\n      geoserverFake.autoRespond = true;\n\n      geoserverFake.respondWith('POST', 'http://geoserverFake/geoserver/ows?', function (request) {\n        if (request.requestBody === '<wfs:GetFeature xmlns:wfs=\"http://www.opengis.net/wfs\" service=\"WFS\" version=\"1.1.0\" outputFormat=\"application/json\">' + '<wfs:Query typeName=\"les:povorottochkipoint32640\" srsName=\"EPSG:3857\"><ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\"><Not><Or>' + '<ogc:PropertyIsEqualTo matchCase=\"false\"><ogc:PropertyName>primarykey</ogc:PropertyName><ogc:Literal>475adc5b-fee4-4e8c-bed0-93746a9f00f0' + '</ogc:Literal></ogc:PropertyIsEqualTo></Or></Not></ogc:Filter></wfs:Query></wfs:GetFeature>') {\n          request.respond(200, { 'Content-Type': 'application/json' }, '{\"type\":\"FeatureCollection\",\"features\":[],\"totalFeatures\":0,\"numberMatched\":0,\"numberReturned\":0,\"timeStamp\":\"2020-02-27T04:44:49.909Z\",' + '\"crs\":null}');\n        }\n\n        if (request.requestBody.indexOf('<wfs:GetFeature') !== -1) {\n          request.respond(200, { 'Content-Type': 'application/json' }, '{\"type\":\"FeatureCollection\",\"features\":[{\"type\":\"Feature\",\"id\":\"vydel_utverzhdeno_polygon.06350c71-ec5c-431e-a5ab-e423cf662128\",' + '\"geometry\":{\"type\":\"MultiPolygon\",\"coordinates\":[[[[6215353.89391635,8117916.10977998],[6215317.82640125,8117408.36954415],' + '[6215322.83577823,8116959.81224657],[6213934.34777038,8117228.98625252],[6213930.67422719,8117229.84351009],' + '[6214007.26203691,8117650.34021493],[6214045.44462228,8117860.38311881],[6214113.79478966,8118235.47443556],' + '[6214237.35942438,8118229.9015124],[6214247.82345653,8118288.63175866],[6215053.10865244,8118087.57903733],' + '[6215031.95794919,8118033.35145873],[6215042.3106618,8117957.47637766],[6215353.89391635,8117916.10977998]]]]},' + '\"geometry_name\":\"shape\",\"properties\":' + '{\"id\":\"000\",\"lesnichestvo\":\"-\",\"uchastkovoelesnichestvo\":\"-\",\"nomerkvartala\":\"141\",\"urochishe\":null,\"nomer\":10,\"ploshad\":200,\"kategoriyazemel\":' + '\"Эксплуатационные леса\",\"preobladayushayaporoda\":\"Сосна\",\"bonitet\":\"2\",\"gruppavozrasta\":\"Молодняки I гр.\",\"klassvozrasta\":\"1\",\"klasstovarnosti\":' + 'null,\"area\":373798.7024302,\"length\":null,\"primarykey\":\"06350c71-ec5c-431e-a5ab-e423cf662128\",\"createtime\":null,\"creator\":null,' + '\"edittime\":null,\"editor\":null}}],\"totalFeatures\":1,\"numberMatched\":1,\"numberReturned\":1,\"timeStamp\":\"2020-02-27T04:44:49.909Z\",' + '\"crs\":{\"type\":\"name\",\"properties\":{\"name\":\"urn:ogc:def:crs:EPSG::3857\"}}}');\n        }\n\n        if (request.requestBody.indexOf('<wfs:DescribeFeatureType') !== -1) {\n          request.respond(200, { 'Content-Type': 'text/plain;charset=utf-8' }, '<?xml version=\"1.0\" encoding=\"UTF-8\"?><xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:gml=\"http://www.opengis.net/gml\" ' + 'xmlns:rgisperm=\"http://rgis.permkrai.ru\" elementFormDefault=\"qualified\" targetNamespace=\"http://rgis.permkrai.ru\">' + '<xsd:import namespace=\"http://www.opengis.net/gml\" schemaLocation=\"http://rgispk.wdepo.ru:80/geoserver/schemas/gml/3.1.1/base/gml.xsd\"/>' + '<xsd:complexType name=\"vydel_utverzhdeno_polygonType\">' + '<xsd:complexContent>' + '<xsd:extension base=\"gml:AbstractFeatureType\">' + '<xsd:sequence>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"1\" name=\"primarykey\" nillable=\"false\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"shape\" nillable=\"true\" type=\"gml:MultiSurfacePropertyType\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"id\" nillable=\"true\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"lesnichestvo\" nillable=\"true\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"uchastkovoelesnichestvo\" nillable=\"true\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"nomerkvartala\" nillable=\"true\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"urochishe\" nillable=\"true\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"nomer\" nillable=\"true\" type=\"xsd:int\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"ploshad\" nillable=\"true\" type=\"xsd:decimal\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"kategoriyazemel\" nillable=\"true\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"preobladayushayaporoda\" nillable=\"true\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"bonitet\" nillable=\"true\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"gruppavozrasta\" nillable=\"true\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"klassvozrasta\" nillable=\"true\" type=\"xsd:int\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"klasstovarnosti\" nillable=\"true\" type=\"xsd:int\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"area\" nillable=\"true\" type=\"xsd:decimal\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"length\" nillable=\"true\" type=\"xsd:decimal\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"createtime\" nillable=\"true\" type=\"xsd:dateTime\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"creator\" nillable=\"true\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"edittime\" nillable=\"true\" type=\"xsd:dateTime\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"editor\" nillable=\"true\" type=\"xsd:string\"/>' + '<xsd:element maxOccurs=\"1\" minOccurs=\"0\" name=\"kl\" nillable=\"true\" type=\"xsd:string\"/>' + '</xsd:sequence>' + '</xsd:extension>' + '</xsd:complexContent>' + '</xsd:complexType>' + '<xsd:element name=\"vydel_utverzhdeno_polygon\" substitutionGroup=\"gml:_Feature\" type=\"rgisperm:vydel_utverzhdeno_polygonType\"/>' + '</xsd:schema>');\n        }\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(app, 'destroy');\n      geoserverFake.restore();\n    }\n  });\n\n  (0, _emberQunit.test)('getLayerFeatures() with options showExisting = false and continueLoading = true', function (assert) {\n    var _this = this;\n\n    assert.expect(2);\n    var done = assert.async(2);\n    _ember['default'].run(function () {\n      var component = _this.subject(param);\n\n      var store = app.__container__.lookup('service:store');\n      var mapModel = store.createRecord('new-platform-flexberry-g-i-s-map');\n      var getmapApiStub = _sinon['default'].stub(component.get('mapApi'), 'getFromApi');\n      getmapApiStub.returns(mapModel);\n\n      var getPkFieldStub = _sinon['default'].stub(mapModel, '_getPkField');\n      getPkFieldStub.returns('primarykey');\n\n      L.wfst(options, component.getFeaturesReadFormat()).once('load', function (res) {\n        var e = {\n          featureIds: ['06350c71-ec5c-431e-a5ab-e423cf662128'],\n          layer: 'f34ea73d-9f00-4f02-b02d-675d459c972b',\n          results: _ember['default'].A()\n        };\n        component._leafletObject = res.target;\n\n        component.getLayerFeatures(e).then(function (layers) {\n          assert.ok(layers, 'Get feature of layers with showExisting = false and continueLoading = true');\n          done();\n        });\n      });\n\n      assert.ok(component, 'Create wfs-layer with showExisting = false');\n      done();\n    });\n  });\n\n  (0, _emberQunit.test)('getLayerFeatures() with options showExisting = true', function (assert) {\n    var _this2 = this;\n\n    assert.expect(2);\n    var done = assert.async(2);\n    _ember['default'].run(function () {\n      param.showExisting = true;\n\n      var component = _this2.subject(param);\n\n      var store = app.__container__.lookup('service:store');\n      var mapModel = store.createRecord('new-platform-flexberry-g-i-s-map');\n      var getmapApiStub = _sinon['default'].stub(component.get('mapApi'), 'getFromApi');\n      getmapApiStub.returns(mapModel);\n\n      var getLayerFeatureIdStub = _sinon['default'].stub(mapModel, '_getLayerFeatureId');\n      getLayerFeatureIdStub.returns('06350c71-ec5c-431e-a5ab-e423cf662128');\n\n      options.showExisting = true;\n      L.wfst(options, component.getFeaturesReadFormat()).once('load', function (res) {\n        var e = {\n          featureIds: ['06350c71-ec5c-431e-a5ab-e423cf662128'],\n          layer: 'f34ea73d-9f00-4f02-b02d-675d459c972b',\n          results: _ember['default'].A()\n        };\n\n        component._leafletObject = res.target;\n\n        component.getLayerFeatures(e).then(function (layers) {\n          assert.ok(layers, 'Get feature of layers with showExisting = true');\n          done();\n        });\n      });\n\n      assert.ok(component, 'Create wfs-layer with showExisting = true');\n      done();\n    });\n  });\n\n  (0, _emberQunit.test)('loadLayerFeatures() with options showExisting = false', function (assert) {\n    var _this3 = this;\n\n    assert.expect(2);\n    var done = assert.async(2);\n    _ember['default'].run(function () {\n      var component = _this3.subject(param);\n\n      var store = app.__container__.lookup('service:store');\n      var mapModel = store.createRecord('new-platform-flexberry-g-i-s-map');\n      var getmapApiStub = _sinon['default'].stub(component.get('mapApi'), 'getFromApi');\n      getmapApiStub.returns(mapModel);\n\n      var getPkFieldStub = _sinon['default'].stub(mapModel, '_getPkField');\n      getPkFieldStub.returns('primarykey');\n\n      L.wfst(options, component.getFeaturesReadFormat()).once('load', function (res) {\n        var e = {\n          featureIds: ['06350c71-ec5c-431e-a5ab-e423cf662128'],\n          layer: 'f34ea73d-9f00-4f02-b02d-675d459c972b',\n          results: _ember['default'].A()\n        };\n        component._leafletObject = res.target;\n\n        component.loadLayerFeatures(e).then(function (layers) {\n          assert.ok(layers, 'Load feature of layers with showExisting = false');\n          done();\n        });\n      });\n\n      assert.ok(component, 'Create wfs-layer with showExisting = false');\n      done();\n    });\n  });\n\n  (0, _emberQunit.test)('loadLayerFeatures() with options showExisting = true', function (assert) {\n    var _this4 = this;\n\n    assert.expect(2);\n    var done = assert.async(2);\n    _ember['default'].run(function () {\n      param.showExisting = true;\n\n      var component = _this4.subject(param);\n\n      var store = app.__container__.lookup('service:store');\n      var mapModel = store.createRecord('new-platform-flexberry-g-i-s-map');\n      var getmapApiStub = _sinon['default'].stub(component.get('mapApi'), 'getFromApi');\n      getmapApiStub.returns(mapModel);\n\n      var getPkFieldStub = _sinon['default'].stub(mapModel, '_getPkField');\n      getPkFieldStub.returns('primarykey');\n\n      options.showExisting = true;\n      L.wfst(options, component.getFeaturesReadFormat()).once('load', function (res) {\n        var e = {\n          featureIds: ['06350c71-ec5c-431e-a5ab-e423cf662128'],\n          layer: 'f34ea73d-9f00-4f02-b02d-675d459c972b',\n          results: _ember['default'].A()\n        };\n\n        component._leafletObject = res.target;\n\n        component.loadLayerFeatures(e).then(function (layers) {\n          assert.ok(layers, 'Load feature of layers with showExisting = true');\n          done();\n        });\n      });\n\n      assert.ok(component, 'Create wfs-layer with showExisting = true');\n      done();\n    });\n  });\n\n  (0, _emberQunit.test)('loadLayerFeatures() with options showExisting = false, call 2 times', function (assert) {\n    var _this5 = this;\n\n    assert.expect(3);\n    var done = assert.async(3);\n    _ember['default'].run(function () {\n      param.continueLoading = false;\n      var component = _this5.subject(param);\n\n      var store = app.__container__.lookup('service:store');\n      var mapModel = store.createRecord('new-platform-flexberry-g-i-s-map');\n      var getmapApiStub = _sinon['default'].stub(component.get('mapApi'), 'getFromApi');\n      getmapApiStub.returns(mapModel);\n\n      var getPkFieldStub = _sinon['default'].stub(mapModel, '_getPkField');\n      getPkFieldStub.returns('primarykey');\n\n      options.continueLoading = false;\n      L.wfst(options, component.getFeaturesReadFormat()).once('load', function (res) {\n        var e = {\n          featureIds: null,\n          layer: 'f34ea73d-9f00-4f02-b02d-675d459c972b',\n          results: _ember['default'].A()\n        };\n        component._leafletObject = res.target;\n\n        component.loadLayerFeatures(e).then(function (layers) {\n          assert.equal(layers.getLayers().length, 1, 'Load feature of layers with showExisting = false, 1 times');\n          done();\n          component.loadLayerFeatures(e).then(function (layers) {\n            assert.equal(layers.getLayers().length, 1, 'Load feature of layers with showExisting = false, 2 times');\n            done();\n          });\n        });\n      });\n\n      assert.ok(component, 'Create wfs-layer with showExisting = false');\n      done();\n    });\n  });\n});","define('dummy/tests/unit/components/layers/wfs-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components/layers');\n  test('unit/components/layers/wfs-layer-test.js should pass jscs', function () {\n    ok(true, 'unit/components/layers/wfs-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/layers/wfs-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/layers/wfs-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/layers/wfs-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/layers/wms-layer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('layers/wms-layer', 'Unit | Component | layers/wms layer', {\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it return L.TileLayer.wms on createLayer', function (assert) {\n    var component = this.subject({\n      requiredOptions: ['']\n    });\n    var layer = component.createLayer();\n    assert.ok(layer instanceof L.TileLayer.WMS, 'Expected L.TileLayer.wms instance');\n  });\n});","define('dummy/tests/unit/components/layers/wms-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components/layers');\n  test('unit/components/layers/wms-layer-test.js should pass jscs', function () {\n    ok(true, 'unit/components/layers/wms-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/layers/wms-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/layers/wms-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/layers/wms-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/minimap-control-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('minimap-control', 'Unit | Component | minimap control', {\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it should return L.Control.MiniMap from createControl', function (assert) {\n    var component = this.subject();\n\n    // Renders the component to the page.\n    var control = component.createControl();\n\n    assert.ok(control instanceof L.Control.MiniMap);\n  });\n\n  (0, _emberQunit.test)('it should return L.LayerGroup from layerGroup', function (assert) {\n    var component = this.subject();\n\n    var lGroup = component.get('layerGroup');\n\n    assert.ok(lGroup instanceof L.LayerGroup);\n  });\n});","define('dummy/tests/unit/components/minimap-control-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components');\n  test('unit/components/minimap-control-test.js should pass jscs', function () {\n    ok(true, 'unit/components/minimap-control-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/minimap-control-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/minimap-control-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/minimap-control-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/scale-control-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('scale-control', 'Unit | Component | scale control', {\n    // Specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar'],\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it should return L.Control.Scale from createControl', function (assert) {\n    var component = this.subject();\n\n    // Renders the component to the page.\n    var control = component.createControl();\n\n    assert.ok(control instanceof L.Control.Scale);\n  });\n});","define('dummy/tests/unit/components/scale-control-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components');\n  test('unit/components/scale-control-test.js should pass jscs', function () {\n    ok(true, 'unit/components/scale-control-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/scale-control-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/scale-control-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/scale-control-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/switch-scale-control-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('switch-scale-control', 'Unit | Component | switch scale control', {\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it should return L.Control.SwitchScaleControl from createControl', function (assert) {\n    var component = this.subject();\n\n    // Renders the component to the page.\n    var control = component.createControl();\n\n    assert.ok(control instanceof L.Control.SwitchScaleControl);\n  });\n});","define('dummy/tests/unit/components/switch-scale-control-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components');\n  test('unit/components/switch-scale-control-test.js should pass jscs', function () {\n    ok(true, 'unit/components/switch-scale-control-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/switch-scale-control-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/switch-scale-control-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/switch-scale-control-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/components/zoomslider-control-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('zoomslider-control', 'Unit | Component | zoomslider control', {\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it should return L.Control.Zoomslider from createControl', function (assert) {\n    var component = this.subject();\n\n    // Renders the component to the page.\n    var control = component.createControl();\n\n    assert.ok(control instanceof L.Control.Zoomslider);\n  });\n});","define('dummy/tests/unit/components/zoomslider-control-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/components');\n  test('unit/components/zoomslider-control-test.js should pass jscs', function () {\n    ok(true, 'unit/components/zoomslider-control-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/components/zoomslider-control-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/components/zoomslider-control-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/zoomslider-control-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/edit-map-test', ['exports', 'ember-flexberry-gis/controllers/edit-map', 'qunit'], function (exports, _emberFlexberryGisControllersEditMap, _qunit) {\n\n  (0, _qunit.module)('Unit | Controller | edit-map');\n\n  (0, _qunit.test)('it exists', function (assert) {\n    var route = _emberFlexberryGisControllersEditMap['default'].create({});\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/controllers/edit-map-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/edit-map-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/edit-map-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/edit-map-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/edit-map-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edit-map-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/gis-search-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:gis-search-form', 'Unit | Controller | gis search form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/gis-search-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/gis-search-form-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/gis-search-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/gis-search-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/gis-search-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/gis-search-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/list-map-test', ['exports', 'ember-flexberry-gis/controllers/list-map', 'qunit'], function (exports, _emberFlexberryGisControllersListMap, _qunit) {\n\n  (0, _qunit.module)('Unit | Controller | list-map');\n\n  (0, _qunit.test)('it exists', function (assert) {\n    var route = _emberFlexberryGisControllersListMap['default'].create({});\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/controllers/list-map-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/list-map-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/list-map-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/list-map-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/list-map-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/list-map-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/helpers/flexberry-search-properties-osm-ru-test', ['exports', 'dummy/helpers/flexberry-search-properties-osm-ru', 'qunit'], function (exports, _dummyHelpersFlexberrySearchPropertiesOsmRu, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | flexberry search properties osm ru');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _dummyHelpersFlexberrySearchPropertiesOsmRu.flexberrySearchPropertiesOsmRu)([42]);\n    assert.ok(result);\n  });\n});","define('dummy/tests/unit/helpers/flexberry-search-properties-osm-ru-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/helpers');\n  test('unit/helpers/flexberry-search-properties-osm-ru-test.js should pass jscs', function () {\n    ok(true, 'unit/helpers/flexberry-search-properties-osm-ru-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/helpers/flexberry-search-properties-osm-ru-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers/flexberry-search-properties-osm-ru-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/flexberry-search-properties-osm-ru-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/helpers/instance-of-test', ['exports', 'dummy/helpers/instance-of', 'qunit'], function (exports, _dummyHelpersInstanceOf, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | instance of');\n\n  (0, _qunit.test)('it works', function (assert) {\n    assert.expect(2);\n    var obj = L.layerGroup();\n    var constructor = L.LayerGroup;\n    var result = (0, _dummyHelpersInstanceOf.instanceOf)([obj, constructor]);\n    assert.ok(result);\n\n    constructor = L.Control.MiniMap;\n    result = (0, _dummyHelpersInstanceOf.instanceOf)([obj, constructor]);\n    assert.notOk(result);\n  });\n});","define('dummy/tests/unit/helpers/instance-of-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/helpers');\n  test('unit/helpers/instance-of-test.js should pass jscs', function () {\n    ok(true, 'unit/helpers/instance-of-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/helpers/instance-of-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers/instance-of-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/instance-of-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/initializers/flexberry-map-commands-test', ['exports', 'ember', 'dummy/initializers/map-commands', 'qunit'], function (exports, _ember, _dummyInitializersMapCommands, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | map-commands', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _dummyInitializersMapCommands['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/initializers/flexberry-map-commands-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/initializers');\n  test('unit/initializers/flexberry-map-commands-test.js should pass jscs', function () {\n    ok(true, 'unit/initializers/flexberry-map-commands-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/initializers/flexberry-map-commands-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/initializers/flexberry-map-commands-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/flexberry-map-commands-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/initializers/flexberry-map-tools-test', ['exports', 'ember', 'dummy/initializers/map-tools', 'qunit'], function (exports, _ember, _dummyInitializersMapTools, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | map-tools', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _dummyInitializersMapTools['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/initializers/flexberry-map-tools-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/initializers');\n  test('unit/initializers/flexberry-map-tools-test.js should pass jscs', function () {\n    ok(true, 'unit/initializers/flexberry-map-tools-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/initializers/flexberry-map-tools-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/initializers/flexberry-map-tools-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/flexberry-map-tools-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/initializers/local-storage-test', ['exports', 'ember', 'ember-flexberry-gis/initializers/local-storage', 'qunit'], function (exports, _ember, _emberFlexberryGisInitializersLocalStorage, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | local storage', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _emberFlexberryGisInitializersLocalStorage['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/initializers/local-storage-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/initializers');\n  test('unit/initializers/local-storage-test.js should pass jscs', function () {\n    ok(true, 'unit/initializers/local-storage-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/initializers/local-storage-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/initializers/local-storage-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/local-storage-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/instance-initializers/open-map-test', ['exports', 'ember', 'dummy/instance-initializers/open-map', 'qunit', 'dummy/tests/helpers/destroy-app', 'ember-flexberry-gis/services/map-api', 'ember-flexberry-gis/services/map-store', 'sinon'], function (exports, _ember, _dummyInstanceInitializersOpenMap, _qunit, _dummyTestsHelpersDestroyApp, _emberFlexberryGisServicesMapApi, _emberFlexberryGisServicesMapStore, _sinon) {\n\n  (0, _qunit.module)('Unit | Instance Initializer | open map', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.application.register('service:map-api', _emberFlexberryGisServicesMapApi['default']);\n        var objStore = _ember['default'].Service.extend({\n          createRecord: function createRecord() {\n            return {\n              get: function get() {\n                return { pushObject: function pushObject() {} };\n              }\n            };\n          }\n        });\n        _this.application.register('service:store', objStore);\n        _this.application.register('service:map-store', _emberFlexberryGisServicesMapStore['default']);\n        _this.appInstance = _this.application.buildInstance();\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(this.appInstance, 'destroy');\n      (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  (0, _qunit.test)('map api added function Open Map', function (assert) {\n    //Arrange\n    var configStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    configStub.returns({\n      _lookupFactory: function _lookupFactory() {\n        return {\n          'APP': {\n            'mapApiService': true\n          }\n        };\n      }\n    });\n\n    //Action\n    (0, _dummyInstanceInitializersOpenMap.initialize)(this.appInstance);\n    var openMap = this.appInstance.lookup('service:map-api').getFromApi('openMap');\n\n    //Assert\n    assert.ok(typeof openMap === 'function');\n    assert.ok(true);\n    configStub.restore();\n  });\n\n  (0, _qunit.test)('Test for function Open Map', function (assert) {\n    //Arrange\n    var done = assert.async(1);\n    var configStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    configStub.returns({\n      _lookupFactory: function _lookupFactory() {\n        return {\n          'APP': {\n            'mapApiService': true\n          }\n        };\n      }\n    });\n    (0, _dummyInstanceInitializersOpenMap.initialize)(this.appInstance);\n    var openMap = this.appInstance.lookup('service:map-api').getFromApi('openMap');\n    var mapStoreStub = _sinon['default'].stub(this.appInstance.lookup('service:map-store'), 'getMapById');\n    var routerStub = _sinon['default'].stub(this.appInstance.lookup('router:main'), 'transitionTo');\n    mapStoreStub.returns(_ember['default'].RSVP.resolve({}));\n    routerStub.returns(true);\n\n    //Action\n    var res = openMap('d3434', { test: true });\n\n    //Assert\n    assert.ok(res instanceof _ember['default'].RSVP.Promise);\n    res.then(function () {\n      assert.equal(mapStoreStub.callCount, 1);\n      assert.equal(routerStub.callCount, 1);\n      assert.equal(mapStoreStub.args[0][0], 'd3434');\n      assert.deepEqual(routerStub.args[0][2], { queryParams: { test: true } });\n      done();\n      mapStoreStub.restore();\n      routerStub.restore();\n    });\n    configStub.restore();\n  });\n});","define('dummy/tests/unit/instance-initializers/open-map-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/instance-initializers');\n  test('unit/instance-initializers/open-map-test.js should pass jscs', function () {\n    ok(true, 'unit/instance-initializers/open-map-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/instance-initializers/open-map-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/instance-initializers/open-map-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/open-map-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/dynamic-properties-test', ['exports', 'ember', 'ember-flexberry-gis/mixins/dynamic-properties', 'qunit'], function (exports, _ember, _emberFlexberryGisMixinsDynamicProperties, _qunit) {\n\n  var ClassWithDynamicPropertiesMixin = _ember['default'].Object.extend(_emberFlexberryGisMixinsDynamicProperties['default'], {});\n\n  (0, _qunit.module)('Unit | Mixin | dynamic-properties mixin');\n\n  (0, _qunit.test)('Mixin throws assertion failed exception if specified \\'dynamicProperties\\' property is not an \\'object\\' or an \\'instance\\'', function (assert) {\n    var wrongDynamicPropertiesArray = _ember['default'].A([1, true, false, 'some string', [], function () {}, new Date(), new RegExp()]);\n\n    assert.expect(wrongDynamicPropertiesArray.length);\n\n    wrongDynamicPropertiesArray.forEach(function (wrongDynamicProperties) {\n      try {\n        ClassWithDynamicPropertiesMixin.create({ dynamicProperties: wrongDynamicProperties });\n      } catch (ex) {\n        assert.strictEqual(/wrong\\s*type\\s*of\\s*.*dynamicProperties.*/gi.test(ex.message), true, 'Throws assertion failed exception if specified \\'dynamicProperties\\' property is \\'' + _ember['default'].typeOf(wrongDynamicProperties) + '\\'');\n      }\n    });\n  });\n\n  (0, _qunit.test)('Mixin assignes it\\'s owner\\'s properties form the specified \\'dynamicProperties\\'', function (assert) {\n    assert.expect(1);\n\n    var propertyValue = 'MyValue';\n    var dynamicProperties = { property: propertyValue };\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({ dynamicProperties: dynamicProperties });\n\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s properties are equals to related \\'dynamicProperties\\'');\n  });\n\n  (0, _qunit.test)('Mixin changes it\\'s owner\\'s properties (when something changes inside related \\'dynamicProperties\\')', function (assert) {\n    assert.expect(2);\n\n    var propertyValue = 'MyValue';\n    var dynamicProperties = { property: propertyValue };\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({ dynamicProperties: dynamicProperties });\n\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s properties are equals to related \\'dynamicProperties\\'');\n\n    var propertyChangedValue = 'MyChangedValue';\n    _ember['default'].set(dynamicProperties, 'property', propertyChangedValue);\n\n    assert.strictEqual(mixinOwner.get('property'), propertyChangedValue, 'Owner\\'s properties changes when values inside \\'dynamicProperties\\' changes');\n  });\n\n  (0, _qunit.test)('Mixin removes old & adds new owner\\'s properties (when reference to whole \\'dynamicProperties\\' object changes)', function (assert) {\n    assert.expect(22);\n\n    var propertyValue = 'MyProperty';\n    var anotherPropertyValue = 'MyAnotherProperty';\n    var dynamicProperties = { property: propertyValue, anotherProperty: anotherPropertyValue };\n\n    var usualPropertyValue = 'MyUsualProperty';\n\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({\n      usualProperty: usualPropertyValue,\n      dynamicProperties: dynamicProperties\n    });\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value');\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s \\'property\\' is equals to related dynamicProperty');\n    assert.strictEqual(mixinOwner.get('anotherProperty'), anotherPropertyValue, 'Owner\\'s \\'anotherProperty\\' is equals to related dynamicProperty');\n\n    var ownerPropertiesNames = _ember['default'].A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.contains('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('property'), true, 'Owner\\'s properties keys contains \\'property\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('anotherProperty'), true, 'Owner\\'s properties keys contains \\'anotherProperty\\'');\n\n    var newPropertyValue = 'MyNewProperty';\n    var newAnotherPropertyValue = 'MyNewAnotherProperty';\n    var newDynamicProperties = { newProperty: newPropertyValue, newAnotherProperty: newAnotherPropertyValue };\n    mixinOwner.set('dynamicProperties', newDynamicProperties);\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('property')), 'undefined', 'Owner\\'s \\'property\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('anotherProperty')), 'undefined', 'Owner\\'s \\'anotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(mixinOwner.get('newProperty'), newPropertyValue, 'Owner\\'s \\'newProperty\\' is equals to related dynamicProperty (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(mixinOwner.get('newAnotherProperty'), newAnotherPropertyValue, 'Owner\\'s \\'newAnotherProperty\\' is equals to related dynamicProperty (after change of whole \\'dynamicProperties\\' object)');\n\n    ownerPropertiesNames = _ember['default'].A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.contains('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.contains('property'), false, 'Owner\\'s properties keys doesn\\'t contains \\'property\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.contains('anotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'anotherProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.contains('newProperty'), true, 'Owner\\'s properties keys contains \\'newProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(ownerPropertiesNames.contains('newAnotherProperty'), true, 'Owner\\'s properties keys contains \\'newAnotherProperty\\' (after change of whole \\'dynamicProperties\\' object)');\n\n    mixinOwner.set('dynamicProperties', null);\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('newProperty')), 'undefined', 'Owner\\'s \\'newProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('newAnotherProperty')), 'undefined', 'Owner\\'s \\'newAnotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object to null)');\n\n    ownerPropertiesNames = _ember['default'].A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.contains('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(ownerPropertiesNames.contains('newProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'newProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n    assert.strictEqual(ownerPropertiesNames.contains('newAnotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'newAnotherProperty\\' (after change of whole \\'dynamicProperties\\' object to null)');\n  });\n\n  (0, _qunit.test)('Mixin removes assigned \\'dynamicProperties\\' before owner will be destroyed', function (assert) {\n    assert.expect(12);\n\n    var propertyValue = 'MyProperty';\n    var anotherPropertyValue = 'MyAnotherProperty';\n    var dynamicProperties = { property: propertyValue, anotherProperty: anotherPropertyValue };\n\n    var usualPropertyValue = 'MyUsualProperty';\n\n    var mixinOwner = ClassWithDynamicPropertiesMixin.create({\n      usualProperty: usualPropertyValue,\n      dynamicProperties: dynamicProperties\n    });\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value');\n    assert.strictEqual(mixinOwner.get('property'), propertyValue, 'Owner\\'s \\'property\\' is equals to related dynamicProperty');\n    assert.strictEqual(mixinOwner.get('anotherProperty'), anotherPropertyValue, 'Owner\\'s \\'anotherProperty\\' is equals to related dynamicProperty');\n\n    var ownerPropertiesNames = _ember['default'].A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.contains('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('property'), true, 'Owner\\'s properties keys contains \\'property\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('anotherProperty'), true, 'Owner\\'s properties keys contains \\'anotherProperty\\'');\n\n    mixinOwner.willDestroy();\n\n    assert.strictEqual(mixinOwner.get('usualProperty'), usualPropertyValue, 'Owner\\'s \\'usualProperty\\' is equals to it\\'s initially defined value (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('property')), 'undefined', 'Owner\\'s \\'property\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n    assert.strictEqual(_ember['default'].typeOf(mixinOwner.get('anotherProperty')), 'undefined', 'Owner\\'s \\'anotherProperty\\' is undefined (after change of whole \\'dynamicProperties\\' object)');\n\n    ownerPropertiesNames = _ember['default'].A(Object.keys(mixinOwner));\n    assert.strictEqual(ownerPropertiesNames.contains('usualProperty'), true, 'Owner\\'s properties keys contains \\'usualProperty\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('property'), false, 'Owner\\'s properties keys doesn\\'t contains \\'property\\'');\n    assert.strictEqual(ownerPropertiesNames.contains('anotherProperty'), false, 'Owner\\'s properties keys doesn\\'t contains \\'anotherProperty\\'');\n  });\n});","define('dummy/tests/unit/mixins/dynamic-properties-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/dynamic-properties-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/dynamic-properties-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/dynamic-properties-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/dynamic-properties-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/dynamic-properties-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-convert-object-coord-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'sinon', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326', 'ember-flexberry-gis/coordinate-reference-systems/epsg-3395'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi, _sinon, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326, _emberFlexberryGisCoordinateReferenceSystemsEpsg3395) {\n\n  (0, _qunit.module)('Unit | Mixin | test method _convertObjectCoordinates');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n  var geoJsonObject = L.polygon([[0, 100], [0, 101], [1, 101], [1, 100]]).toGeoJSON();\n\n  (0, _qunit.test)('test method _convertObjectCoordinates with EPSG:4326', function (assert) {\n    //Arrange\n    assert.expect(1);\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'],\n          'epsg3395': _emberFlexberryGisCoordinateReferenceSystemsEpsg3395['default']\n        };\n      }\n    });\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var result = subject._convertObjectCoordinates('EPSG:4326', geoJsonObject);\n\n    //Assert\n    assert.deepEqual(result.geometry.coordinates, [[[100, 0], [101, 0], [101, 1], [100, 1], [100, 0]]], 'Equals rezult coordinates with test coordinates');\n    ownerStub.restore();\n  });\n\n  (0, _qunit.test)('test method _convertObjectCoordinates with EPSG:3395', function (assert) {\n    //Arrange\n    assert.expect(1);\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'],\n          'epsg3395': _emberFlexberryGisCoordinateReferenceSystemsEpsg3395['default']\n        };\n      }\n    });\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var result = subject._convertObjectCoordinates('EPSG:4326', geoJsonObject, 'EPSG:3395');\n\n    //Assert\n    assert.deepEqual(result.geometry.coordinates, [[[11131949.079327356, 7.081154551613622e-10], [11243268.57012063, 7.081154551613622e-10], [11243268.57012063, 110579.9652218976], [11131949.079327356, 110579.9652218976], [11131949.079327356, 7.081154551613622e-10]]], 'Equals rezult coordinates with test coordinates');\n    ownerStub.restore();\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-convert-object-coord-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-convert-object-coord-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-convert-object-coord-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-convert-object-coord-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-convert-object-coord-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-convert-object-coord-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-copy-object-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'sinon'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi, _sinon) {\n\n  (0, _qunit.module)('Unit | Mixin | method copyObject');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  (0, _qunit.test)('test method copyObject', function (assert) {\n    //Arrange\n    assert.expect(8);\n    var done = assert.async(1);\n    var sourceLeafletLayer = L.featureGroup();\n    var destinationLeafletLayer = L.featureGroup();\n    var polygon = L.polygon([[1, 1], [5, 1], [2, 2], [3, 5]]);\n    polygon.feature = {\n      properties: {}\n    };\n    var destinationLayerModel = _ember['default'].A({\n      settingsAsObject: {\n        typeGeometry: 'polygon'\n      }\n    });\n    var getModelLayerFeature = function getModelLayerFeature() {\n      return _ember['default'].RSVP.resolve([{}, sourceLeafletLayer, [polygon]]);\n    };\n\n    var getModelLeafletObject = function getModelLeafletObject() {\n      return [destinationLayerModel, destinationLeafletLayer];\n    };\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature() {},\n      _getModelLeafletObject: function _getModelLeafletObject() {}\n    });\n    var getMLFeature = _sinon['default'].stub(subject, '_getModelLayerFeature', getModelLayerFeature);\n    var getMLObject = _sinon['default'].stub(subject, '_getModelLeafletObject', getModelLeafletObject);\n\n    //Act\n    var result = subject.copyObject({\n      layerId: '1',\n      objectId: '1',\n      shouldRemove: true\n    }, {\n      layerId: '2',\n      properties: {}\n    });\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Check result instance of Promise');\n    result.then(function (data) {\n      assert.deepEqual(data.getLatLngs(), [[L.latLng(1, 1), L.latLng(5, 1), L.latLng(2, 2), L.latLng(3, 5)]], 'Check latLngs');\n      assert.equal(getMLFeature.callCount, 1, 'Check call count to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][0], '1', 'Check call first arg to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][1], '1', 'Check call second arg to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][2], true, 'Check call third arg to method _getModelLayerFeature');\n      assert.equal(getMLObject.callCount, 1, 'Check call count to method _getModelLeafletObject');\n      assert.equal(getMLObject.args[0][0], '2', 'Check call first arg to method _getModelLeafletObject');\n      done();\n      getMLFeature.restore();\n      getMLObject.restore();\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-copy-object-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-copy-object-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-copy-object-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-copy-object-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-copy-object-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-copy-object-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-cosmos-test', ['exports', 'ember', 'ember-flexberry-gis/mixins/flexberry-map-model-api-cosmos', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326', 'dummy/tests/helpers/start-app', 'ember-flexberry-data', 'qunit', 'sinon'], function (exports, _ember, _emberFlexberryGisMixinsFlexberryMapModelApiCosmos, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326, _dummyTestsHelpersStartApp, _emberFlexberryData, _qunit, _sinon) {\n\n  var app = undefined;\n  var store = undefined;\n\n  (0, _qunit.module)('Unit | Mixin | flexberry map model api cosmos', {\n    unit: true,\n    needs: ['config:environment', 'model:new-platform-flexberry-g-i-s-layer-metadata'],\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        app = (0, _dummyTestsHelpersStartApp['default'])();\n        app.deferReadiness();\n        store = app.__container__.lookup('service:store');\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(app, 'destroy');\n    }\n  });\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApiCosmos['default']);\n  var metadataProjection = 'LayerMetadataE';\n  var metadataModelName = 'new-platform-flexberry-g-i-s-layer-metadata';\n  var crsFactory32640 = {\n    code: 'EPSG:32640',\n    definition: '+proj=utm +zone=40 +datum=WGS84 +units=m +no_defs',\n    create: function create() {\n      var crs = L.extend({}, new L.Proj.CRS(this.code, this.definition), {\n        scale: function scale(zoom) {\n          return 256 * Math.pow(2, zoom);\n        },\n        zoom: function zoom(scale) {\n          return Math.log(scale / 256) / Math.LN2;\n        }\n      });\n      return crs;\n    }\n  };\n  var bbox = {\n    type: 'Polygon',\n    coordinates: [[[30, 20], [30, 30], [20, 30], [20, 20], [30, 20]]],\n    crs: {\n      type: 'name',\n      properties: {\n        name: 'EPSG:4326'\n      }\n    }\n  };\n  var testModel = _ember['default'].Object.create({\n    anyText: 'test',\n    boundingBox: bbox,\n    id: '123',\n    type: 'wms',\n    settings: '{}'\n  });\n\n  (0, _qunit.test)('test method findCosmos for only with parameter feature', function (assert) {\n    //Arrange\n    assert.expect(7);\n    var done = assert.async(1);\n    var feature = {\n      type: 'Feature',\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[30, 10], [40, 40], [20, 40], [10, 20], [30, 10]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:4326'\n        }\n      }\n    };\n\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default']\n        };\n      },\n      lookup: function lookup() {\n        return null;\n      }\n    });\n\n    var subject = mapApiMixinObject.create({\n      _getQueryBuilderLayerMetadata: function _getQueryBuilderLayerMetadata() {\n        return new _emberFlexberryData.Query.Builder(store, metadataModelName).from(metadataModelName).selectByProjection(metadataProjection);\n      },\n      _getMetadataModels: function _getMetadataModels() {\n        return _ember['default'].RSVP.resolve([testModel]);\n      }\n    });\n    var spyGetMetadataModels = _sinon['default'].spy(subject, '_getMetadataModels');\n    var spyGetQueryBuilderLayerMetadata = _sinon['default'].spy(subject, '_getQueryBuilderLayerMetadata');\n\n    //Act\n    subject.findLayerMetadata(feature, null).then(function (layers) {\n      //Assert\n      assert.ok(spyGetQueryBuilderLayerMetadata.called);\n      assert.ok(spyGetMetadataModels.called);\n      assert.ok(spyGetMetadataModels.getCall(0).args[0]._predicate instanceof _emberFlexberryData.Query.GeographyPredicate);\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._attributePath, 'boundingBox');\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._intersectsValue, 'SRID=4326;POLYGON((30 10, 40 40, 20 40, 10 20, 30 10))');\n      assert.equal(layers.length, 1);\n      assert.equal(layers[0].areaIntersections, 100);\n      done();\n      ownerStub.restore();\n      spyGetMetadataModels.restore();\n      spyGetQueryBuilderLayerMetadata.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method findCosmos for only with parameter attributes one', function (assert) {\n    //Arrange\n    assert.expect(7);\n    var done = assert.async(1);\n    var attributes = ['test'];\n\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default']\n        };\n      },\n      lookup: function lookup() {\n        return null;\n      }\n    });\n\n    var subject = mapApiMixinObject.create({\n      _getQueryBuilderLayerMetadata: function _getQueryBuilderLayerMetadata() {\n        return new _emberFlexberryData.Query.Builder(store, metadataModelName).from(metadataModelName).selectByProjection(metadataProjection);\n      },\n      _getMetadataModels: function _getMetadataModels() {\n        return _ember['default'].RSVP.resolve([testModel]);\n      }\n    });\n    var spyGetMetadataModels = _sinon['default'].spy(subject, '_getMetadataModels');\n    var spyGetQueryBuilderLayerMetadata = _sinon['default'].spy(subject, '_getQueryBuilderLayerMetadata');\n\n    //Act\n    subject.findLayerMetadata(null, attributes).then(function (layers) {\n      //Assert\n      assert.ok(spyGetQueryBuilderLayerMetadata.called);\n      assert.ok(spyGetMetadataModels.called);\n      assert.ok(spyGetMetadataModels.getCall(0).args[0]._predicate instanceof _emberFlexberryData.Query.StringPredicate);\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._attributePath, 'anyText');\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._containsValue, 'test');\n      assert.equal(layers.length, 1);\n      assert.ok(!layers[0].hasOwnProperty('areaIntersections'));\n      done();\n      ownerStub.restore();\n      spyGetMetadataModels.restore();\n      spyGetQueryBuilderLayerMetadata.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method findCosmos for only with parameter attributes two', function (assert) {\n    //Arrange\n    assert.expect(12);\n    var done = assert.async(1);\n    var attributes = ['test1', 'test2'];\n\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default']\n        };\n      },\n      lookup: function lookup() {\n        return null;\n      }\n    });\n\n    var subject = mapApiMixinObject.create({\n      _getQueryBuilderLayerMetadata: function _getQueryBuilderLayerMetadata() {\n        return new _emberFlexberryData.Query.Builder(store, metadataModelName).from(metadataModelName).selectByProjection(metadataProjection);\n      },\n      _getMetadataModels: function _getMetadataModels() {\n        return _ember['default'].RSVP.resolve([testModel]);\n      }\n    });\n    var spyGetMetadataModels = _sinon['default'].spy(subject, '_getMetadataModels');\n    var spyGetQueryBuilderLayerMetadata = _sinon['default'].spy(subject, '_getQueryBuilderLayerMetadata');\n\n    //Act\n    subject.findLayerMetadata(null, attributes).then(function (layers) {\n      //Assert\n      assert.ok(spyGetQueryBuilderLayerMetadata.called);\n      assert.ok(spyGetMetadataModels.called);\n      assert.ok(spyGetMetadataModels.getCall(0).args[0]._predicate instanceof _emberFlexberryData.Query.ComplexPredicate);\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._condition, 'or');\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates.length, 2);\n      assert.ok(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[0] instanceof _emberFlexberryData.Query.StringPredicate);\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[0]._attributePath, 'anyText');\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[0]._containsValue, 'test1');\n      assert.ok(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[1] instanceof _emberFlexberryData.Query.StringPredicate);\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[1]._attributePath, 'anyText');\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[1]._containsValue, 'test2');\n      assert.equal(layers.length, 1);\n      done();\n      ownerStub.restore();\n      spyGetMetadataModels.restore();\n      spyGetQueryBuilderLayerMetadata.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method findCosmos for with feature and attributes', function (assert) {\n    //Arrange\n    assert.expect(13);\n    var done = assert.async(1);\n    var feature = {\n      type: 'Feature',\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[-2568154.38200208, 1238447.0003685], [-954618.679368619, 4568735.95227168], [-2683586.25264709, 5143088.31265003], [-4878104.10393015, 3114937.3173714], [-2568154.38200208, 1238447.0003685]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:32640'\n        }\n      }\n    };\n    var attributes = ['test'];\n\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg32640': crsFactory32640\n        };\n      },\n      lookup: function lookup() {\n        return null;\n      }\n    });\n\n    var subject = mapApiMixinObject.create({\n      _getQueryBuilderLayerMetadata: function _getQueryBuilderLayerMetadata() {\n        return new _emberFlexberryData.Query.Builder(store, metadataModelName).from(metadataModelName).selectByProjection(metadataProjection);\n      },\n      _getMetadataModels: function _getMetadataModels() {\n        return _ember['default'].RSVP.resolve([testModel]);\n      }\n    });\n    var spyGetMetadataModels = _sinon['default'].spy(subject, '_getMetadataModels');\n    var spyGetQueryBuilderLayerMetadata = _sinon['default'].spy(subject, '_getQueryBuilderLayerMetadata');\n\n    //Act\n    subject.findLayerMetadata(feature, attributes).then(function (layers) {\n      //Assert\n      assert.ok(spyGetQueryBuilderLayerMetadata.called);\n      assert.ok(spyGetMetadataModels.called);\n      assert.ok(spyGetMetadataModels.getCall(0).args[0]._predicate instanceof _emberFlexberryData.Query.ComplexPredicate);\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._condition, 'and');\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates.length, 2);\n      assert.ok(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[0] instanceof _emberFlexberryData.Query.GeographyPredicate);\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[0]._attributePath, 'boundingBox');\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[0]._intersectsValue, 'SRID=4326;POLYGON((29.999999999999964 9.999999999999961, 40 39.999999999999964, 19.999999999999964 39.99999999999997, ' + '10.000000000000059 19.999999999999943, 29.999999999999964 9.999999999999961))');\n      assert.ok(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[1] instanceof _emberFlexberryData.Query.StringPredicate);\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[1]._attributePath, 'anyText');\n      assert.equal(spyGetMetadataModels.getCall(0).args[0]._predicate._predicates[1]._containsValue, 'test');\n      assert.equal(layers.length, 1);\n      assert.equal(layers[0].areaIntersections, 1452646131646.9414);\n      done();\n      ownerStub.restore();\n      spyGetMetadataModels.restore();\n      spyGetQueryBuilderLayerMetadata.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method addLayerFromLayerMetadata', function (assert) {\n    //Arrange\n    assert.expect(7);\n    var done = assert.async(1);\n    var hierarchy = _ember['default'].A();\n    var subject = mapApiMixinObject.create({\n      _getQueryBuilderLayerMetadata: function _getQueryBuilderLayerMetadata() {\n        return new _emberFlexberryData.Query.Builder(store, metadataModelName).from(metadataModelName).selectByProjection(metadataProjection);\n      },\n      _getMetadataModels: function _getMetadataModels() {\n        return _ember['default'].RSVP.resolve({ content: [testModel] });\n      },\n      store: store,\n      hierarchy: hierarchy\n    });\n    var spyGetMetadataModels = _sinon['default'].spy(subject, '_getMetadataModels');\n    var spyGetQueryBuilderLayerMetadata = _sinon['default'].spy(subject, '_getQueryBuilderLayerMetadata');\n\n    //Act\n    subject.addLayerFromLayerMetadata('123', 10).then(function (layer) {\n      //Assert\n      assert.ok(spyGetQueryBuilderLayerMetadata.called);\n      assert.ok(spyGetMetadataModels.called);\n      assert.ok(spyGetMetadataModels.getCall(0).args[0]._id, '123');\n      assert.ok(layer);\n      assert.equal(layer.get('index'), '10');\n      assert.equal(hierarchy.length, 1);\n      assert.equal(layer.get('type'), 'wms');\n      done();\n      spyGetMetadataModels.restore();\n      spyGetQueryBuilderLayerMetadata.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method addLayerFromLayerMetadata not found layer', function (assert) {\n    //Arrange\n    assert.expect(4);\n    var done = assert.async(1);\n    var hierarchy = _ember['default'].A();\n    var subject = mapApiMixinObject.create({\n      _getQueryBuilderLayerMetadata: function _getQueryBuilderLayerMetadata() {\n        return new _emberFlexberryData.Query.Builder(store, metadataModelName).from(metadataModelName).selectByProjection(metadataProjection);\n      },\n      _getMetadataModels: function _getMetadataModels() {\n        return _ember['default'].RSVP.resolve({ content: [] });\n      },\n      store: store,\n      hierarchy: hierarchy\n    });\n    var spyGetMetadataModels = _sinon['default'].spy(subject, '_getMetadataModels');\n    var spyGetQueryBuilderLayerMetadata = _sinon['default'].spy(subject, '_getQueryBuilderLayerMetadata');\n\n    //Act\n    subject.addLayerFromLayerMetadata('123', 10)['catch'](function (error) {\n      //Assert\n      assert.ok(spyGetQueryBuilderLayerMetadata.called);\n      assert.ok(spyGetMetadataModels.called);\n      assert.ok(spyGetMetadataModels.getCall(0).args[0]._id, '123');\n      assert.equal(error, 'LayerMetadata 123 not found.');\n      done();\n      spyGetMetadataModels.restore();\n      spyGetQueryBuilderLayerMetadata.restore();\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-cosmos-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-cosmos-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-cosmos-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-cosmos-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-cosmos-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-cosmos-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-create-polygon-object-rhumb-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api-expansion', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApiExpansion, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326) {\n\n  (0, _qunit.module)('Unit | Mixin | test method createPolygonObjectRhumb');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApiExpansion['default']);\n  var crs4326 = _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'].create();\n\n  var crsFactory32640 = {\n    code: 'EPSG:32640',\n    definition: '+proj=utm +zone=40 +datum=WGS84 +units=m +no_defs',\n    create: function create() {\n      var crs = L.extend({}, new L.Proj.CRS(this.code, this.definition), {\n        scale: function scale(zoom) {\n          return 256 * Math.pow(2, zoom);\n        },\n        zoom: function zoom(scale) {\n          return Math.log(scale / 256) / Math.LN2;\n        }\n      });\n      return crs;\n    }\n  };\n\n  var crs32640 = crsFactory32640.create();\n\n  (0, _qunit.test)('test method createPolygonObjectRhumb for LineString', function (assert) {\n    //Arrange\n    var testLiseString = {\n      type: 'LineString',\n      startPoint: [3, 7],\n      crs: 'EPSG:4326',\n      skip: 0,\n      points: [{\n        rhumb: 'SE',\n        angle: 0,\n        distance: 10\n      }, {\n        rhumb: 'NE',\n        angle: 90,\n        distance: 10\n      }]\n    };\n\n    var resObj = {\n      type: 'Feature',\n      properties: undefined,\n      geometry: {\n        type: 'LineString',\n        coordinates: [[3, 7], [3.0000000000000013, -3], [13.000000000000002, -2.9999999999999996]]\n      },\n      crs: {\n        properties: {\n          name: 'EPSG:4326'\n        },\n        type: 'name'\n      }\n    };\n    var subject = mapApiMixinObject.create({\n      _getModelLeafletObject: function _getModelLeafletObject() {\n        return [null, { options: { crs: crs4326 } }];\n      }\n    });\n\n    //Act\n    var feature = subject.createPolygonObjectRhumb('1', testLiseString);\n\n    //Assert\n    assert.deepEqual(feature, resObj);\n  });\n\n  (0, _qunit.test)('test method createPolygonObjectRhumb for Polygon', function (assert) {\n    //Arrange\n    var testLiseString = {\n      type: 'Polygon',\n      startPoint: [30, 70],\n      crs: 'EPSG:32640',\n      skip: 0,\n      hole: false,\n      points: [{\n        rhumb: 'SE',\n        angle: 0,\n        distance: 10\n      }, {\n        rhumb: 'NE',\n        angle: 90,\n        distance: 10\n      }, {\n        rhumb: 'NW',\n        angle: 0,\n        distance: 10\n      }, {\n        rhumb: 'NW',\n        angle: 90,\n        distance: 10\n      }]\n    };\n\n    var resObj = {\n      type: 'Feature',\n      properties: undefined,\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[30, 70], [30, 60], [40, 60], [40, 70], [30, 70]]]\n      },\n      crs: {\n        properties: {\n          name: 'EPSG:32640'\n        },\n        type: 'name'\n      }\n    };\n    var subject = mapApiMixinObject.create({\n      _getModelLeafletObject: function _getModelLeafletObject() {\n        return [null, { options: { crs: crs32640 } }];\n      }\n    });\n\n    //Act\n    var feature = subject.createPolygonObjectRhumb('1', testLiseString);\n\n    //Assert\n    assert.deepEqual(feature, resObj);\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-create-polygon-object-rhumb-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-create-polygon-object-rhumb-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-create-polygon-object-rhumb-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-create-polygon-object-rhumb-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-create-polygon-object-rhumb-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-create-polygon-object-rhumb-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-delete-layer-objects-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'sinon'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi, _sinon) {\n\n  (0, _qunit.module)('Unit | Mixin | method deleteLayerObjects');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  (0, _qunit.test)('test method deleteLayerObjects', function (assert) {\n    //Arrange\n    assert.expect(8);\n    var done = assert.async(1);\n    var testLeafletObject = L.featureGroup();\n    var polygon = L.polygon([[1, 1], [2, 5], [2, 5]]).addTo(testLeafletObject);\n    polygon.id = '1';\n    var obj = { _deleteLayerFromAttrPanel: function _deleteLayerFromAttrPanel() {} };\n    var getModelLayerFeature = function getModelLayerFeature() {\n      return _ember['default'].RSVP.resolve([null, testLeafletObject]);\n    };\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature() {},\n      mapApi: { getFromApi: function getFromApi() {\n          return obj._deleteLayerFromAttrPanel;\n        } },\n      _getLayerFeatureId: function _getLayerFeatureId(layer, shape) {\n        return shape.id;\n      }\n    });\n    var getMLFeature = _sinon['default'].stub(subject, '_getModelLayerFeature', getModelLayerFeature);\n    var spyDeleteLayerFromAttrPanelFunc = _sinon['default'].spy(obj, '_deleteLayerFromAttrPanel');\n    var spyRemoveLayer = _sinon['default'].spy(testLeafletObject, 'removeLayer');\n\n    //Act\n    var result = subject.deleteLayerObjects('1', ['1']);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Check result instance of Promise');\n    result.then(function () {\n      assert.equal(spyDeleteLayerFromAttrPanelFunc.callCount, 1, 'Check call count to method _deleteLayerFromAttrPanel');\n      assert.equal(getMLFeature.callCount, 1, 'Check call count to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][0], '1', 'Check call first arg to method _getModelLayerFeature');\n      assert.deepEqual(getMLFeature.args[0][1], ['1'], 'Check call second arg to method _getModelLayerFeature');\n      assert.equal(spyRemoveLayer.callCount, 1, 'Check call count to method removeLayer');\n      assert.equal(spyRemoveLayer.args[0][0].id, '1', 'Check call first arg to method removeLayer');\n      assert.equal(testLeafletObject.getLayers().length, 0, 'Count layers in object');\n      done();\n      spyDeleteLayerFromAttrPanelFunc.restore();\n      spyRemoveLayer.restore();\n      getMLFeature.restore();\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-delete-layer-objects-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-delete-layer-objects-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-delete-layer-objects-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-delete-layer-objects-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-delete-layer-objects-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-delete-layer-objects-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-download-file-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'sinon', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi, _sinon, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326) {\n\n  (0, _qunit.module)('Unit | Mixin | flexberry map model api download file');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  (0, _qunit.test)('test api method downloadFile', function (assert) {\n    assert.expect(4);\n    var done = assert.async(1);\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default']\n        };\n      },\n      resolveRegistration: function resolveRegistration() {\n        return {\n          APP: {\n            backendUrls: {\n              featureExportApi: 'featureExportApi'\n            }\n          }\n        };\n      }\n    });\n\n    var layer = _ember['default'].Object.create({\n      id: '1',\n      type: 'wfs',\n      settingsAsObject: {\n        url: 'geoserverUrl',\n        typeNS: 'testTypeNS',\n        typeName: 'layerWfs',\n        geometryField: 'geometryField'\n      },\n      name: 'layerWfsName',\n      headers: {},\n      crs: {\n        code: 'EPSG:4326'\n      }\n    });\n    var maplayers = _ember['default'].A(layer);\n    var subject = mapApiMixinObject.create({\n      mapLayer: maplayers\n    });\n\n    var findByStub = _sinon['default'].stub(subject.mapLayer, 'findBy');\n    findByStub.returns(layer);\n    var stubAjax = _sinon['default'].stub(_ember['default'].$, 'ajax');\n    stubAjax.yieldsTo('success', 'blob');\n\n    var result = subject.downloadFile('1', ['111'], 'JSON', 'EPSG:4326', false);\n    assert.ok(result instanceof _ember['default'].RSVP.Promise);\n    result.then(function (res) {\n      assert.equal(res.fileName, 'layerWfsName.json');\n      assert.equal(res.blob, 'blob');\n      assert.equal(stubAjax.callCount, 1);\n      done();\n      ownerStub.restore();\n      stubAjax.restore();\n      findByStub.restore();\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-download-file-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-download-file-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-download-file-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-download-file-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-download-file-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-download-file-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-edit-layer-object-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'sinon', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326', 'ember-flexberry-gis/coordinate-reference-systems/epsg-3395'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi, _sinon, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326, _emberFlexberryGisCoordinateReferenceSystemsEpsg3395) {\n\n  (0, _qunit.module)('Unit | Mixin | test method editLayerObject');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n  var geoJsonObject = L.polygon([[0, 100], [0, 101], [1, 101], [1, 100]]).toGeoJSON();\n  var leafletObject = L.polygon([[1, 0], [2, 3], [3, 1], [3, 0]]);\n  var leafletLayer = {\n    options: {\n      crs: {\n        code: 'EPSG:4326'\n      }\n    },\n    editLayer: function editLayer() {}\n  };\n\n  (0, _qunit.test)('test method editLayerObject with EPSG:4326', function (assert) {\n    //Arrange\n    assert.expect(6);\n    var done = assert.async(1);\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'],\n          'epsg3395': _emberFlexberryGisCoordinateReferenceSystemsEpsg3395['default']\n        };\n      },\n      knownNamesForType: function knownNamesForType() {\n        return ['epsg4326', 'epsg3395'];\n      }\n    });\n    var getModelLayerFeature = function getModelLayerFeature() {\n      return _ember['default'].RSVP.resolve([{}, leafletLayer, [leafletObject]]);\n    };\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature() {}\n    });\n    var spyEditLayer = _sinon['default'].spy(leafletLayer, 'editLayer');\n    var getMLFeature = _sinon['default'].stub(subject, '_getModelLayerFeature', getModelLayerFeature);\n\n    //Act\n    var result = subject.editLayerObject('1', '1', geoJsonObject, 'EPSG:4326');\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Check result instance of Promise');\n    result.then(function (res) {\n      assert.equal(spyEditLayer.callCount, 1, 'Check call count to method editLayer');\n      assert.deepEqual(res._latlngs, [[L.latLng(0, 100), L.latLng(0, 101), L.latLng(1, 101), L.latLng(1, 100)]], 'Equals rezult coordinates with test coordinates');\n      assert.equal(getMLFeature.callCount, 1, 'Check call count to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][0], '1', 'Check call first arg to method _getModelLayerFeature');\n      assert.deepEqual(getMLFeature.args[0][1], ['1'], 'Check call second arg to method _getModelLayerFeature');\n      done();\n      spyEditLayer.restore();\n      getMLFeature.restore();\n      ownerStub.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method editLayerObject with EPSG:3395', function (assert) {\n    //Arrange\n    assert.expect(7);\n    var done = assert.async(1);\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'],\n          'epsg3395': _emberFlexberryGisCoordinateReferenceSystemsEpsg3395['default']\n        };\n      },\n      knownNamesForType: function knownNamesForType() {\n        return ['epsg4326', 'epsg3395'];\n      }\n    });\n    var getModelLayerFeature = function getModelLayerFeature() {\n      return _ember['default'].RSVP.resolve([{}, leafletLayer, [leafletObject]]);\n    };\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature() {}\n    });\n    var spyEditLayer = _sinon['default'].spy(leafletLayer, 'editLayer');\n    var spyUnProject = _sinon['default'].spy(L.CRS.EPSG3395, 'unproject');\n    var getMLFeature = _sinon['default'].stub(subject, '_getModelLayerFeature', getModelLayerFeature);\n\n    //Act\n    var result = subject.editLayerObject('1', '1', geoJsonObject, 'EPSG:3395');\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Check result instance of Promise');\n    result.then(function (res) {\n      assert.equal(spyEditLayer.callCount, 1, 'Check call count to method editLayer');\n      assert.equal(spyUnProject.callCount, 5, 'Check call count to method unproject');\n      assert.equal(getMLFeature.callCount, 1, 'Check call count to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][0], '1', 'Check call first arg to method _getModelLayerFeature');\n      assert.deepEqual(getMLFeature.args[0][1], ['1'], 'Check call second arg to method _getModelLayerFeature');\n      assert.deepEqual(res._latlngs, [[L.latLng(0, 0.0008983152841195215), L.latLng(0, 0.0009072984369607167), L.latLng(0.00000904328947124462, 0.0009072984369607167), L.latLng(0.00000904328947124462, 0.0008983152841195215)]], 'Equals rezult coordinates with test coordinates');\n      done();\n      spyUnProject.restore();\n      getMLFeature.restore();\n      spyEditLayer.restore();\n      ownerStub.restore();\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-edit-layer-object-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-edit-layer-object-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-edit-layer-object-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-edit-layer-object-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-edit-layer-object-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-edit-layer-object-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-expansion-add-object-to-layer-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api-expansion', 'sinon', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326', 'ember-flexberry-gis/coordinate-reference-systems/epsg-3395'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApiExpansion, _sinon, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326, _emberFlexberryGisCoordinateReferenceSystemsEpsg3395) {\n\n  (0, _qunit.module)('Unit | Mixin | test method addObjectToLayer');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApiExpansion['default']);\n  var geoJsonObject = L.polygon([[0, 100], [0, 101], [1, 101], [1, 100]]).toGeoJSON();\n\n  (0, _qunit.test)('test method addObjectToLayer with EPSG:4326', function (assert) {\n    //Arrange\n    var done = assert.async(1);\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'],\n          'epsg3395': _emberFlexberryGisCoordinateReferenceSystemsEpsg3395['default']\n        };\n      }\n    });\n    var leafletObject = L.featureGroup();\n    leafletObject.options = { crs: { code: 'EPSG:4326' } };\n    var getModelLeafletObject = function getModelLeafletObject() {\n      return [{ id: 1 }, leafletObject];\n    };\n\n    var subject = mapApiMixinObject.create({\n      _getModelLeafletObject: function _getModelLeafletObject() {}\n    });\n    var getMLObject = _sinon['default'].stub(subject, '_getModelLeafletObject', getModelLeafletObject);\n\n    //Act\n    var promise = subject.addObjectToLayer('1', geoJsonObject);\n\n    assert.ok(promise instanceof _ember['default'].RSVP.Promise);\n\n    promise.then(function (result) {\n      assert.equal(leafletObject.getLayers().length, 0, 'Layers count');\n      assert.equal(result.layerId, '1', 'Layer id');\n      assert.deepEqual(result._latlngs, [[L.latLng(0, 100), L.latLng(0, 101), L.latLng(1, 101), L.latLng(1, 100)]]);\n      assert.equal(getMLObject.callCount, 1, 'Check call count to method _getModelLeafletObject');\n      assert.equal(getMLObject.args[0][0], '1', 'Check call first arg to method _getModelLeafletObject');\n      ownerStub.restore();\n      getMLObject.restore();\n      done();\n    });\n  });\n\n  (0, _qunit.test)('test method addObjectToLayer with EPSG:3395', function (assert) {\n    //Arrange\n    var done = assert.async(1);\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'],\n          'epsg3395': _emberFlexberryGisCoordinateReferenceSystemsEpsg3395['default']\n        };\n      },\n      knownNamesForType: function knownNamesForType() {\n        return ['epsg4326', 'epsg3395'];\n      }\n    });\n    var leafletObject = L.featureGroup();\n    leafletObject.options = { crs: { code: 'EPSG:4326' } };\n    var getModelLeafletObject = function getModelLeafletObject() {\n      return [{ id: 1 }, leafletObject];\n    };\n\n    var subject = mapApiMixinObject.create({\n      _getModelLeafletObject: function _getModelLeafletObject() {}\n    });\n    var getMLObject = _sinon['default'].stub(subject, '_getModelLeafletObject', getModelLeafletObject);\n\n    //Act\n    subject.addObjectToLayer('1', geoJsonObject, 'EPSG:3395').then(function (result) {\n      //Assert\n      assert.equal(leafletObject.getLayers().length, 0);\n      assert.equal(result.layerId, '1');\n      assert.deepEqual(result._latlngs, [[L.latLng(0, 0.0008983152841195215), L.latLng(0, 0.0009072984369607167), L.latLng(0.00000904328947124462, 0.0009072984369607167), L.latLng(0.00000904328947124462, 0.0008983152841195215)]]);\n      assert.equal(getMLObject.callCount, 1, 'Check call count to method _getModelLeafletObject');\n      assert.equal(getMLObject.args[0][0], '1', 'Check call first arg to method _getModelLeafletObject');\n      ownerStub.restore();\n      getMLObject.restore();\n      done();\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-expansion-add-object-to-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-expansion-add-object-to-layer-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-expansion-add-object-to-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-expansion-add-object-to-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-expansion-add-object-to-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-expansion-add-object-to-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-expansion-trim-line-to-polygon-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api-expansion'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApiExpansion) {\n\n  (0, _qunit.module)('Unit | Mixin | test method trimLineToPolygon');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApiExpansion['default']);\n\n  var aGeoJson = {\n    'type': 'Feature',\n    'properties': {},\n    'geometry': {\n      'type': 'Polygon',\n      'coordinates': [[[56.2, 58.1], [56.3, 58.1], [56.3, 58.2], [56.2, 58.2], [56.2, 58.1]]]\n    },\n    'crs': {\n      'type': 'name',\n      'properties': {\n        'name': 'EPSG:4326'\n      }\n    }\n  };\n  var bGeoJson = {\n    'type': 'Feature',\n    'properties': {},\n    'geometry': {\n      'type': 'LineString',\n      'coordinates': [[56.1, 58.1], [56.4, 58.1]]\n    },\n    'crs': {\n      'type': 'name',\n      'properties': {\n        'name': 'EPSG:4326'\n      }\n    }\n  };\n\n  (0, _qunit.test)('test method trimLineToPolygon with EPSG:4326', function (assert) {\n    assert.expect(2);\n    var done = assert.async(1);\n    var subject = mapApiMixinObject.create({});\n\n    var promise = subject.trimLineToPolygon(aGeoJson, bGeoJson);\n\n    assert.ok(promise instanceof _ember['default'].RSVP.Promise);\n    promise.then(function (result) {\n      assert.deepEqual(result.geometry.coordinates, [[56.2, 58.1], [56.3, 58.1]]);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('test method trimLineToPolygon. Error objects does\\' not intersect', function (assert) {\n    assert.expect(2);\n    var done = assert.async(1);\n    bGeoJson.geometry.coordinates = [[56.1, 56], [56.4, 56]];\n    var subject = mapApiMixinObject.create({});\n\n    var promise = subject.trimLineToPolygon(aGeoJson, bGeoJson);\n\n    assert.ok(promise instanceof _ember['default'].RSVP.Promise);\n    promise.then()['catch'](function (result) {\n      assert.equal(result, 'objects does\\' not intersect');\n      bGeoJson.geometry.coordinates = [[56.1, 58.1], [56.4, 58.1]];\n      done();\n    });\n  });\n\n  (0, _qunit.test)('test method trimLineToPolygon. Error different crs', function (assert) {\n    assert.expect(2);\n    var done = assert.async(1);\n    aGeoJson.crs.properties.name = 'EPSG:3395';\n    var subject = mapApiMixinObject.create({});\n\n    var promise = subject.trimLineToPolygon(aGeoJson, bGeoJson);\n\n    assert.ok(promise instanceof _ember['default'].RSVP.Promise);\n    promise.then()['catch'](function (result) {\n      assert.equal(result, 'CRS mismatch. Objects must have the same crs');\n      aGeoJson.crs.properties.name = 'EPSG:4326';\n      done();\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-expansion-trim-line-to-polygon-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-expansion-trim-line-to-polygon-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-expansion-trim-line-to-polygon-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-expansion-trim-line-to-polygon-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-expansion-trim-line-to-polygon-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-expansion-trim-line-to-polygon-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-between-objects-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi) {\n\n  (0, _qunit.module)('Unit | Mixin | test method _getDistanceBetweenObjects');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  (0, _qunit.test)('test method _getDistanceBetweenObjects between polyline and polygon', function (assert) {\n    //Arrange\n    assert.expect(1);\n    var firstObj = L.polyline([[1.001, 1.001], [1.003, 1.003], [1.005, 1.005]]);\n    firstObj.feature = firstObj.toGeoJSON();\n    var secondObj = L.polygon([[1.001, 1.001], [1.001, 1.002], [1.003, 1.001], [1.003, 0]]);\n    secondObj.feature = secondObj.toGeoJSON();\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var result = subject._getDistanceBetweenObjects(firstObj, secondObj);\n\n    //Assert\n    assert.equal(result, 55820.041009409564, 'Equals rezult distance with test distance');\n  });\n\n  (0, _qunit.test)('test method _getDistanceBetweenObjects between marker and polygon', function (assert) {\n    //Arrange\n    assert.expect(1);\n    var firstObj = L.marker([1.001, 1.001]);\n    firstObj.feature = firstObj.toGeoJSON();\n    var secondObj = L.polygon([[1.001, 1.001], [1.001, 1.002], [1.003, 1.001], [1.003, 0]]);\n    secondObj.feature = secondObj.toGeoJSON();\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var result = subject._getDistanceBetweenObjects(firstObj, secondObj);\n\n    //Assert\n    assert.equal(result, 55597.65129192688, 'Equals rezult distance with test distance');\n  });\n\n  (0, _qunit.test)('test method _getDistanceBetweenObjects between marker and marker', function (assert) {\n    //Arrange\n    assert.expect(1);\n    var firstObj = L.marker([1.001, 1.001]);\n    firstObj.feature = firstObj.toGeoJSON();\n    var secondObj = L.marker([1.001, 1.002]);\n    secondObj.feature = secondObj.toGeoJSON();\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var result = subject._getDistanceBetweenObjects(firstObj, secondObj);\n\n    //Assert\n    assert.equal(result, 111.19508023354534, 'Equals rezult distance with test distance');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-between-objects-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-get-distance-between-objects-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-get-distance-between-objects-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-between-objects-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-get-distance-between-objects-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-get-distance-between-objects-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'sinon'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi, _sinon) {\n\n  (0, _qunit.module)('Unit | Mixin | test method _getDistanceBetweenObjects');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  (0, _qunit.test)('test method getDistanceBetweenObjects between polyline and polygon', function (assert) {\n    //Arrange\n    assert.expect(7);\n    var done = assert.async(1);\n    var firstObj = L.polyline([[1.001, 1.001], [1.003, 1.003], [1.005, 1.005]]);\n    firstObj.feature = firstObj.toGeoJSON();\n    var secondObj = L.polygon([[1.001, 1.001], [1.001, 1.002], [1.003, 1.001], [1.003, 0]]);\n    secondObj.feature = secondObj.toGeoJSON();\n    var getModelLayerFeature = function getModelLayerFeature(layerId) {\n      return _ember['default'].RSVP.resolve([null, null, [layerId === '1' ? firstObj : secondObj]]);\n    };\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature() {}\n    });\n    var getMLFeature = _sinon['default'].stub(subject, '_getModelLayerFeature', getModelLayerFeature);\n\n    //Act\n    var result = subject.getDistanceBetweenObjects('1', '4', '2', '3');\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Check result instance of Promise');\n    result.then(function (res) {\n      assert.equal(res, 55820.041009409564, 'Equals rezult distance with test distance');\n      assert.equal(getMLFeature.callCount, 2, 'Check call count to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][0], '1', 'Check call first arg to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][1], '4', 'Check call second arg to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[1][0], '2', 'Check call first arg to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[1][1], '3', 'Check call second arg to method _getModelLayerFeature');\n      done();\n      getMLFeature.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method getDistanceBetweenObjects between marker and polygon', function (assert) {\n    //Arrange\n    assert.expect(7);\n    var done = assert.async(1);\n    var firstObj = L.marker([1.001, 1.001]);\n    firstObj.feature = firstObj.toGeoJSON();\n    var secondObj = L.polygon([[1.001, 1.001], [1.001, 1.002], [1.003, 1.001], [1.003, 0]]);\n    secondObj.feature = secondObj.toGeoJSON();\n    var getModelLayerFeature = function getModelLayerFeature(layerId) {\n      return _ember['default'].RSVP.resolve([null, null, [layerId === '1' ? firstObj : secondObj]]);\n    };\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature() {}\n    });\n    var getMLFeature = _sinon['default'].stub(subject, '_getModelLayerFeature', getModelLayerFeature);\n\n    //Act\n    var result = subject.getDistanceBetweenObjects('1', '4', '2', '3');\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Check result instance of Promise');\n    result.then(function (res) {\n      assert.equal(res, 55597.65129192688, 'Equals rezult distance with test distance');\n      assert.equal(getMLFeature.callCount, 2, 'Check call count to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][0], '1', 'Check call first arg to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][1], '4', 'Check call second arg to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[1][0], '2', 'Check call first arg to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[1][1], '3', 'Check call second arg to method _getModelLayerFeature');\n      done();\n      getMLFeature.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method getDistanceBetweenObjects between marker and marker', function (assert) {\n    //Arrange\n    assert.expect(7);\n    var done = assert.async(1);\n    var firstObj = L.marker([1.001, 1.001]);\n    firstObj.feature = firstObj.toGeoJSON();\n    var secondObj = L.marker([1.001, 1.002]);\n    secondObj.feature = secondObj.toGeoJSON();\n    var getModelLayerFeature = function getModelLayerFeature(layerId) {\n      return _ember['default'].RSVP.resolve([null, null, [layerId === '1' ? firstObj : secondObj]]);\n    };\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature() {}\n    });\n    var getMLFeature = _sinon['default'].stub(subject, '_getModelLayerFeature', getModelLayerFeature);\n\n    //Act\n    var result = subject.getDistanceBetweenObjects('1', '4', '2', '3');\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Check result instance of Promise');\n    result.then(function (res) {\n      assert.equal(res, 111.19508023354534);\n      assert.equal(getMLFeature.callCount, 2, 'Check call count to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][0], '1', 'Check call first arg to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[0][1], '4', 'Check call second arg to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[1][0], '2', 'Check call first arg to method _getModelLayerFeature');\n      assert.equal(getMLFeature.args[1][1], '3', 'Check call second arg to method _getModelLayerFeature');\n      done();\n      getMLFeature.restore();\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-get-distance-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-get-distance-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-distance-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-get-distance-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-get-distance-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-object-center-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi) {\n\n  (0, _qunit.module)('Unit | Mixin | get object center');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  (0, _qunit.test)('return current center of point', function (assert) {\n    //Arrange\n    assert.expect(1);\n    var subject = mapApiMixinObject.create();\n    var obj2 = L.marker([1, 1]);\n    obj2.feature = obj2.toGeoJSON();\n\n    //Act\n    var result = subject.getObjectCenter(obj2);\n    var resObj = L.latLng(1, 1);\n\n    //Assert\n    assert.deepEqual(result, resObj, 'Equals rezult object with test object');\n  });\n\n  (0, _qunit.test)('return current center of polygon', function (assert) {\n    //Arrange\n    assert.expect(1);\n    var subject = mapApiMixinObject.create();\n    var obj2 = L.polygon([[1, 1], [1, 2], [3, 1], [3, 0]]);\n    obj2.feature = obj2.toGeoJSON();\n\n    //Act\n    var result = subject.getObjectCenter(obj2);\n    var resObj = L.latLng(2, 1);\n\n    //Assert\n    assert.deepEqual(result, resObj, 'Equals rezult object with test object');\n  });\n\n  (0, _qunit.test)('return current center of polyline', function (assert) {\n    //Arrange\n    assert.expect(1);\n    var subject = mapApiMixinObject.create();\n    var obj2 = L.polyline([[1, 1], [3, 3], [5, 5]]);\n    obj2.feature = obj2.toGeoJSON();\n\n    //Act\n    var result = subject.getObjectCenter(obj2);\n    var resObj = L.latLng(3, 3);\n\n    //Assert\n    assert.deepEqual(result, resObj, 'Equals rezult object with test object');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-object-center-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-get-object-center-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-get-object-center-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-object-center-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-get-object-center-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-get-object-center-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-rhumb-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi) {\n\n  (0, _qunit.module)('Unit | Mixin | method get rhumb');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  (0, _qunit.test)('test method getRhumb for LineString', function (assert) {\n    //Arrange\n    var testLiseString = {\n      type: 'Feature',\n      geometry: {\n        type: 'LineString',\n        coordinates: [[3, 7], [3, 3], [8, 3]]\n      }\n    };\n\n    var resObj = [{\n      type: 'LineString',\n      startPoint: [3, 7],\n      crs: 'EPSG:4326',\n      skip: 0,\n      points: [{\n        rhumb: 'SE',\n        angle: 0,\n        distance: 4\n      }, {\n        rhumb: 'SE',\n        angle: 90,\n        distance: 5\n      }]\n    }];\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var rhumbs = subject.getRhumb(testLiseString, 'EPSG:4326');\n\n    //Assert\n    assert.deepEqual(rhumbs, resObj);\n  });\n\n  (0, _qunit.test)('test method getRhumb for MultiLineString', function (assert) {\n    //Arrange\n    var testLiseString = {\n      type: 'Feature',\n      geometry: {\n        type: 'MultiLineString',\n        coordinates: [[[3, 7], [3, 3], [8, 3]], [[6, 9], [6, 5], [10, 5]]]\n      }\n    };\n\n    var resObj = [{\n      type: 'LineString',\n      startPoint: [3, 7],\n      crs: 'EPSG:4326',\n      skip: 0,\n      points: [{\n        rhumb: 'SE',\n        angle: 0,\n        distance: 4\n      }, {\n        rhumb: 'SE',\n        angle: 90,\n        distance: 5\n      }]\n    }, {\n      type: 'LineString',\n      startPoint: [6, 9],\n      crs: 'EPSG:4326',\n      skip: 0,\n      points: [{\n        rhumb: 'SE',\n        angle: 0,\n        distance: 4\n      }, {\n        rhumb: 'SE',\n        angle: 90,\n        distance: 4\n      }]\n    }];\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var rhumbs = subject.getRhumb(testLiseString, 'EPSG:4326');\n\n    //Assert\n    assert.deepEqual(rhumbs, resObj);\n  });\n\n  (0, _qunit.test)('test method getRhumb for Polygon without hole', function (assert) {\n    //Arrange\n    var testLiseString = {\n      type: 'Feature',\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[3, 7], [3, 3], [8, 3], [8, 7], [3, 7]]]\n      }\n    };\n\n    var resObj = [{\n      type: 'Polygon',\n      startPoint: [3, 7],\n      crs: 'EPSG:4326',\n      skip: 0,\n      hole: false,\n      points: [{\n        rhumb: 'SE',\n        angle: 0,\n        distance: 4\n      }, {\n        rhumb: 'SE',\n        angle: 90,\n        distance: 5\n      }, {\n        rhumb: 'NE',\n        angle: 0,\n        distance: 4\n      }, {\n        rhumb: 'NW',\n        angle: 90,\n        distance: 5\n      }]\n    }];\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var rhumbs = subject.getRhumb(testLiseString, 'EPSG:4326');\n\n    //Assert\n    assert.deepEqual(rhumbs, resObj);\n  });\n\n  (0, _qunit.test)('test method getRhumb for Polygon with hole', function (assert) {\n    //Arrange\n    var testLiseString = {\n      type: 'Feature',\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[3, 7], [3, 3], [8, 3], [8, 7], [3, 7]], [[4, 4], [5, 4], [5, 5], [4, 5], [4, 4]]]\n      }\n    };\n\n    var resObj = [{\n      type: 'Polygon',\n      startPoint: [3, 7],\n      crs: 'EPSG:4326',\n      skip: 0,\n      hole: false,\n      points: [{\n        rhumb: 'SE',\n        angle: 0,\n        distance: 4\n      }, {\n        rhumb: 'SE',\n        angle: 90,\n        distance: 5\n      }, {\n        rhumb: 'NE',\n        angle: 0,\n        distance: 4\n      }, {\n        rhumb: 'NW',\n        angle: 90,\n        distance: 5\n      }]\n    }, {\n      type: 'Polygon',\n      startPoint: [4, 4],\n      crs: 'EPSG:4326',\n      skip: 0,\n      hole: true,\n      points: [{\n        rhumb: 'SE',\n        angle: 90,\n        distance: 1\n      }, {\n        rhumb: 'NE',\n        angle: 0,\n        distance: 1\n      }, {\n        rhumb: 'NW',\n        angle: 90,\n        distance: 1\n      }, {\n        rhumb: 'SE',\n        angle: 0,\n        distance: 1\n      }]\n    }];\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var rhumbs = subject.getRhumb(testLiseString, 'EPSG:4326');\n\n    //Assert\n    assert.deepEqual(rhumbs, resObj);\n  });\n\n  (0, _qunit.test)('test method getRhumb for MultiPolygon with part', function (assert) {\n    //Arrange\n    var testLiseString = {\n      type: 'Feature',\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: [[[[3, 7], [3, 3], [8, 3], [8, 7], [3, 7]]], [[[9, 3], [9, 2], [10, 2], [10, 3], [9, 3]]]]\n      }\n    };\n\n    var resObj = [{\n      type: 'Polygon',\n      startPoint: [3, 7],\n      crs: 'EPSG:4326',\n      skip: 0,\n      hole: false,\n      points: [{\n        rhumb: 'SE',\n        angle: 0,\n        distance: 4\n      }, {\n        rhumb: 'SE',\n        angle: 90,\n        distance: 5\n      }, {\n        rhumb: 'NE',\n        angle: 0,\n        distance: 4\n      }, {\n        rhumb: 'NW',\n        angle: 90,\n        distance: 5\n      }]\n    }, {\n      type: 'Polygon',\n      startPoint: [9, 3],\n      crs: 'EPSG:4326',\n      skip: 0,\n      hole: false,\n      points: [{\n        rhumb: 'SE',\n        angle: 0,\n        distance: 1\n      }, {\n        rhumb: 'SE',\n        angle: 90,\n        distance: 1\n      }, {\n        rhumb: 'NE',\n        angle: 0,\n        distance: 1\n      }, {\n        rhumb: 'NW',\n        angle: 90,\n        distance: 1\n      }]\n    }];\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var rhumbs = subject.getRhumb(testLiseString, 'EPSG:4326');\n\n    //Assert\n    assert.deepEqual(rhumbs, resObj);\n  });\n\n  (0, _qunit.test)('test method getRhumb for MultiPolygon with part and hole', function (assert) {\n    //Arrange\n    var testLiseString = {\n      type: 'Feature',\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: [[[[3, 7], [3, 3], [8, 3], [8, 7], [3, 7]], [[4, 4], [5, 4], [5, 5], [4, 5], [4, 4]]], [[[9, 3], [9, 2], [10, 2], [10, 3], [9, 3]]]]\n      }\n    };\n\n    var resObj = [{\n      type: 'Polygon',\n      startPoint: [3, 7],\n      crs: 'EPSG:4326',\n      skip: 0,\n      hole: false,\n      points: [{\n        rhumb: 'SE',\n        angle: 0,\n        distance: 4\n      }, {\n        rhumb: 'SE',\n        angle: 90,\n        distance: 5\n      }, {\n        rhumb: 'NE',\n        angle: 0,\n        distance: 4\n      }, {\n        rhumb: 'NW',\n        angle: 90,\n        distance: 5\n      }]\n    }, {\n      type: 'Polygon',\n      startPoint: [4, 4],\n      crs: 'EPSG:4326',\n      skip: 0,\n      hole: true,\n      points: [{\n        rhumb: 'SE',\n        angle: 90,\n        distance: 1\n      }, {\n        rhumb: 'NE',\n        angle: 0,\n        distance: 1\n      }, {\n        rhumb: 'NW',\n        angle: 90,\n        distance: 1\n      }, {\n        rhumb: 'SE',\n        angle: 0,\n        distance: 1\n      }]\n    }, {\n      type: 'Polygon',\n      startPoint: [9, 3],\n      crs: 'EPSG:4326',\n      skip: 0,\n      hole: false,\n      points: [{\n        rhumb: 'SE',\n        angle: 0,\n        distance: 1\n      }, {\n        rhumb: 'SE',\n        angle: 90,\n        distance: 1\n      }, {\n        rhumb: 'NE',\n        angle: 0,\n        distance: 1\n      }, {\n        rhumb: 'NW',\n        angle: 90,\n        distance: 1\n      }]\n    }];\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var rhumbs = subject.getRhumb(testLiseString, 'EPSG:4326');\n\n    //Assert\n    assert.deepEqual(rhumbs, resObj);\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-rhumb-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-get-rhumb-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-get-rhumb-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-get-rhumb-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-get-rhumb-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-get-rhumb-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-savelayer-test', ['exports', 'ember', 'ember-flexberry-gis/mixins/flexberry-map-model-api-savelayer', 'qunit'], function (exports, _ember, _emberFlexberryGisMixinsFlexberryMapModelApiSavelayer, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | flexberry map model api savelayer');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var FlexberryMapModelApiSavelayerObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApiSavelayer['default']);\n    var subject = FlexberryMapModelApiSavelayerObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-savelayer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-savelayer-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-savelayer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-savelayer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-savelayer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-savelayer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-set-visibilitty-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'sinon'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi, _sinon) {\n\n  (0, _qunit.module)('Unit | Mixin | test method setVisibility ');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  var layerModel = _ember['default'].Component.extend({\n    visibility: false\n  });\n\n  (0, _qunit.test)('Test visibility = true', function (assert) {\n    //Arrange\n    assert.expect(9);\n    var firstLayer = layerModel.create({\n      id: '1'\n    });\n    var secondLayer = layerModel.create({\n      id: '2'\n    });\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n    map.on('flexberry-map:moveend', function () {});\n    var done = assert.async(1);\n    var subject = mapApiMixinObject.create({\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      mapLayer: _ember['default'].A([firstLayer, secondLayer])\n    });\n    var mapFireSpy = _sinon['default'].stub(map, 'fire', function (name, e) {\n      e.results = _ember['default'].A([{ promise: _ember['default'].RSVP.resolve() }]);\n    });\n    var mapLayerFindSpy = _sinon['default'].spy(subject.mapLayer, 'findBy');\n\n    //Act\n    var result = subject._setVisibility(['1'], true);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Equals result = Promise');\n    result.then(function (res) {\n      assert.equal(res, 'success', 'Check result message');\n      assert.equal(firstLayer.get('visibility'), true, 'Check firstLayer visibility');\n      assert.equal(secondLayer.get('visibility'), false, 'Check secondLayer visibility');\n      assert.equal(mapFireSpy.callCount, 1, 'Check call count method fire on map');\n      assert.equal(mapFireSpy.args[0][0], 'flexberry-map:moveend', 'Check first argument method fire on map');\n      assert.equal(mapLayerFindSpy.callCount, 1, 'Check call count method findBy on Array');\n      assert.equal(mapLayerFindSpy.args[0][0], 'id', 'Check first argument method findBy on Array');\n      assert.equal(mapLayerFindSpy.args[0][1], '1', 'Check second argument method findBy on Array');\n      done();\n      mapFireSpy.restore();\n      mapLayerFindSpy.restore();\n    });\n  });\n\n  (0, _qunit.test)('Test visibility = false', function (assert) {\n    //Arrange\n    assert.expect(10);\n    var firstLayer = layerModel.create({\n      id: '1'\n    });\n    var secondLayer = layerModel.create({\n      id: '2'\n    });\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n    map.on('flexberry-map:moveend', function () {});\n    var done = assert.async(1);\n    var subject = mapApiMixinObject.create({\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      mapLayer: _ember['default'].A([firstLayer, secondLayer])\n    });\n    var mapFireSpy = _sinon['default'].stub(map, 'fire', function (name, e) {\n      e.results = _ember['default'].A([{ promise: _ember['default'].RSVP.resolve() }]);\n    });\n    var mapLayerFindSpy = _sinon['default'].spy(subject.mapLayer, 'findBy');\n\n    //Act\n    var result = subject._setVisibility(['1', '2']);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Equals result = Promise');\n    result.then(function (res) {\n      assert.equal(res, 'success', 'Check result message');\n      assert.equal(firstLayer.get('visibility'), false, 'Check firstLayer visibility');\n      assert.equal(secondLayer.get('visibility'), false, 'Check secondLayer visibility');\n      assert.equal(mapFireSpy.callCount, 0, 'Check call count method fire on map');\n      assert.equal(mapLayerFindSpy.callCount, 2, 'Check call count method findBy on Array');\n      assert.equal(mapLayerFindSpy.args[0][0], 'id', 'Check first argument method findBy on Array');\n      assert.equal(mapLayerFindSpy.args[0][1], '1', 'Check second argument method findBy on Array');\n      assert.equal(mapLayerFindSpy.args[1][0], 'id', 'Check first argument method findBy on Array');\n      assert.equal(mapLayerFindSpy.args[1][1], '2', 'Check second argument method findBy on Array');\n      done();\n      mapFireSpy.restore();\n      mapLayerFindSpy.restore();\n    });\n  });\n\n  (0, _qunit.test)('Test not founded layers', function (assert) {\n    //Arrange\n    assert.expect(8);\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n    map.on('flexberry-map:moveend', function () {});\n    var done = assert.async(1);\n    var subject = mapApiMixinObject.create({\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      mapLayer: _ember['default'].A([])\n    });\n    var mapFireSpy = _sinon['default'].stub(map, 'fire', function (name, e) {\n      e.results = _ember['default'].A([{ promise: _ember['default'].RSVP.resolve() }]);\n    });\n    var mapLayerFindSpy = _sinon['default'].spy(subject.mapLayer, 'findBy');\n\n    //Act\n    var result = subject._setVisibility(['3', '4'], true);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Equals result = Promise');\n    result['catch'](function (res) {\n      assert.equal(res, 'Layer \\'3\\' not found.', 'Check result message');\n      assert.equal(mapFireSpy.callCount, 0, 'Check call count method fire on map');\n      assert.equal(mapLayerFindSpy.callCount, 2, 'Check call count method findBy on Array');\n      assert.equal(mapLayerFindSpy.args[0][0], 'id', 'Check first argument method findBy on Array');\n      assert.equal(mapLayerFindSpy.args[0][1], '3', 'Check second argument method findBy on Array');\n      assert.equal(mapLayerFindSpy.args[1][0], 'id', 'Check first argument method findBy on Array');\n      assert.equal(mapLayerFindSpy.args[1][1], '4', 'Check second argument method findBy on Array');\n      done();\n      mapFireSpy.restore();\n      mapLayerFindSpy.restore();\n    });\n  });\n\n  (0, _qunit.test)('Test array is empty', function (assert) {\n    //Arrange\n    assert.expect(4);\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n    map.on('flexberry-map:moveend', function () {});\n    var done = assert.async(1);\n    var subject = mapApiMixinObject.create({\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      mapLayer: _ember['default'].A([])\n    });\n    var mapFireSpy = _sinon['default'].stub(map, 'fire', function (name, e) {\n      e.results = _ember['default'].A([{ promise: _ember['default'].RSVP.resolve() }]);\n    });\n    var mapLayerFindSpy = _sinon['default'].spy(subject.mapLayer, 'findBy');\n\n    //Act\n    var result = subject._setVisibility([], true);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Equals result = Promise');\n    result['catch'](function (res) {\n      assert.equal(res, 'all layerIds is not found', 'Check result message');\n      assert.equal(mapFireSpy.callCount, 0, 'Check call count method fire on map');\n      assert.equal(mapLayerFindSpy.callCount, 0, 'Check call count method findBy on Array');\n      done();\n      mapFireSpy.restore();\n      mapLayerFindSpy.restore();\n    });\n  });\n\n  (0, _qunit.test)('Test parametr is not a array', function (assert) {\n    //Arrange\n    assert.expect(2);\n    var done = assert.async(1);\n    var subject = mapApiMixinObject.create();\n\n    //Act\n    var result = subject._setVisibility();\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Equals result = Promise');\n    result['catch'](function (res) {\n      assert.equal(res, 'Parametr is not a Array', 'Check result message');\n      done();\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-set-visibilitty-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-set-visibilitty-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-set-visibilitty-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-set-visibilitty-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-set-visibilitty-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-set-visibilitty-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-set-visibility-objects-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'sinon', 'ember-flexberry-gis/layers/-private/vector'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi, _sinon, _emberFlexberryGisLayersPrivateVector) {\n\n  (0, _qunit.module)('Unit | Mixin | test method setVisibilityObjects');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  var layerModel = _ember['default'].A({\n    settingsAsObject: {\n      labelSettings: {\n        signMapObjects: true\n      }\n    }\n  });\n  var _labelsLayer = L.featureGroup();\n  var leafletObject = L.featureGroup();\n  leafletObject.options = {\n    showExisting: false,\n    continueLoading: false\n  };\n  leafletObject._labelsLayer = _labelsLayer;\n  var firstTestLayer = L.polygon([[1, 2], [4, 2], [4, 4], [1, 2]]).addTo(leafletObject);\n  firstTestLayer.id = '1';\n  var secondTestLayer = L.polygon([[10, 20], [40, 20], [40, 40], [10, 20]]).addTo(leafletObject);\n  secondTestLayer.id = '2';\n  var thirdTestLayer = L.polygon([[0.1, 0.2], [0.4, 0.2], [0.4, 0.4], [0.1, 0.2]]).addTo(leafletObject);\n  thirdTestLayer.id = '3';\n  var firstTestLabelLayer = L.marker([1, 2]).addTo(_labelsLayer);\n  firstTestLabelLayer.id = '1';\n  var secondTestLabelLayer = L.marker([40, 20]).addTo(_labelsLayer);\n  secondTestLabelLayer.id = '2';\n  var thirdTestLabelLayer = L.marker([20, 40]).addTo(_labelsLayer);\n  thirdTestLabelLayer.id = '3';\n\n  (0, _qunit.test)('Test to addLayers to map (visibility = true)', function (assert) {\n    //Arrange\n    assert.expect(9);\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n    var done = assert.async(1);\n    var subject = mapApiMixinObject.create({\n      _getModelLeafletObject: function _getModelLeafletObject() {\n        return [layerModel, leafletObject];\n      },\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      _getLayerFeatureId: function _getLayerFeatureId(layer, shape) {\n        return shape.id;\n      },\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve();\n      }\n    });\n    var getModelLeafletObjSpy = _sinon['default'].spy(subject, '_getModelLeafletObject');\n    var getModelLayerFeatureSpy = _sinon['default'].spy(subject, '_getModelLayerFeature');\n    var mapAddSpy = _sinon['default'].spy(map, 'addLayer');\n\n    //Act\n    var result = subject._setVisibilityObjects('1', ['1', '2'], true);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Equals result = Promise');\n    result.then(function (res) {\n      assert.equal(res, 'sucsess', 'Check result message');\n      assert.equal(Object.values(map._layers).length, 5, 'Check count layers on Map');\n      assert.equal(mapAddSpy.callCount, 5, 'Check call count to method addLayer');\n      assert.equal(getModelLeafletObjSpy.callCount, 1, 'Check call count to method _getModelLeafletObject');\n      assert.equal(getModelLeafletObjSpy.args[0][0], '1', 'Check call first arg to method _getModelLeafletObject');\n      assert.equal(getModelLayerFeatureSpy.callCount, 1, 'Check call count to method _getModelLayerFeature');\n      assert.equal(getModelLayerFeatureSpy.args[0][0], '1', 'Check call first arg to method _getModelLayerFeature');\n      assert.deepEqual(getModelLayerFeatureSpy.args[0][1], ['1', '2'], 'Check call second arg to method _getModelLayerFeature');\n      done();\n      getModelLeafletObjSpy.restore();\n      getModelLayerFeatureSpy.restore();\n      mapAddSpy.restore();\n    });\n  });\n\n  (0, _qunit.test)('Test to removeLayers to map (visibility = false)', function (assert) {\n    //Arrange\n    assert.expect(7);\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n    var done = assert.async(1);\n    map.addLayer(leafletObject);\n    map.addLayer(leafletObject._labelsLayer);\n    var subject = mapApiMixinObject.create({\n      _getModelLeafletObject: function _getModelLeafletObject() {\n        return [layerModel, leafletObject];\n      },\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      _getLayerFeatureId: function _getLayerFeatureId(layer, shape) {\n        return shape.id;\n      },\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve();\n      }\n    });\n    var getModelLeafletObjSpy = _sinon['default'].spy(subject, '_getModelLeafletObject');\n    var getModelLayerFeatureSpy = _sinon['default'].spy(subject, '_getModelLayerFeature');\n    var mapRemoveSpy = _sinon['default'].spy(map, 'removeLayer');\n\n    //Act\n    var result = subject._setVisibilityObjects('1', ['1', '2'], false);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Equals result = Promise');\n    result.then(function (res) {\n      assert.equal(res, 'sucsess', 'Check result message');\n      assert.equal(Object.values(map._layers).length, 5, 'Check count layers on Map');\n      assert.equal(mapRemoveSpy.callCount, 4, 'Check call count to method removeLayer');\n      assert.equal(getModelLeafletObjSpy.callCount, 1, 'Check call count to method _getModelLeafletObject');\n      assert.equal(getModelLeafletObjSpy.args[0][0], '1', 'Check call first arg to method _getModelLeafletObject');\n      assert.equal(getModelLayerFeatureSpy.callCount, 0, 'Check call count to method _getModelLayerFeature');\n      done();\n      getModelLeafletObjSpy.restore();\n      getModelLayerFeatureSpy.restore();\n      mapRemoveSpy.restore();\n    });\n  });\n\n  (0, _qunit.test)('Test to check fail message', function (assert) {\n    //Arrange\n    assert.expect(6);\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n    var done = assert.async(1);\n    leafletObject.options.continueLoading = true;\n    var subject = mapApiMixinObject.create({\n      _getModelLeafletObject: function _getModelLeafletObject() {\n        return [layerModel, leafletObject];\n      },\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      _getLayerFeatureId: function _getLayerFeatureId(layer, shape) {\n        return shape.id;\n      },\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve();\n      }\n    });\n    var getModelLeafletObjSpy = _sinon['default'].spy(subject, '_getModelLeafletObject');\n    var getModelLayerFeatureSpy = _sinon['default'].spy(subject, '_getModelLayerFeature');\n    var mapRemoveSpy = _sinon['default'].spy(map, 'removeLayer');\n\n    //Act\n    var result = subject._setVisibilityObjects('1', ['1', '2'], true);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Equals result = Promise');\n    result.then(function () {})['catch'](function (res) {\n      assert.equal(res, 'Not working to layer with continueLoading', 'Check result message');\n      assert.equal(Object.values(map._layers).length, 0, 'Check count layers on Map');\n      assert.equal(mapRemoveSpy.callCount, 0, 'Check call count to method removeLayer');\n      assert.equal(getModelLeafletObjSpy.callCount, 1, 'Check call count to method _getModelLeafletObject');\n      assert.equal(getModelLayerFeatureSpy.callCount, 0, 'Check call count to method _getModelLayerFeature');\n      done();\n      leafletObject.options.continueLoading = false;\n      getModelLeafletObjSpy.restore();\n      getModelLayerFeatureSpy.restore();\n      mapRemoveSpy.restore();\n    });\n  });\n\n  (0, _qunit.test)('Map doesn\\'t layers and visibility = false', function (assert) {\n    //Arrange\n    assert.expect(6);\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n    var done = assert.async(1);\n    var subject = mapApiMixinObject.create({\n      _getModelLeafletObject: function _getModelLeafletObject() {\n        return [layerModel, leafletObject];\n      },\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      _getLayerFeatureId: function _getLayerFeatureId(layer, shape) {\n        return shape.id;\n      },\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve();\n      }\n    });\n    var getModelLeafletObjSpy = _sinon['default'].spy(subject, '_getModelLeafletObject');\n    var getModelLayerFeatureSpy = _sinon['default'].spy(subject, '_getModelLayerFeature');\n    var mapRemoveSpy = _sinon['default'].spy(map, 'removeLayer');\n\n    //Act\n    var result = subject._setVisibilityObjects('1', ['1', '2'], false);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Equals result = Promise');\n    result.then(function (res) {\n      assert.equal(res, 'sucsess', 'Check result message');\n      assert.equal(Object.values(map._layers).length, 0, 'Check count layers on Map');\n      assert.equal(mapRemoveSpy.callCount, 4, 'Check call count to method removeLayer');\n      assert.equal(getModelLeafletObjSpy.callCount, 1, 'Check call count to method _getModelLeafletObject');\n      assert.equal(getModelLayerFeatureSpy.callCount, 0, 'Check call count to method _getModelLayerFeature');\n      done();\n      getModelLeafletObjSpy.restore();\n      getModelLayerFeatureSpy.restore();\n      mapRemoveSpy.restore();\n    });\n  });\n\n  (0, _qunit.test)('Map doesn\\'t layers and visibility = false', function (assert) {\n    //Arrange\n    assert.expect(9);\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n    map.addLayer(leafletObject);\n    map.addLayer(leafletObject._labelsLayer);\n    var done = assert.async(1);\n    var subject = mapApiMixinObject.create({\n      _getModelLeafletObject: function _getModelLeafletObject() {\n        return [layerModel, leafletObject];\n      },\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      _getLayerFeatureId: function _getLayerFeatureId(layer, shape) {\n        return shape.id;\n      },\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve();\n      }\n    });\n    var getModelLeafletObjSpy = _sinon['default'].spy(subject, '_getModelLeafletObject');\n    var getModelLayerFeatureSpy = _sinon['default'].spy(subject, '_getModelLayerFeature');\n    var mapAddSpy = _sinon['default'].spy(map, 'addLayer');\n\n    //Act\n    var result = subject._setVisibilityObjects('1', ['1', '2'], true);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Equals result = Promise');\n    result.then(function (res) {\n      assert.equal(res, 'sucsess', 'Check result message');\n      assert.equal(Object.values(map._layers).length, 9, 'Check count layers on Map');\n      assert.equal(mapAddSpy.callCount, 4, 'Check call count to method addLayer');\n      assert.equal(getModelLeafletObjSpy.callCount, 1, 'Check call count to method _getModelLeafletObject');\n      assert.equal(getModelLeafletObjSpy.args[0][0], '1', 'Check call first arg to method _getModelLeafletObject');\n      assert.equal(getModelLayerFeatureSpy.callCount, 1, 'Check call count to method _getModelLayerFeature');\n      assert.equal(getModelLayerFeatureSpy.args[0][0], '1', 'Check call first arg to method _getModelLayerFeature');\n      assert.deepEqual(getModelLayerFeatureSpy.args[0][1], ['1', '2'], 'Check call second arg to method _getModelLayerFeature');\n      done();\n      getModelLeafletObjSpy.restore();\n      getModelLayerFeatureSpy.restore();\n      mapAddSpy.restore();\n    });\n  });\n\n  (0, _qunit.test)('Test to check success message \\'showExisting\\'', function (assert) {\n    //Arrange\n    assert.expect(9);\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n    var done = assert.async(1);\n    leafletObject.options.showExisting = true;\n    var subject = mapApiMixinObject.create({\n      _getModelLeafletObject: function _getModelLeafletObject() {\n        return [layerModel, leafletObject];\n      },\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      _getLayerFeatureId: function _getLayerFeatureId(layer, shape) {\n        return shape.id;\n      },\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve();\n      }\n    });\n    var getModelLeafletObjSpy = _sinon['default'].spy(subject, '_getModelLeafletObject');\n    var getModelLayerFeatureSpy = _sinon['default'].spy(subject, '_getModelLayerFeature');\n    var mapAddSpy = _sinon['default'].spy(map, 'addLayer');\n\n    //Act\n    var result = subject._setVisibilityObjects('1', ['1', '2'], true);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise, 'Equals result = Promise');\n    result.then(function (res) {\n      assert.equal(res, 'sucsess', 'Check result message');\n      assert.equal(Object.values(map._layers).length, 5, 'Check count layers on Map');\n      assert.equal(mapAddSpy.callCount, 5, 'Check call count to method addLayer');\n      assert.equal(getModelLeafletObjSpy.callCount, 1, 'Check call count to method _getModelLeafletObject');\n      assert.equal(getModelLeafletObjSpy.args[0][0], '1', 'Check call first arg to method _getModelLeafletObject');\n      assert.equal(getModelLayerFeatureSpy.callCount, 1, 'Check call count to method _getModelLayerFeature');\n      assert.equal(getModelLayerFeatureSpy.args[0][0], '1', 'Check call first arg to method _getModelLayerFeature');\n      assert.deepEqual(getModelLayerFeatureSpy.args[0][1], ['1', '2'], 'Check call second arg to method _getModelLayerFeature');\n      done();\n      leafletObject.options.showExisting = false;\n      getModelLeafletObjSpy.restore();\n      getModelLayerFeatureSpy.restore();\n      mapAddSpy.restore();\n    });\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-set-visibility-objects-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-set-visibility-objects-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-set-visibility-objects-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-set-visibility-objects-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-set-visibility-objects-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-set-visibility-objects-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'sinon'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi, _sinon) {\n\n  (0, _qunit.module)('Unit | Mixin | flexberry map model api test');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works FlexberryMapModelApiMixin', function (assert) {\n    var subject = mapApiMixinObject.create();\n    assert.ok(subject);\n  });\n\n  (0, _qunit.test)('uploadFile should send post request with fileName and data to backend and return Ember.RSVP.Promise', function (assert) {\n    assert.expect(4);\n    var done = assert.async(1);\n    var server = _sinon['default'].fakeServer.create();\n    server.respondWith('uploadfileresponse');\n    var configStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    configStub.returns({\n      resolveRegistration: function resolveRegistration() {\n        return {\n          'APP': {\n            'backendUrl': 'stubbackend'\n          }\n        };\n      }\n    });\n\n    var subject = mapApiMixinObject.create();\n    var payload = { 'name': 'testFile' };\n\n    var result = subject.uploadFile(payload);\n    server.respond();\n\n    assert.ok(result instanceof _ember['default'].RSVP.Promise);\n    assert.deepEqual(server.requests[0].requestBody, payload);\n    assert.equal(server.requests[0].url, 'stubbackend/controls/FileUploaderHandler.ashx?FileName=testFile');\n    result.then(function (e) {\n      assert.equal(e, 'uploadfileresponse');\n      done();\n    });\n\n    configStub.restore();\n    server.restore();\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-visualedit-test', ['exports', 'ember', 'ember-flexberry-gis/mixins/flexberry-map-model-api-visualedit', 'qunit'], function (exports, _ember, _emberFlexberryGisMixinsFlexberryMapModelApiVisualedit, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | flexberry map model api visualedit');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var FlexberryMapModelApiVisualeditObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApiVisualedit['default']);\n    var subject = FlexberryMapModelApiVisualeditObject.create();\n    assert.ok(subject);\n  });\n\n  (0, _qunit.test)('one', function (assert) {\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-visualedit-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-map-model-api-visualedit-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-map-model-api-visualedit-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-map-model-api-visualedit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-map-model-api-visualedit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-map-model-api-visualedit-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry_map_model_api_show_and_hide_test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'sinon', 'ember-flexberry-gis/layers/-private/vector'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi, _sinon, _emberFlexberryGisLayersPrivateVector) {\n\n  (0, _qunit.module)('Unit | Mixin | test api show and hide layers');\n\n  var arrayFindBy = function arrayFindBy(prop, value) {\n    return this.filter(function (elem) {\n      if (elem.hasOwnProperty(prop)) {\n        return elem[prop] === value;\n      }\n    })[0];\n  };\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  var _labelsLayer = L.featureGroup();\n  var leafletObject = L.featureGroup();\n  leafletObject.options = {\n    showExisting: false,\n    continueLoading: false\n  };\n  leafletObject._labelsLayer = _labelsLayer;\n  var firstTestLayer = L.polygon([[1, 2], [4, 2], [4, 4], [1, 2]]).addTo(leafletObject);\n  firstTestLayer.id = '1';\n  var secondTestLayer = L.polygon([[10, 20], [40, 20], [40, 40], [10, 20]]).addTo(leafletObject);\n  secondTestLayer.id = '2';\n  var thirdTestLayer = L.polygon([[0.1, 0.2], [0.4, 0.2], [0.4, 0.4], [0.1, 0.2]]).addTo(leafletObject);\n  thirdTestLayer.id = '3';\n  var firstTestLabelLayer = L.marker([1, 2]).addTo(_labelsLayer);\n  firstTestLabelLayer.id = '1';\n  var secondTestLabelLayer = L.marker([40, 20]).addTo(_labelsLayer);\n  secondTestLabelLayer.id = '2';\n  var thirdTestLabelLayer = L.marker([20, 40]).addTo(_labelsLayer);\n  thirdTestLabelLayer.id = '3';\n\n  var layer1 = _ember['default'].Object.create({\n    id: '1',\n    visibility: false,\n    _leafletObject: leafletObject,\n    settingsAsObject: {\n      labelSettings: {\n        signMapObjects: true\n      }\n    }\n  });\n  var layer2 = _ember['default'].Object.create({\n    id: '2',\n    visibility: false,\n    _leafletObject: leafletObject,\n    settingsAsObject: {\n      labelSettings: {\n        signMapObjects: true\n      }\n    }\n  });\n  var maplayers = _ember['default'].A([layer1, layer2]);\n\n  (0, _qunit.test)('test method showLayers with continueLoading = false', function (assert) {\n    //Arrange\n    assert.expect(6);\n    var done = assert.async(1);\n\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n\n    var subject = mapApiMixinObject.create({\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      mapLayer: maplayers\n    });\n\n    leafletObject.options.continueLoading = false;\n    var leafletMapFireStub = _sinon['default'].stub(map, 'fire');\n    leafletMapFireStub.returns(_ember['default'].RSVP.resolve());\n    var findByStub = _sinon['default'].stub(subject.mapLayer, 'findBy', arrayFindBy);\n\n    //Act\n    var result = subject.showLayers(['1']);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise);\n    result.then(function (res) {\n      assert.equal(res, 'success');\n      assert.equal(findByStub.callCount, 1);\n      assert.equal(findByStub.args[0][0], 'id');\n      assert.equal(findByStub.args[0][1], '1');\n      assert.equal(leafletMapFireStub.callCount, 1);\n      done();\n      leafletMapFireStub.restore();\n      findByStub.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method showLayers with continueLoading = true', function (assert) {\n    //Arrange\n    assert.expect(7);\n    var done = assert.async(1);\n\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n\n    var subject = mapApiMixinObject.create({\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      mapLayer: maplayers\n    });\n\n    leafletObject.options.continueLoading = true;\n    var leafletMapFireStub = _sinon['default'].stub(map, 'fire');\n    leafletMapFireStub.returns(_ember['default'].RSVP.resolve());\n    var findByStub = _sinon['default'].stub(subject.mapLayer, 'findBy', arrayFindBy);\n\n    //Act\n    var result = subject.showLayers(['1']);\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise);\n    result.then(function (res) {\n      assert.equal(res, 'success');\n      assert.equal(findByStub.callCount, 1);\n      assert.equal(findByStub.args[0][0], 'id');\n      assert.equal(findByStub.args[0][1], '1');\n      assert.equal(leafletMapFireStub.callCount, 1);\n      assert.equal(leafletMapFireStub.args[0][0], 'flexberry-map:moveend');\n      done();\n      leafletMapFireStub.restore();\n      findByStub.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method showAllLayerObjects with continueLoading = false', function (assert) {\n    //Arrange\n    assert.expect(13);\n    var done = assert.async(1);\n\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n\n    var subject = mapApiMixinObject.create({\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        leafletObject.addLayer(firstTestLayer);\n        leafletObject.addLayer(secondTestLayer);\n        leafletObject.addLayer(thirdTestLayer);\n        return _ember['default'].RSVP.resolve([null, null, [firstTestLayer, secondTestLayer, thirdTestLayer]]);\n      },\n      mapLayer: maplayers\n    });\n    leafletObject.options.showExisting = false;\n    leafletObject.options.continueLoading = false;\n    var getModelLayerFeatureSpy = _sinon['default'].spy(subject, '_getModelLayerFeature');\n    var leafletMapFireStub = _sinon['default'].stub(map, 'fire');\n    leafletMapFireStub.withArgs('flexberry-map:moveend').returns(_ember['default'].RSVP.resolve());\n    var mapAddSpy = _sinon['default'].spy(map, 'addLayer');\n    var mapRemoveSpy = _sinon['default'].spy(map, 'removeLayer');\n    var leafletObjectClearLayersSpy = _sinon['default'].spy(leafletObject, 'clearLayers');\n    var findByStub = _sinon['default'].stub(subject.mapLayer, 'findBy', arrayFindBy);\n\n    //Act\n    var result = subject.showAllLayerObjects('1');\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise);\n    result.then(function (res) {\n      assert.equal(res, 'success');\n      assert.equal(getModelLayerFeatureSpy.callCount, 1);\n      assert.equal(getModelLayerFeatureSpy.args[0][0], '1');\n      assert.deepEqual(getModelLayerFeatureSpy.args[0][1], null);\n      assert.equal(leafletMapFireStub.callCount, 8);\n      assert.notEqual(leafletMapFireStub.args[0][0], 'flexberry-map:moveend');\n      assert.equal(mapAddSpy.callCount, 8);\n      assert.equal(mapRemoveSpy.callCount, 0);\n      assert.equal(findByStub.callCount, 1);\n      assert.equal(findByStub.args[0][0], 'id');\n      assert.equal(findByStub.args[0][1], '1');\n      assert.equal(leafletObjectClearLayersSpy.callCount, 1);\n      done();\n      getModelLayerFeatureSpy.restore();\n      leafletMapFireStub.restore();\n      mapAddSpy.restore();\n      mapRemoveSpy.restore();\n      leafletObjectClearLayersSpy.restore();\n      findByStub.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method showAllLayerObjects with continueLoading = true', function (assert) {\n    //Arrange\n    assert.expect(11);\n    var done = assert.async(1);\n\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n\n    var subject = mapApiMixinObject.create({\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        leafletObject.addLayer(firstTestLayer);\n        leafletObject.addLayer(secondTestLayer);\n        leafletObject.addLayer(thirdTestLayer);\n        return _ember['default'].RSVP.resolve([null, null, [firstTestLayer, secondTestLayer, thirdTestLayer]]);\n      },\n      mapLayer: maplayers\n    });\n\n    leafletObject.options.continueLoading = true;\n    var getModelLayerFeatureSpy = _sinon['default'].spy(subject, '_getModelLayerFeature');\n    var leafletMapFireStub = _sinon['default'].stub(map, 'fire');\n    leafletMapFireStub.withArgs('flexberry-map:moveend').returns(_ember['default'].RSVP.resolve());\n    var mapAddSpy = _sinon['default'].spy(map, 'addLayer');\n    var mapRemoveSpy = _sinon['default'].spy(map, 'removeLayer');\n    var leafletObjectClearLayersSpy = _sinon['default'].spy(leafletObject, 'clearLayers');\n    var findByStub = _sinon['default'].stub(subject.mapLayer, 'findBy', arrayFindBy);\n\n    //Act\n    var result = subject.showAllLayerObjects('1');\n\n    //Assert\n    assert.ok(result instanceof _ember['default'].RSVP.Promise);\n    result.then(function (res) {\n      assert.equal(res, 'success');\n      assert.equal(getModelLayerFeatureSpy.callCount, 0);\n      assert.equal(leafletMapFireStub.callCount, 9);\n      assert.equal(leafletMapFireStub.args[0][0], 'flexberry-map:moveend');\n      assert.equal(mapAddSpy.callCount, 8);\n      assert.equal(mapRemoveSpy.callCount, 0);\n      assert.equal(findByStub.callCount, 1);\n      assert.equal(findByStub.args[0][0], 'id');\n      assert.equal(findByStub.args[0][1], '1');\n      assert.equal(leafletObjectClearLayersSpy.callCount, 0);\n      done();\n      getModelLayerFeatureSpy.restore();\n      leafletMapFireStub.restore();\n      mapAddSpy.restore();\n      mapRemoveSpy.restore();\n      leafletObjectClearLayersSpy.restore();\n      findByStub.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method hideAllLayerObjects', function (assert) {\n    //Arrange\n    assert.expect(4);\n\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n\n    map.addLayer(firstTestLayer);\n    map.addLayer(secondTestLayer);\n    map.addLayer(thirdTestLayer);\n    map.addLayer(_labelsLayer);\n\n    var subject = mapApiMixinObject.create({\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      mapLayer: maplayers\n    });\n\n    var mapRemoveSpy = _sinon['default'].spy(map, 'removeLayer');\n    var findByStub = _sinon['default'].stub(subject.mapLayer, 'findBy', arrayFindBy);\n\n    //Act\n    subject.hideAllLayerObjects('1');\n\n    //Assert\n    assert.equal(mapRemoveSpy.callCount, 7);\n    assert.equal(findByStub.callCount, 1);\n    assert.equal(findByStub.args[0][0], 'id');\n    assert.equal(findByStub.args[0][1], '1');\n    mapRemoveSpy.restore();\n    findByStub.restore();\n  });\n\n  (0, _qunit.test)('test method hideLayers with continueLoading = false', function (assert) {\n    //Arrange\n    assert.expect(5);\n\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n\n    var subject = mapApiMixinObject.create({\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve();\n      },\n      mapLayer: maplayers\n    });\n\n    leafletObject.options.continueLoading = false;\n    var getModelLayerFeatureSpy = _sinon['default'].spy(subject, '_getModelLayerFeature');\n    var leafletMapFireStub = _sinon['default'].stub(map, 'fire');\n    leafletMapFireStub.returns(_ember['default'].RSVP.resolve());\n    var findByStub = _sinon['default'].stub(subject.mapLayer, 'findBy', arrayFindBy);\n\n    //Act\n    subject.hideLayers(['1']);\n\n    //Assert\n    assert.equal(getModelLayerFeatureSpy.callCount, 0);\n    assert.equal(leafletMapFireStub.callCount, 0);\n    assert.equal(findByStub.callCount, 1);\n    assert.equal(findByStub.args[0][0], 'id');\n    assert.equal(findByStub.args[0][1], '1');\n    getModelLayerFeatureSpy.restore();\n    leafletMapFireStub.restore();\n    findByStub.restore();\n  });\n\n  (0, _qunit.test)('test method hideLayers with continueLoading = true', function (assert) {\n    //Arrange\n    assert.expect(5);\n\n    var map = L.map(document.createElement('div'), {\n      center: [51.505, -0.09],\n      zoom: 13\n    });\n\n    var subject = mapApiMixinObject.create({\n      _getTypeLayer: function _getTypeLayer() {\n        return new _emberFlexberryGisLayersPrivateVector['default']();\n      },\n      mapApi: {\n        getFromApi: function getFromApi() {\n          return map;\n        }\n      },\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve();\n      },\n      mapLayer: maplayers\n    });\n\n    leafletObject.options.continueLoading = true;\n    var getModelLayerFeatureSpy = _sinon['default'].spy(subject, '_getModelLayerFeature');\n    var leafletMapFireStub = _sinon['default'].stub(map, 'fire');\n    leafletMapFireStub.returns(_ember['default'].RSVP.resolve());\n    var findByStub = _sinon['default'].stub(subject.mapLayer, 'findBy', arrayFindBy);\n\n    //Act\n    subject.hideLayers(['1']);\n\n    //Assert\n    assert.equal(getModelLayerFeatureSpy.callCount, 0);\n    assert.equal(leafletMapFireStub.callCount, 0);\n    assert.equal(findByStub.callCount, 1);\n    assert.equal(findByStub.args[0][0], 'id');\n    assert.equal(findByStub.args[0][1], '1');\n    getModelLayerFeatureSpy.restore();\n    leafletMapFireStub.restore();\n    findByStub.restore();\n  });\n});","define('dummy/tests/unit/mixins/flexberry_map_model_api_show_and_hide_test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry_map_model_api_show_and_hide_test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry_map_model_api_show_and_hide_test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry_map_model_api_show_and_hide_test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry_map_model_api_show_and_hide_test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry_map_model_api_show_and_hide_test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/leaflet-events-test', ['exports', 'ember', 'ember-flexberry-gis/mixins/leaflet-events', 'qunit', 'sinon'], function (exports, _ember, _emberFlexberryGisMixinsLeafletEvents, _qunit, _sinon) {\n\n  var MixinImplementation = _ember['default'].Object.extend(_emberFlexberryGisMixinsLeafletEvents['default']);\n\n  (0, _qunit.module)('Unit | Mixin | leaflet events');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var subject = MixinImplementation.create();\n    assert.ok(subject);\n  });\n\n  (0, _qunit.test)('usedLeafletEvents should return events with exists methods', function (assert) {\n    var subject = MixinImplementation.create({\n      leafletEvents: ['testEvent1', 'testEvent2'],\n      testEvent1: function testEvent1() {}\n    });\n\n    assert.deepEqual(subject.get('usedLeafletEvents'), ['testEvent1']);\n  });\n\n  (0, _qunit.test)('_addEventListeners should create eventHandles for used events', function (assert) {\n\n    var addEventListener = _sinon['default'].spy();\n\n    var subject = MixinImplementation.create({\n      usedLeafletEvents: ['testEvent1', 'testEvent2'],\n      _leafletObject: { addEventListener: addEventListener }\n    });\n\n    subject._addEventListeners();\n\n    assert.ok(addEventListener.calledTwice);\n    assert.ok(subject.get('_eventHandlers').hasOwnProperty('testEvent1'));\n    assert.ok(subject.get('_eventHandlers').hasOwnProperty('testEvent2'));\n  });\n\n  (0, _qunit.test)('_removeEventListener shoud remove all used eventHandles', function (assert) {\n    var removeEventListener = _sinon['default'].spy();\n\n    var subject = MixinImplementation.create({\n      usedLeafletEvents: ['testEvent1', 'testEvent2'],\n      _eventHandlers: {\n        testEvent1: '',\n        testEvent2: ''\n      },\n      _leafletObject: { removeEventListener: removeEventListener }\n    });\n\n    subject._removeEventListeners();\n\n    assert.ok(removeEventListener.calledTwice);\n    assert.notOk(subject.get('_eventHandlers').hasOwnProperty('testEvent1'));\n    assert.notOk(subject.get('_eventHandlers').hasOwnProperty('testEvent2'));\n    assert.deepEqual(subject.get('_eventHandlers'), {});\n  });\n});","define('dummy/tests/unit/mixins/leaflet-events-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/leaflet-events-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/leaflet-events-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/leaflet-events-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/leaflet-events-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/leaflet-events-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/leaflet-options-test', ['exports', 'ember', 'ember-flexberry-gis/mixins/leaflet-options', 'qunit'], function (exports, _ember, _emberFlexberryGisMixinsLeafletOptions, _qunit) {\n\n  var MixinImplementation = _ember['default'].Object.extend(_emberFlexberryGisMixinsLeafletOptions['default']);\n\n  (0, _qunit.module)('Unit | Mixin | leaflet options');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var subject = MixinImplementation.create();\n    assert.ok(subject);\n  });\n\n  (0, _qunit.test)('get(options) should return object with specified properties', function (assert) {\n    var subject = MixinImplementation.create({\n      leafletOptions: ['testOption1', 'testOption2'],\n      testOption1: '222',\n      testOption2: 333\n    });\n\n    var options = subject.get('options');\n\n    assert.deepEqual(options, {\n      testOption1: '222',\n      testOption2: 333\n    });\n  });\n});","define('dummy/tests/unit/mixins/leaflet-options-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/leaflet-options-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/leaflet-options-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/leaflet-options-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/leaflet-options-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/leaflet-options-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/leaflet-properties-test', ['exports', 'ember', 'ember-flexberry-gis/mixins/leaflet-properties', 'qunit', 'sinon'], function (exports, _ember, _emberFlexberryGisMixinsLeafletProperties, _qunit, _sinon) {\n\n  (0, _qunit.module)('Unit | Mixin | leaflet properties');\n\n  var MixinImplementation = _ember['default'].Object.extend(_emberFlexberryGisMixinsLeafletProperties['default']);\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var subject = MixinImplementation.create();\n    assert.ok(subject);\n  });\n\n  (0, _qunit.test)('_addObservers should call this.addObserver for specified properties', function (assert) {\n    var property = 'testProperty';\n    var subject = MixinImplementation.create({\n      leafletProperties: [property]\n    });\n\n    var addObserver = _sinon['default'].spy(subject, 'addObserver');\n\n    subject._addObservers();\n\n    assert.ok(addObserver.calledWith(property));\n  });\n\n  (0, _qunit.test)('after addObserver property changed should fire specified layer function', function (assert) {\n    var callTestProperty = _sinon['default'].spy();\n\n    var subject = MixinImplementation.create({\n      leafletProperties: ['testProperty:callTestProperty'],\n      _leafletObject: { callTestProperty: callTestProperty }\n    });\n\n    subject._addObservers();\n    _ember['default'].run(function () {\n      subject.set('testProperty', 'property');\n    });\n\n    assert.ok(callTestProperty.called);\n  });\n\n  (0, _qunit.test)('after addObserver property changed should fire default setter for property of layer', function (assert) {\n    var setTestProperty = _sinon['default'].spy();\n\n    var subject = MixinImplementation.create({\n      leafletProperties: ['testProperty'],\n      _leafletObject: { setTestProperty: setTestProperty }\n    });\n\n    subject._addObservers();\n    _ember['default'].run(function () {\n      subject.set('testProperty', 'property');\n    });\n\n    assert.ok(setTestProperty.called);\n  });\n\n  (0, _qunit.test)('after addObserver property changed should throws if layer property setter is missing', function (assert) {\n    var subject = MixinImplementation.create({\n      leafletProperties: ['testProperty'],\n      _leafletObject: {}\n    });\n\n    subject._addObservers();\n\n    assert.throws(function () {\n      subject.set('testProperty', 'property');\n    });\n  });\n});","define('dummy/tests/unit/mixins/leaflet-properties-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/leaflet-properties-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/leaflet-properties-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/leaflet-properties-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/leaflet-properties-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/leaflet-properties-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/map-model-api-comparelayers-test', ['exports', 'ember', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'qunit', 'npm:clipper-lib'], function (exports, _ember, _emberFlexberryGisMixinsFlexberryMapModelApi, _qunit, _npmClipperLib) {\n\n  (0, _qunit.module)('Unit | Mixin | map model api comparelayers');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  var feature1 = {\n    type: 'MultiPolygon',\n    properties: {},\n    coordinates: [[[[3, 3], [3, 7], [8, 7], [8, 3], [3, 3]]]]\n  };\n\n  var feature2 = {\n    type: 'MultiPolygon',\n    properties: {},\n    coordinates: [[[[6, 5], [6, 9], [10, 9], [10, 5], [6, 5]]]]\n  };\n\n  var feature3 = {\n    type: 'MultiPolygon',\n    properties: {},\n    coordinates: [[[[4, 4], [4, 5], [5, 5], [5, 4], [4, 4]]]]\n  };\n\n  var feature4 = {\n    type: 'MultiPolygon',\n    properties: {},\n    coordinates: [[[[10, 3], [9, 3], [9, 2], [10, 2], [10, 3]]]]\n  };\n\n  var crsFactory32640 = {\n    code: 'EPSG:32640',\n    definition: '+proj=utm +zone=40 +datum=WGS84 +units=m +no_defs',\n    create: function create() {\n      var crs = L.extend({}, new L.Proj.CRS(this.code, this.definition), {\n        scale: function scale(zoom) {\n          return 256 * Math.pow(2, zoom);\n        },\n        zoom: function zoom(scale) {\n          return Math.log(scale / 256) / Math.LN2;\n        }\n      });\n      return crs;\n    }\n  };\n  var crs32640 = crsFactory32640.create();\n\n  var geoJson32640 = {\n    type: 'MultiPolygon',\n    properties: {},\n    coordinates: [[[[514059.321485393, 6507392.17766284], [513865.509562311, 6507418.6567982], [513839.790201802, 6507279.05179395], [514059.321485393, 6507392.17766284]]]]\n  };\n\n  (0, _qunit.test)('_coordsToPoints should return array of points to the power of 8', function (assert) {\n    assert.expect(1);\n\n    var featureLayer = L.geoJSON(geoJson32640).getLayers()[0].getLatLngs();\n\n    var subject = mapApiMixinObject.create();\n    var result = subject._coordsToPoints(featureLayer);\n\n    assert.deepEqual(result, [[[{ 'X': 51405932148539, 'Y': 650739217766284 }, { 'X': 51386550956231, 'Y': 650741865679820 }, { 'X': 51383979020180, 'Y': 650727905179395 }]]]);\n  });\n\n  (0, _qunit.test)('_pointsToCoords should return array of coordinates', function (assert) {\n    assert.expect(1);\n\n    var arr = [[[new _npmClipperLib['default'].IntPoint(51405932148539, 650739217766284), new _npmClipperLib['default'].IntPoint(51386550956231, 650741865679820), new _npmClipperLib['default'].IntPoint(51383979020180, 650727905179395)]]];\n\n    var subject = mapApiMixinObject.create();\n    var result = subject._pointsToCoords(arr);\n\n    assert.deepEqual(result, [[[[514059.32148539, 6507392.17766284], [513865.50956231, 6507418.65679820], [513839.79020180, 6507279.05179395], [514059.32148539, 6507392.17766284]]]]);\n  });\n\n  (0, _qunit.test)('_addToArrayPointsAndFeature should return points and features', function (assert) {\n    assert.expect(2);\n    var done = assert.async(1);\n\n    var featureLayer = L.geoJSON(geoJson32640).getLayers()[0];\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve(new _ember['default'].RSVP.resolve([null, { options: { crs: crs32640 } }, [featureLayer]]));\n      }\n    });\n\n    var result = subject._addToArrayPointsAndFeature();\n\n    result.then(function (arrayPointsAndFeature) {\n      assert.deepEqual(arrayPointsAndFeature.arrPoints[0], [[[{ 'X': 51405932148539, 'Y': 650739217766284 }, { 'X': 51386550956231, 'Y': 650741865679820 }, { 'X': 51383979020180, 'Y': 650727905179395 }]]]);\n      assert.ok(arrayPointsAndFeature.features[0]);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('differenceLayers should return the difference of layers', function (assert) {\n    assert.expect(4);\n    var done = assert.async(1);\n\n    var featureLayer1 = L.geoJSON(feature1).getLayers()[0];\n    var featureLayer2 = L.geoJSON(feature2).getLayers()[0];\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature(layer) {\n        if (layer === '1') {\n          return _ember['default'].RSVP.resolve(new _ember['default'].RSVP.resolve([null, { options: { crs: crs32640 } }, [featureLayer1]]));\n        } else {\n          return _ember['default'].RSVP.resolve(new _ember['default'].RSVP.resolve([null, { options: { crs: crs32640 } }, [featureLayer2]]));\n        }\n      },\n      _getModelLeafletObject: function _getModelLeafletObject() {\n        return [null, { options: { crs: crs32640 } }];\n      }\n    });\n\n    var result = subject.differenceLayers('1', '2');\n\n    result.then(function (diff) {\n      assert.deepEqual(diff.diffFeatures[0].feature, {\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [[[8, 5], [6, 5], [6, 7], [3, 7], [3, 3], [8, 3], [8, 5]]]\n        }\n      });\n      assert.equal(diff.diffFeatures[0].area.toFixed(2), 16.00);\n      assert.ok(diff.layerA);\n      assert.ok(diff.layerB);\n      done();\n    });\n  });\n\n  (0, _qunit.test)('differenceLayers should return NOT difference', function (assert) {\n    assert.expect(1);\n    var done = assert.async(1);\n\n    var featureLayer1 = L.geoJSON(feature1).getLayers()[0];\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature(layer) {\n        if (layer === '1') {\n          return _ember['default'].RSVP.resolve(new _ember['default'].RSVP.resolve([null, { options: { crs: crs32640 } }, [featureLayer1]]));\n        } else {\n          return _ember['default'].RSVP.resolve(new _ember['default'].RSVP.resolve([null, { options: { crs: crs32640 } }, [featureLayer1]]));\n        }\n      },\n      _getModelLeafletObject: function _getModelLeafletObject() {\n        return [null, { options: { crs: crs32640 } }];\n      }\n    });\n\n    var result = subject.differenceLayers('1', '2');\n\n    result.then(function (diff) {\n      assert.equal(diff, 'The difference is not found');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('compareLayers should return array of objects', function (assert) {\n    assert.expect(22);\n    var done = assert.async(4);\n\n    var featureLayer1 = L.geoJSON(feature1).getLayers()[0];\n    featureLayer1.options.crs = crs32640;\n    featureLayer1.feature.properties.primarykey = '001';\n    var featureLayer3 = L.geoJSON(feature3).getLayers()[0];\n    featureLayer3.options.crs = crs32640;\n    featureLayer3.feature.properties.primarykey = '003';\n    var featureLayer4 = L.geoJSON(feature4).getLayers()[0];\n    featureLayer4.options.crs = crs32640;\n    featureLayer4.feature.properties.primarykey = '004';\n\n    var featureLayer2 = L.geoJSON(feature2).getLayers()[0];\n    featureLayer2.options.crs = crs32640;\n    featureLayer2.feature.properties.primarykey = '002';\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature(layer) {\n        if (layer === '1') {\n          return _ember['default'].RSVP.resolve(new _ember['default'].RSVP.resolve([null, { options: { crs: crs32640 } }, [featureLayer1]]));\n        } else if ('2') {\n          return _ember['default'].RSVP.resolve(new _ember['default'].RSVP.resolve([null, { options: { crs: crs32640 } }, [featureLayer2, featureLayer3, featureLayer4]]));\n        }\n      },\n      _getModelLeafletObject: function _getModelLeafletObject() {\n        return [null, { options: { crs: crs32640 } }];\n      }\n    });\n\n    var resIntersects = subject.compareLayers('1', '2', 'intersects', false);\n    var resContains = subject.compareLayers('1', '2', 'contains', false);\n    var resNotIntersects = subject.compareLayers('1', '2', 'notIntersects', false);\n    var resNotDiff = subject.compareLayers('1', '1', 'intersects', false);\n\n    resIntersects.then(function (result) {\n      assert.equal(result.length, 2);\n      assert.deepEqual(result[0].objectDifference.feature, {\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [[[8, 5], [6, 5], [6, 7], [3, 7], [3, 3], [8, 3], [8, 5]]]\n        }\n      });\n      assert.equal(result[0].areaDifference.toFixed(2), 16.00);\n      assert.equal(result[0].id, '002');\n\n      assert.deepEqual(result[1].objectDifference.feature, {\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [[[4, 4], [4, 5], [5, 5], [5, 4], [4, 4]]]\n        }\n      });\n      assert.equal(result[1].areaDifference.toFixed(2), 1.00);\n      assert.equal(result[1].hasOwnProperty('id'), false);\n      done();\n    });\n\n    resContains.then(function (result) {\n      assert.equal(result.length, 2);\n      assert.deepEqual(result[0].objectDifference.feature, {\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [[[8, 5], [6, 5], [6, 7], [3, 7], [3, 3], [8, 3], [8, 5]]]\n        }\n      });\n      assert.equal(result[0].areaDifference.toFixed(2), 16.00);\n      assert.equal(result[0].hasOwnProperty('id'), false);\n\n      assert.deepEqual(result[1].objectDifference.feature, {\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [[[4, 4], [4, 5], [5, 5], [5, 4], [4, 4]]]\n        }\n      });\n      assert.equal(result[1].areaDifference.toFixed(2), 1.00);\n      assert.equal(result[1].id, '003');\n      done();\n    });\n\n    resNotIntersects.then(function (result) {\n      assert.equal(result.length, 2);\n      assert.deepEqual(result[0].objectDifference.feature, {\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [[[10, 9], [6, 9], [6, 7], [8, 7], [8, 5], [10, 5], [10, 9]]]\n        }\n      });\n      assert.equal(result[0].areaDifference.toFixed(2), 12.00);\n      assert.equal(result[0].id, '002');\n\n      assert.deepEqual(result[1].objectDifference.feature, {\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [[[10, 3], [9, 3], [9, 2], [10, 2], [10, 3]]]\n        }\n      });\n      assert.equal(result[1].areaDifference.toFixed(2), 1.00);\n      assert.equal(result[1].id, '004');\n      done();\n    });\n\n    resNotDiff['catch'](function (result) {\n      assert.equal(result, 'The difference is not found');\n      done();\n    });\n  });\n});","define('dummy/tests/unit/mixins/map-model-api-comparelayers-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/map-model-api-comparelayers-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/map-model-api-comparelayers-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/map-model-api-comparelayers-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/map-model-api-comparelayers-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/map-model-api-comparelayers-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/map-model-api-getlayerobjectoptions-test', ['exports', 'ember', 'qunit', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326', 'sinon'], function (exports, _ember, _qunit, _emberFlexberryGisMixinsFlexberryMapModelApi, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326, _sinon) {\n\n  (0, _qunit.module)('Unit | Mixin | flexberry-map-model-api getLayerObjectOptions');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  var crsFactory32640 = {\n    code: 'EPSG:32640',\n    definition: '+proj=utm +zone=40 +datum=WGS84 +units=m +no_defs',\n    create: function create() {\n      var crs = L.extend({}, new L.Proj.CRS(this.code, this.definition), {\n        scale: function scale(zoom) {\n          return 256 * Math.pow(2, zoom);\n        },\n        zoom: function zoom(scale) {\n          return Math.log(scale / 256) / Math.LN2;\n        }\n      });\n      return crs;\n    }\n  };\n\n  var crs32640 = crsFactory32640.create();\n\n  var coordinates32640 = [[[[514059.321485393, 6507392.17766284], [513865.509562311, 6507418.6567982], [513839.790201802, 6507279.05179395], [513740.187971532, 6507317.79141744], [513721.727135932, 6507264.36084561], [513663.282762761, 6507443.48435832], [513802.186924293, 6507539.53170715], [514050.141524955, 6507525.35628219], [514059.321485393, 6507392.17766284]]]];\n\n  var coordinates4326 = [[[[57.24265119051584, 58.706458371940684], [57.23930783675451, 58.70670243628802], [57.23885536193849, 58.705449470295804], [57.23713874882379, 58.705800565222816], [57.23681688374202, 58.705321292241], [57.23581910198846, 58.706931847023135], [57.23822236061096, 58.70779003629061], [57.24250106747296, 58.70765474411314], [57.24265119051584, 58.706458371940684]]]];\n\n  var geoJson32640 = {\n    type: 'Feature',\n    properties: {\n      foo: 'bar'\n    },\n    geometry: {\n      type: 'MultiPolygon',\n      coordinates: coordinates32640\n    }\n  };\n\n  var featureLayer = L.polygon(coordinates4326);\n  featureLayer.feature = geoJson32640;\n  featureLayer.toProjectedGeoJSON = function () {};\n\n  (0, _qunit.test)('getLayerObjectOptions should return properties of feature, projected geometry, and correct area', function (assert) {\n    assert.expect(4);\n    var done = assert.async(1);\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve([null, { options: { crs: crs32640 } }, [featureLayer]]);\n      }\n    });\n\n    var toProjectedGeoJSONStub = _sinon['default'].stub(featureLayer, 'toProjectedGeoJSON');\n    toProjectedGeoJSONStub.returns({\n      type: 'Feature',\n      properties: {\n        foo: 'bar'\n      },\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: coordinates32640\n      }\n    });\n\n    var result = subject.getLayerObjectOptions();\n\n    result.then(function (options) {\n      assert.equal(options.foo, 'bar');\n      assert.equal(options.area.toFixed(2), 61177.16);\n      assert.deepEqual(options.geometry, coordinates32640);\n      assert.ok(toProjectedGeoJSONStub.calledWith(crs32640));\n      toProjectedGeoJSONStub.restore();\n      done();\n    });\n  });\n\n  (0, _qunit.test)('getLayerObjectOptions return projected geometry if specified crsName', function (assert) {\n    assert.expect(2);\n    var done = assert.async(1);\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'],\n          'epsg32640': crsFactory32640\n        };\n      }\n    });\n\n    var toProjectedGeoJSONStub = _sinon['default'].stub(featureLayer, 'toProjectedGeoJSON');\n    toProjectedGeoJSONStub.returns({\n      type: 'Feature',\n      properties: {\n        foo: 'bar'\n      },\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: coordinates32640\n      }\n    });\n\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve([null, { options: { crs: crs32640 } }, [featureLayer]]);\n      }\n    });\n\n    var result = subject.getLayerObjectOptions(null, null, 'EPSG:4326');\n    result.then(function (options) {\n      assert.equal(options.area.toFixed(2), 61177.16);\n      assert.deepEqual(options.geometry, coordinates4326);\n      done();\n      ownerStub.restore();\n      toProjectedGeoJSONStub.restore();\n    });\n  });\n});","define('dummy/tests/unit/mixins/map-model-api-getlayerobjectoptions-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/map-model-api-getlayerobjectoptions-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/map-model-api-getlayerobjectoptions-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/map-model-api-getlayerobjectoptions-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/map-model-api-getlayerobjectoptions-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/map-model-api-getlayerobjectoptions-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/map-model-api-getmergegeometry-test-test', ['exports', 'ember', 'ember-flexberry-gis/mixins/flexberry-map-model-api', 'qunit'], function (exports, _ember, _emberFlexberryGisMixinsFlexberryMapModelApi, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | map model api getmergegeometry test');\n\n  var mapApiMixinObject = _ember['default'].Object.extend(_emberFlexberryGisMixinsFlexberryMapModelApi['default']);\n\n  (0, _qunit.test)('splitObjectIds should return 1 and 3 promisses', function (assert) {\n    var subject = mapApiMixinObject.create({\n      _getModelLayerFeature: function _getModelLayerFeature() {\n        return _ember['default'].RSVP.resolve([null, null, null]);\n      }\n    });\n\n    // 220\n    var result220 = subject.loadingFeaturesByPackages('1', ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']);\n\n    // 20\n    var result20 = subject.loadingFeaturesByPackages('1', ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']);\n\n    assert.equal(result220.length, 3);\n    assert.equal(result20.length, 1);\n  });\n});","define('dummy/tests/unit/mixins/map-model-api-getmergegeometry-test-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/map-model-api-getmergegeometry-test-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/map-model-api-getmergegeometry-test-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/map-model-api-getmergegeometry-test-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/map-model-api-getmergegeometry-test-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/map-model-api-getmergegeometry-test-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-link-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-layer-link', 'Unit | Model | new-platform-flexberry-g-i-s-layer-link', {\n    // Specify the other units that are required for this test.\n    needs: ['model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-link-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/new-platform-flexberry-g-i-s-layer-link-test.js should pass jscs', function () {\n    ok(true, 'unit/models/new-platform-flexberry-g-i-s-layer-link-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-link-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/new-platform-flexberry-g-i-s-layer-link-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-g-i-s-layer-link-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-metadata-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-layer-metadata', 'Unit | Model | new-platform-flexberry-g-i-s-layer-metadata', {\n    // Specify the other units that are required for this test.\n    needs: ['model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-metadata-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/new-platform-flexberry-g-i-s-layer-metadata-test.js should pass jscs', function () {\n    ok(true, 'unit/models/new-platform-flexberry-g-i-s-layer-metadata-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-layer-metadata-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/new-platform-flexberry-g-i-s-layer-metadata-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-g-i-s-layer-metadata-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-metadata-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-link-metadata', 'Unit | Model | new-platform-flexberry-g-i-s-link-metadata', {\n    // Specify the other units that are required for this test.\n    needs: ['model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-metadata-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/new-platform-flexberry-g-i-s-link-metadata-test.js should pass jscs', function () {\n    ok(true, 'unit/models/new-platform-flexberry-g-i-s-link-metadata-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-metadata-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/new-platform-flexberry-g-i-s-link-metadata-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-g-i-s-link-metadata-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-parameter-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-link-parameter', 'Unit | Model | new-platform-flexberry-g-i-s-link-parameter', {\n    // Specify the other units that are required for this test.\n    needs: ['model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-parameter-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/new-platform-flexberry-g-i-s-link-parameter-test.js should pass jscs', function () {\n    ok(true, 'unit/models/new-platform-flexberry-g-i-s-link-parameter-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-link-parameter-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/new-platform-flexberry-g-i-s-link-parameter-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-g-i-s-link-parameter-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-layer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-map-layer', 'Unit | Model | new-platform-flexberry-g-i-s-map-layer', {\n    // Specify the other units that are required for this test.\n    needs: ['model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/new-platform-flexberry-g-i-s-map-layer-test.js should pass jscs', function () {\n    ok(true, 'unit/models/new-platform-flexberry-g-i-s-map-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/new-platform-flexberry-g-i-s-map-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-g-i-s-map-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-object-setting-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-map-object-setting', 'Unit | Model | new-platform-flexberry-g-i-s-map-object-setting', {\n    // Specify the other units that are required for this test.\n    needs: ['model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-object-setting-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/new-platform-flexberry-g-i-s-map-object-setting-test.js should pass jscs', function () {\n    ok(true, 'unit/models/new-platform-flexberry-g-i-s-map-object-setting-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-object-setting-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/new-platform-flexberry-g-i-s-map-object-setting-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-g-i-s-map-object-setting-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-test', ['exports', 'ember-qunit', 'sinon', 'ember', 'ember-flexberry-gis/utils/layer-to-jsts'], function (exports, _emberQunit, _sinon, _ember, _emberFlexberryGisUtilsLayerToJsts) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-map', 'Unit | Model | new-platform-flexberry-g-i-s-map', {\n    // Specify the other units that are required for this test.\n    needs: ['model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata', 'service:map-api', 'config:environment', 'component:flexberry-map']\n  });\n\n  var crsName = 'EPSG:4326';\n  var objWithCrs = {\n    options: {\n      crs: {\n        code: crsName\n      }\n    }\n  };\n  var objA = [{\n    options: {\n      crs: {\n        code: crsName\n      }\n    },\n    feature: {\n      type: 'Feature',\n      id: 'vydel_utverzhdeno_polygon.0017782c-6f34-46b5-ac77-c0a65366c452',\n      geometry_name: 'shape',\n      properties: {\n        id: '141-17',\n        lesnichestvo: 'Закамское',\n        uchastkovoelesnichestvo: 'Чермозское(Чермозское)',\n        nomerkvartala: '141',\n        primarykey: '0017782c-6f34-46b5-ac77-c0a65366c452',\n        area: 10\n      },\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: [[[[55.78205, 58.73614], [55.85209, 58.73935], [55.85690, 58.71903], [55.78205, 58.71476], [55.78205, 58.73614]]]]\n      }\n    }\n  }];\n\n  var objB = [{\n    options: {\n      crs: {\n        code: crsName\n      }\n    },\n    feature: {\n      type: 'Feature',\n      id: 'kvartal_utverzhdeno_polygon.45df35c7-f292-44f8-b328-5fd4be739233',\n      geometry_name: 'shape',\n      properties: {\n        nomer: '41',\n        lesnichestvo: 'Закамское',\n        uchastkovoelesnichestvo: 'Чермозское(Чермозское)',\n        primarykey: '45df35c7-f292-44f8-b328-5fd4be739233',\n        area: 20\n      },\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: [[[[55.80677, 58.72884], [55.83286, 58.73846], [55.83836, 58.72991], [55.80677, 58.72884]]]]\n      }\n    },\n    _latlngs: [[[L.latLng(58.72884, 55.80677), L.latLng(58.73846, 55.83286), L.latLng(58.72991, 55.83836)]]]\n  }];\n\n  var objC = [{\n    options: {\n      crs: {\n        code: crsName\n      }\n    },\n    feature: {\n      type: 'Feature',\n      id: 'kvartal_utverzhdeno_polygon.d633ea1d-eb32-423f-8663-a38abc7ba094',\n      geometry_name: 'shape',\n      properties: {\n        nomer: '42',\n        lesnichestvo: 'Закамское',\n        uchastkovoelesnichestvo: 'Чермозское(Чермозское)',\n        primarykey: 'd633ea1d-eb32-423f-8663-a38abc7ba094',\n        area: 30\n      },\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: [[[[55.97843, 58.73810], [55.01448, 58.73329], [55.98461, 58.72420], [55.97843, 58.73810]]]]\n      }\n    }\n  }];\n\n  var objD = [{\n    options: {\n      crs: {\n        code: crsName\n      }\n    },\n    feature: {\n      type: 'Feature',\n      id: 'kvartal_utverzhdeno_polygon.79fd98d0-52ae-44ae-b616-971768196ad8',\n      geometry_name: 'shape',\n      properties: {\n        nomer: '43',\n        lesnichestvo: 'Закамское',\n        uchastkovoelesnichestvo: 'Чермозское(Чермозское)',\n        primarykey: '79fd98d0-52ae-44ae-b616-971768196ad8',\n        area: 30\n      },\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: [[[[55.85072, 58.68176], [55.88848, 58.67194], [55.84316, 58.65391], [55.85072, 58.68176]]]]\n      }\n    }\n  }];\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('substitution _getModelLayerFeature', function (assert) {\n    var map = this.subject();\n    var _getModelLayerFeatureStub = _sinon['default'].stub(map, '_getModelLayerFeature');\n    _getModelLayerFeatureStub.withArgs(1).returns(objA);\n    assert.ok(_getModelLayerFeatureStub(1));\n  });\n\n  (0, _emberQunit.test)('isContainsObject', function (assert) {\n    var map = this.subject();\n    var _getModelLayerFeatureStub = _sinon['default'].stub(map, '_getModelLayerFeature');\n    _getModelLayerFeatureStub.withArgs('f34ea73d-9f00-4f02-b02d-675d459c972b', ['0017782c-6f34-46b5-ac77-c0a65366c452']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, objWithCrs, objA]);\n    }));\n    _getModelLayerFeatureStub.withArgs('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', ['45df35c7-f292-44f8-b328-5fd4be739233']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, objWithCrs, objB]);\n    }));\n\n    map.isContainsObject('f34ea73d-9f00-4f02-b02d-675d459c972b', '0017782c-6f34-46b5-ac77-c0a65366c452', '63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', '45df35c7-f292-44f8-b328-5fd4be739233').then(function (e) {\n      assert.ok(e, 'Contains');\n    });\n\n    map.isContainsObject('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', '45df35c7-f292-44f8-b328-5fd4be739233', 'f34ea73d-9f00-4f02-b02d-675d459c972b', '0017782c-6f34-46b5-ac77-c0a65366c452').then(function (e) {\n      assert.notOk(e, 'Not contains');\n    });\n  });\n\n  (0, _emberQunit.test)('getAreaExtends', function (assert) {\n    var map = this.subject();\n    var _getModelLayerFeatureStub = _sinon['default'].stub(map, '_getModelLayerFeature');\n    _getModelLayerFeatureStub.withArgs('f34ea73d-9f00-4f02-b02d-675d459c972b', ['0017782c-6f34-46b5-ac77-c0a65366c452']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, objWithCrs, objA]);\n    }));\n    _getModelLayerFeatureStub.withArgs('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', ['45df35c7-f292-44f8-b328-5fd4be739233']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, objWithCrs, objB]);\n    }));\n    _getModelLayerFeatureStub.withArgs('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', ['d633ea1d-eb32-423f-8663-a38abc7ba094']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, objWithCrs, objC]);\n    }));\n    _getModelLayerFeatureStub.withArgs('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', ['79fd98d0-52ae-44ae-b616-971768196ad8']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, objWithCrs, objD]);\n    }));\n\n    map.getAreaExtends('f34ea73d-9f00-4f02-b02d-675d459c972b', '0017782c-6f34-46b5-ac77-c0a65366c452', '63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', '45df35c7-f292-44f8-b328-5fd4be739233').then(function (e) {\n      assert.equal(e, 0, 'B<A and intersect');\n    });\n\n    map.getAreaExtends('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', '45df35c7-f292-44f8-b328-5fd4be739233', 'f34ea73d-9f00-4f02-b02d-675d459c972b', '0017782c-6f34-46b5-ac77-c0a65366c452').then(function (e) {\n      assert.equal(e, 8887057.32835752, 'B>A and intesect');\n    });\n\n    map.getAreaExtends('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', '79fd98d0-52ae-44ae-b616-971768196ad8', '63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', 'd633ea1d-eb32-423f-8663-a38abc7ba094').then(function (e) {\n      assert.equal(e, 43187392.82526295, 'Not intersect');\n    });\n  });\n\n  (0, _emberQunit.test)('getIntersectionArea', function (assert) {\n    var map = this.subject();\n    var _getModelLayerFeatureStub = _sinon['default'].stub(map, '_getModelLayerFeature');\n    _getModelLayerFeatureStub.withArgs('f34ea73d-9f00-4f02-b02d-675d459c972b', ['0017782c-6f34-46b5-ac77-c0a65366c452']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, objWithCrs, objA]);\n    }));\n\n    _getModelLayerFeatureStub.withArgs('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', ['45df35c7-f292-44f8-b328-5fd4be739233']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, objWithCrs, objB]);\n    }));\n    _getModelLayerFeatureStub.withArgs('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', ['d633ea1d-eb32-423f-8663-a38abc7ba094']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, objWithCrs, objC]);\n    }));\n\n    map.getIntersectionArea('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', '45df35c7-f292-44f8-b328-5fd4be739233', 'f34ea73d-9f00-4f02-b02d-675d459c972b', ['0017782c-6f34-46b5-ac77-c0a65366c452']).then(function (e) {\n      assert.equal(e[0].area, 887494.3528438057, 'Intersect');\n    });\n\n    map.getIntersectionArea('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', '79fd98d0-52ae-44ae-b616-971768196ad8', '63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', ['d633ea1d-eb32-423f-8663-a38abc7ba094']).then(function (e) {\n      assert.equal(e[0].area, 'Intersection not found', 'Not area intersect');\n    })['catch'](function (e) {\n      assert.ok(e, 'Not intersect');\n    });\n  });\n\n  (0, _emberQunit.test)('getDistanceBetweenObjects', function (assert) {\n    var map = this.subject();\n    var _getModelLayerFeatureStub = _sinon['default'].stub(map, '_getModelLayerFeature');\n    _getModelLayerFeatureStub.withArgs('f34ea73d-9f00-4f02-b02d-675d459c972b', ['0017782c-6f34-46b5-ac77-c0a65366c452']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, objWithCrs, L.geoJSON(objA[0].feature).getLayers()]);\n    }));\n    _getModelLayerFeatureStub.withArgs('63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', ['45df35c7-f292-44f8-b328-5fd4be739233']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, objWithCrs, L.geoJSON(objB[0].feature).getLayers()]);\n    }));\n\n    map.getDistanceBetweenObjects('f34ea73d-9f00-4f02-b02d-675d459c972b', '0017782c-6f34-46b5-ac77-c0a65366c452', '63b3f6fb-3d4c-4acc-ab93-1b4fa31f9b0e', '45df35c7-f292-44f8-b328-5fd4be739233').then(function (e) {\n      assert.equal(e, 536.4476316355142, 'distance');\n    });\n  });\n\n  (0, _emberQunit.test)('getmulticircuitobject with difference', function (assert) {\n    var map = this.subject();\n    var objA = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[56.18425, 58.07197], [56.21068, 58.07197], [56.21068, 58.07987], [56.18425, 58.07987], [56.18425, 58.07197]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:4326'\n        }\n      }\n    };\n    var objB = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[56.19712, 58.06770], [56.22322, 58.06770], [56.22322, 58.07551], [56.19712, 58.07551], [56.19712, 58.06770]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:4326'\n        }\n      }\n    };\n    var objC = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[56.21644, 58.07864], [56.23197, 58.07864], [56.23197, 58.08608], [56.21644, 58.08608], [56.21644, 58.07864]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:4326'\n        }\n      }\n    };\n    var multiObject = {\n      type: 'Feature',\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: [[[[56.19712, 58.07197], [56.18425, 58.07197], [56.18425, 58.07987], [56.21068, 58.07987], [56.21068, 58.07551], [56.19712, 58.07551], [56.19712, 58.07197]]], [[[56.21068, 58.07551], [56.22322, 58.07551], [56.22322, 58.0677], [56.19712, 58.0677], [56.19712, 58.07197], [56.21068, 58.07197], [56.21068, 58.07551]]], [[[56.21644, 58.07864], [56.21644, 58.08608], [56.23197, 58.08608], [56.23197, 58.07864], [56.21644, 58.07864]]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:4326'\n        }\n      }\n    };\n\n    var resultObj = map.createMulti([objA, objB, objC], false);\n\n    assert.deepEqual(resultObj, multiObject, 'multi object');\n  });\n\n  (0, _emberQunit.test)('getmulticircuitobject with union', function (assert) {\n    var map = this.subject();\n    var objA = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[56.18425, 58.07197], [56.21068, 58.07197], [56.21068, 58.07987], [56.18425, 58.07987], [56.18425, 58.07197]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:4326'\n        }\n      }\n    };\n    var objB = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[56.19712, 58.06770], [56.22322, 58.06770], [56.22322, 58.07551], [56.19712, 58.07551], [56.19712, 58.06770]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:4326'\n        }\n      }\n    };\n    var objC = {\n      type: 'Feature',\n      properties: {},\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[56.21644, 58.07864], [56.23197, 58.07864], [56.23197, 58.08608], [56.21644, 58.08608], [56.21644, 58.07864]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:4326'\n        }\n      }\n    };\n    var multiObject = {\n      type: 'Feature',\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: [[[[56.19712, 58.07197], [56.18425, 58.07197], [56.18425, 58.07987], [56.21068, 58.07987], [56.21068, 58.07551], [56.22322, 58.07551], [56.22322, 58.0677], [56.19712, 58.0677], [56.19712, 58.07197]]], [[[56.21644, 58.07864], [56.21644, 58.08608], [56.23197, 58.08608], [56.23197, 58.07864], [56.21644, 58.07864]]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:4326'\n        }\n      }\n    };\n\n    var resultObj = map.createMulti([objA, objB, objC], true);\n\n    assert.deepEqual(resultObj, multiObject, 'multi object');\n  });\n\n  (0, _emberQunit.test)('getMergedGeometry with difference should return geoJson feature in EPSG:4326', function (assert) {\n    assert.expect(1);\n    var done = assert.async(1);\n\n    var geoJson1Layer1 = {\n      type: 'MultiPolygon',\n      properties: {},\n      coordinates: [[[[1.001, 2.002], [1.005, 2.002], [1.003, 2.003], [1.001, 2.003], [1.001, 2.002]]]]\n    };\n\n    var geoJson2Layer1 = {\n      type: 'MultiPolygon',\n      properties: {},\n      coordinates: [[[[1.003, 2.0025], [1.005, 2.0025], [1.003, 2.003], [1.001, 2.003], [1.003, 2.0025]]]]\n    };\n\n    var geoJson1Layer2 = {\n      type: 'MultiPolygon',\n      properties: {},\n      coordinates: [[[[1.001, 2.0033], [1.003, 2.0033], [1.005, 2.004], [1.001, 2.004], [1.001, 2.0033]]]]\n    };\n\n    var geoJson2Layer2 = {\n      type: 'MultiPolygon',\n      properties: {},\n      coordinates: [[[[1.001, 2.0033], [1.003, 2.0033], [1.003, 2.0035], [1.001, 2.0035], [1.001, 2.0033]]]]\n    };\n\n    var geoJsonUnion = {\n      type: 'Feature',\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: [[[[1.0039999999999998, 2.0025], [1.005, 2.002], [1.001, 2.002], [1.001, 2.003], [1.003, 2.0025], [1.0039999999999998, 2.0025]]], [[[1.003, 2.003], [1.005, 2.0025], [1.0039999999999998, 2.0025], [1.003, 2.003]]], [[[1.001, 2.0035], [1.001, 2.004], [1.005, 2.004], [1.003, 2.0033], [1.003, 2.0035], [1.001, 2.0035]]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:4326'\n        }\n      }\n    };\n\n    var feature1Layer1 = L.geoJSON(geoJson1Layer1).getLayers()[0];\n    feature1Layer1.options.crs = { code: 'EPSG:4326' };\n    var feature2Layer1 = L.geoJSON(geoJson2Layer1).getLayers()[0];\n    feature2Layer1.options.crs = { code: 'EPSG:4326' };\n\n    var feature1Layer2 = L.geoJSON(geoJson1Layer2).getLayers()[0];\n    feature1Layer2.options.crs = { code: 'EPSG:4326' };\n    var feature2Layer2 = L.geoJSON(geoJson2Layer2).getLayers()[0];\n    feature2Layer2.options.crs = { code: 'EPSG:4326' };\n\n    feature1Layer1.toJsts = function () {};\n\n    var toJstsStub1 = _sinon['default'].stub(feature1Layer1, 'toJsts');\n    var objJsts1 = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(geoJson1Layer1);\n    objJsts1.setSRID(4326);\n    toJstsStub1.returns(objJsts1);\n\n    feature2Layer1.toJsts = function () {};\n\n    var toJstsStub2 = _sinon['default'].stub(feature2Layer1, 'toJsts');\n    var objJsts2 = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(geoJson2Layer1);\n    objJsts2.setSRID(4326);\n    toJstsStub2.returns(objJsts2);\n\n    feature1Layer2.toJsts = function () {};\n\n    var toJstsStub3 = _sinon['default'].stub(feature1Layer2, 'toJsts');\n    var objJsts3 = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(geoJson1Layer2);\n    objJsts3.setSRID(4326);\n    toJstsStub3.returns(objJsts3);\n\n    feature2Layer2.toJsts = function () {};\n\n    var toJstsStub4 = _sinon['default'].stub(feature2Layer2, 'toJsts');\n    var objJsts4 = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(geoJson2Layer2);\n    objJsts4.setSRID(4326);\n    toJstsStub4.returns(objJsts4);\n\n    var map = this.subject();\n    var _getModelLayerFeatureStub = _sinon['default'].stub(map, '_getModelLayerFeature');\n    _getModelLayerFeatureStub.withArgs('1', ['1', '2']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, null, [feature1Layer1, feature2Layer1]]);\n    }));\n\n    _getModelLayerFeatureStub.withArgs('2', ['1', '2']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, null, [feature1Layer2, feature2Layer2]]);\n    }));\n\n    var result = map.getMergedGeometry('1', ['1', '2'], '2', ['1', '2']);\n\n    result.then(function (feature) {\n      assert.deepEqual(feature, geoJsonUnion);\n      done();\n      _getModelLayerFeatureStub.restore();\n    });\n  });\n\n  (0, _emberQunit.test)('getMergedGeometry with union should return geoJson feature in EPSG:4326', function (assert) {\n    assert.expect(1);\n    var done = assert.async(1);\n\n    var geoJson1Layer1 = {\n      type: 'MultiPolygon',\n      properties: {},\n      coordinates: [[[[1.001, 2.002], [1.005, 2.002], [1.003, 2.003], [1.001, 2.003], [1.001, 2.002]]]]\n    };\n\n    var geoJson2Layer1 = {\n      type: 'MultiPolygon',\n      properties: {},\n      coordinates: [[[[1.003, 2.0025], [1.005, 2.0025], [1.003, 2.003], [1.001, 2.003], [1.003, 2.0025]]]]\n    };\n\n    var geoJson1Layer2 = {\n      type: 'MultiPolygon',\n      properties: {},\n      coordinates: [[[[1.001, 2.0033], [1.003, 2.0033], [1.005, 2.004], [1.001, 2.004], [1.001, 2.0033]]]]\n    };\n\n    var geoJson2Layer2 = {\n      type: 'MultiPolygon',\n      properties: {},\n      coordinates: [[[[1.001, 2.0033], [1.003, 2.0033], [1.003, 2.0035], [1.001, 2.0035], [1.001, 2.0033]]]]\n    };\n\n    var geoJsonUnion = {\n      type: 'Feature',\n      geometry: {\n        type: 'MultiPolygon',\n        coordinates: [[[[1.0039999999999998, 2.0025], [1.005, 2.002], [1.001, 2.002], [1.001, 2.003], [1.003, 2.003], [1.005, 2.0025], [1.0039999999999998, 2.0025]]], [[[1.003, 2.0033], [1.001, 2.0033], [1.001, 2.0035], [1.001, 2.004], [1.005, 2.004], [1.003, 2.0033]]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:4326'\n        }\n      }\n    };\n\n    var feature1Layer1 = L.geoJSON(geoJson1Layer1).getLayers()[0];\n    feature1Layer1.options.crs = { code: 'EPSG:4326' };\n    var feature2Layer1 = L.geoJSON(geoJson2Layer1).getLayers()[0];\n    feature2Layer1.options.crs = { code: 'EPSG:4326' };\n\n    var feature1Layer2 = L.geoJSON(geoJson1Layer2).getLayers()[0];\n    feature1Layer2.options.crs = { code: 'EPSG:4326' };\n    var feature2Layer2 = L.geoJSON(geoJson2Layer2).getLayers()[0];\n    feature2Layer2.options.crs = { code: 'EPSG:4326' };\n\n    feature1Layer1.toJsts = function () {};\n\n    var toJstsStub1 = _sinon['default'].stub(feature1Layer1, 'toJsts');\n    var objJsts1 = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(geoJson1Layer1);\n    objJsts1.setSRID(4326);\n    toJstsStub1.returns(objJsts1);\n\n    feature2Layer1.toJsts = function () {};\n\n    var toJstsStub2 = _sinon['default'].stub(feature2Layer1, 'toJsts');\n    var objJsts2 = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(geoJson2Layer1);\n    objJsts2.setSRID(4326);\n    toJstsStub2.returns(objJsts2);\n\n    feature1Layer2.toJsts = function () {};\n\n    var toJstsStub3 = _sinon['default'].stub(feature1Layer2, 'toJsts');\n    var objJsts3 = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(geoJson1Layer2);\n    objJsts3.setSRID(4326);\n    toJstsStub3.returns(objJsts3);\n\n    feature2Layer2.toJsts = function () {};\n\n    var toJstsStub4 = _sinon['default'].stub(feature2Layer2, 'toJsts');\n    var objJsts4 = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(geoJson2Layer2);\n    objJsts4.setSRID(4326);\n    toJstsStub4.returns(objJsts4);\n\n    var map = this.subject();\n    var _getModelLayerFeatureStub = _sinon['default'].stub(map, '_getModelLayerFeature');\n    _getModelLayerFeatureStub.withArgs('1', ['1', '2']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, null, [feature1Layer1, feature2Layer1]]);\n    }));\n\n    _getModelLayerFeatureStub.withArgs('2', ['1', '2']).returns(new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      resolve([null, null, [feature1Layer2, feature2Layer2]]);\n    }));\n\n    var result = map.getMergedGeometry('1', ['1', '2'], '2', ['1', '2'], true);\n\n    result.then(function (feature) {\n      assert.deepEqual(feature, geoJsonUnion);\n      done();\n      _getModelLayerFeatureStub.restore();\n    });\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/new-platform-flexberry-g-i-s-map-test.js should pass jscs', function () {\n    ok(true, 'unit/models/new-platform-flexberry-g-i-s-map-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-map-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/new-platform-flexberry-g-i-s-map-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-g-i-s-map-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-parameter-metadata-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-parameter-metadata', 'Unit | Model | new-platform-flexberry-g-i-s-parameter-metadata', {\n    // Specify the other units that are required for this test.\n    needs: ['model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-parameter-metadata-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/new-platform-flexberry-g-i-s-parameter-metadata-test.js should pass jscs', function () {\n    ok(true, 'unit/models/new-platform-flexberry-g-i-s-parameter-metadata-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-g-i-s-parameter-metadata-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/new-platform-flexberry-g-i-s-parameter-metadata-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-g-i-s-parameter-metadata-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/edit-map-new-test', ['exports', 'ember-flexberry-gis/routes/edit-map-new', 'qunit'], function (exports, _emberFlexberryGisRoutesEditMapNew, _qunit) {\n\n  (0, _qunit.module)('Unit | Route | edit-map-new');\n\n  (0, _qunit.test)('it exists', function (assert) {\n    var route = _emberFlexberryGisRoutesEditMapNew['default'].create({});\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/edit-map-new-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/edit-map-new-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/edit-map-new-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/edit-map-new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/edit-map-new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-map-new-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/edit-map-test', ['exports', 'ember-flexberry-gis/routes/edit-map', 'qunit'], function (exports, _emberFlexberryGisRoutesEditMap, _qunit) {\n\n  (0, _qunit.module)('Unit | Route | edit-map');\n\n  (0, _qunit.test)('it exists', function (assert) {\n    var route = _emberFlexberryGisRoutesEditMap['default'].create({});\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/edit-map-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/edit-map-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/edit-map-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/edit-map-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/edit-map-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-map-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/gis-search-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:gis-search-form', 'Unit | Route | gis search form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/gis-search-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/gis-search-form-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/gis-search-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/gis-search-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/gis-search-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/gis-search-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/list-map-test', ['exports', 'ember-flexberry-gis/routes/list-map', 'qunit'], function (exports, _emberFlexberryGisRoutesListMap, _qunit) {\n\n  (0, _qunit.module)('Unit | Route | list-map');\n\n  (0, _qunit.test)('it exists', function (assert) {\n    var route = _emberFlexberryGisRoutesListMap['default'].create({});\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/list-map-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/list-map-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/list-map-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/list-map-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/list-map-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/list-map-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-link-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-layer-link', 'Unit | Serializer | new-platform-flexberry-g-i-s-layer-link', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:new-platform-flexberry-g-i-s-layer-link', 'transform:file', 'transform:decimal', 'transform:json', 'model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-link-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/serializers');\n  test('unit/serializers/new-platform-flexberry-g-i-s-layer-link-test.js should pass jscs', function () {\n    ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-layer-link-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-link-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/new-platform-flexberry-g-i-s-layer-link-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-layer-link-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-metadata-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-layer-metadata', 'Unit | Serializer | new-platform-flexberry-g-i-s-layer-metadata', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:new-platform-flexberry-g-i-s-layer-metadata', 'transform:file', 'transform:decimal', 'transform:json', 'model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-metadata-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/serializers');\n  test('unit/serializers/new-platform-flexberry-g-i-s-layer-metadata-test.js should pass jscs', function () {\n    ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-layer-metadata-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-layer-metadata-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/new-platform-flexberry-g-i-s-layer-metadata-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-layer-metadata-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-metadata-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-link-metadata', 'Unit | Serializer | new-platform-flexberry-g-i-s-link-metadata', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:new-platform-flexberry-g-i-s-link-metadata', 'transform:file', 'transform:decimal', 'transform:json', 'model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-metadata-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/serializers');\n  test('unit/serializers/new-platform-flexberry-g-i-s-link-metadata-test.js should pass jscs', function () {\n    ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-link-metadata-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-metadata-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/new-platform-flexberry-g-i-s-link-metadata-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-link-metadata-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-parameter-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-link-parameter', 'Unit | Serializer | new-platform-flexberry-g-i-s-link-parameter', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:new-platform-flexberry-g-i-s-link-parameter', 'transform:file', 'transform:decimal', 'transform:json', 'model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-parameter-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/serializers');\n  test('unit/serializers/new-platform-flexberry-g-i-s-link-parameter-test.js should pass jscs', function () {\n    ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-link-parameter-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-link-parameter-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/new-platform-flexberry-g-i-s-link-parameter-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-link-parameter-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-layer-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-map-layer', 'Unit | Serializer | new-platform-flexberry-g-i-s-map-layer', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:new-platform-flexberry-g-i-s-map-layer', 'transform:file', 'transform:decimal', 'transform:json', 'model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-layer-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/serializers');\n  test('unit/serializers/new-platform-flexberry-g-i-s-map-layer-test.js should pass jscs', function () {\n    ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-map-layer-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-layer-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/new-platform-flexberry-g-i-s-map-layer-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-map-layer-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-object-setting-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-map-object-setting', 'Unit | Serializer | new-platform-flexberry-g-i-s-map-object-setting', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:new-platform-flexberry-g-i-s-map-object-setting', 'transform:file', 'transform:decimal', 'transform:json', 'model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-object-setting-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/serializers');\n  test('unit/serializers/new-platform-flexberry-g-i-s-map-object-setting-test.js should pass jscs', function () {\n    ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-map-object-setting-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-object-setting-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/new-platform-flexberry-g-i-s-map-object-setting-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-map-object-setting-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-map', 'Unit | Serializer | new-platform-flexberry-g-i-s-map', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:new-platform-flexberry-g-i-s-map', 'transform:file', 'transform:decimal', 'transform:json', 'model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/serializers');\n  test('unit/serializers/new-platform-flexberry-g-i-s-map-test.js should pass jscs', function () {\n    ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-map-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-map-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/new-platform-flexberry-g-i-s-map-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-map-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-parameter-metadata-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-g-i-s-parameter-metadata', 'Unit | Serializer | new-platform-flexberry-g-i-s-parameter-metadata', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:new-platform-flexberry-g-i-s-parameter-metadata', 'transform:file', 'transform:decimal', 'transform:json', 'model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-parameter-metadata-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/serializers');\n  test('unit/serializers/new-platform-flexberry-g-i-s-parameter-metadata-test.js should pass jscs', function () {\n    ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-parameter-metadata-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/serializers/new-platform-flexberry-g-i-s-parameter-metadata-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/serializers/new-platform-flexberry-g-i-s-parameter-metadata-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/new-platform-flexberry-g-i-s-parameter-metadata-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/local-storage-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:local-storage', 'Unit | Service | local storage', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dummy/tests/unit/services/local-storage-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/services');\n  test('unit/services/local-storage-test.js should pass jscs', function () {\n    ok(true, 'unit/services/local-storage-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/services/local-storage-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/local-storage-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/local-storage-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/map-store-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/start-app'], function (exports, _ember, _emberQunit, _dummyTestsHelpersStartApp) {\n\n  var App = undefined;\n\n  (0, _emberQunit.moduleFor)('service:map-store', 'Unit | Service | map store', {\n    // Specify the other units that are required for this test.\n    needs: ['model:custom-inflector-rules', 'model:new-platform-flexberry-g-i-s-layer-link', 'model:new-platform-flexberry-g-i-s-layer-metadata', 'model:new-platform-flexberry-g-i-s-link-metadata', 'model:new-platform-flexberry-g-i-s-link-parameter', 'model:new-platform-flexberry-g-i-s-map-layer', 'model:new-platform-flexberry-g-i-s-map-object-setting', 'model:new-platform-flexberry-g-i-s-map', 'model:new-platform-flexberry-g-i-s-parameter-metadata'],\n\n    beforeEach: function beforeEach() {\n      App = (0, _dummyTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(App, 'destroy');\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var _this = this;\n\n    _ember['default'].run(function () {\n      var service = _this.subject();\n      assert.ok(service);\n    });\n  });\n\n  (0, _emberQunit.test)('it should have property osmmap after init', function (assert) {\n    var _this2 = this;\n\n    _ember['default'].run(function () {\n      assert.expect(3);\n      var service = _this2.subject();\n      var defaultMap = service.get('osmmap');\n      assert.ok(defaultMap, 'Map created');\n      assert.equal(defaultMap.get('mapLayer').length, 1, 'it have one map layer');\n      assert.equal(defaultMap.get('mapLayer').objectAt(0).get('type'), 'osm', 'and this layer of type osm');\n    });\n  });\n});","define('dummy/tests/unit/services/map-store-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/services');\n  test('unit/services/map-store-test.js should pass jscs', function () {\n    ok(true, 'unit/services/map-store-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/services/map-store-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/map-store-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/map-store-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/download-file-test', ['exports', 'ember', 'qunit', 'sinon', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326', 'ember-flexberry-gis/utils/download-file'], function (exports, _ember, _qunit, _sinon, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326, _emberFlexberryGisUtilsDownloadFile) {\n\n  (0, _qunit.module)('Unit | Utility | download file');\n\n  var crsFactory32640 = {\n    code: 'EPSG:32640',\n    definition: '+proj=utm +zone=40 +datum=WGS84 +units=m +no_defs',\n    create: function create() {\n      var crs = L.extend({}, new L.Proj.CRS(this.code, this.definition), {\n        scale: function scale(zoom) {\n          return 256 * Math.pow(2, zoom);\n        },\n        zoom: function zoom(scale) {\n          return Math.log(scale / 256) / Math.LN2;\n        }\n      });\n      return crs;\n    }\n  };\n\n  (0, _qunit.test)('test method downloadFile for wfs', function (assert) {\n    assert.expect(6);\n    var done = assert.async(1);\n\n    var layerModelWfs = _ember['default'].Object.create({\n      type: 'wfs',\n      settingsAsObject: {\n        url: 'geoserverUrl',\n        typeNS: 'testTypeNS',\n        typeName: 'layerWfs',\n        geometryField: 'geometryField'\n      },\n      name: 'layerWfsName',\n      headers: {}\n    });\n\n    var stubAjax = _sinon['default'].stub(_ember['default'].$, 'ajax');\n    stubAjax.yieldsTo('success', 'blob');\n\n    var result = (0, _emberFlexberryGisUtilsDownloadFile.downloadFile)(layerModelWfs, ['1'], 'JSON', { crs: crsFactory32640.create() }, { crs: _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'].create() }, '/api/featureexport');\n\n    assert.ok(result instanceof _ember['default'].RSVP.Promise);\n    result.then(function (res) {\n      assert.equal(res.fileName, 'layerWfsName.json');\n      assert.equal(res.blob, 'blob');\n      assert.equal(stubAjax.callCount, 1);\n      assert.equal(stubAjax.getCall(0).args[0].url, '/api/featureexport');\n      var data = '<wfs:GetFeature xmlns:wfs=\"http://www.opengis.net/wfs\" service=\"WFS\" version=\"1.1.0\" outputFormat=\"application/json\">' + '<wfs:Query typeName=\"testTypeNS:layerWfs\" srsName=\"EPSG:32640\"><ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\"><Or>' + '<ogc:GmlObjectId xmlns:gml=\"http://www.opengis.net/gml\" gml:id=\"1\"/>' + '</Or></ogc:Filter></wfs:Query><geoserver url=\"geoserverUrl\"/></wfs:GetFeature>';\n      assert.equal(stubAjax.getCall(0).args[0].data, data);\n      done();\n      stubAjax.restore();\n    });\n  });\n\n  (0, _qunit.test)('test method downloadFile for odata', function (assert) {\n    assert.expect(6);\n    var done = assert.async(1);\n\n    var layerModelOdata = _ember['default'].Object.create({\n      type: 'odata-vector',\n      settingsAsObject: {\n        odataClass: 'modelClassName',\n        odataUrl: 'odataUrl'\n      },\n      name: 'layerOdataName',\n      headers: {}\n    });\n\n    var stubAjax = _sinon['default'].stub(_ember['default'].$, 'ajax');\n    stubAjax.yieldsTo('success', 'blob');\n\n    var result = (0, _emberFlexberryGisUtilsDownloadFile.downloadFile)(layerModelOdata, ['1', '2'], 'CSV', { crs: _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'].create() }, { crs: crsFactory32640.create() }, '/api/featureexport');\n\n    assert.ok(result instanceof _ember['default'].RSVP.Promise);\n    result.then(function (res) {\n      assert.equal(res.fileName, 'layerOdataName.csv');\n      assert.equal(res.blob, 'blob');\n      assert.equal(stubAjax.callCount, 1);\n      assert.equal(stubAjax.getCall(0).args[0].url, '/api/featureexport');\n      var data = '<odata outputFormat=\"CSV\"><layer odataClass=\"modelClassName\" odataUrl=\"odataUrl\" srsName=\"EPSG:4326\" ' + 'layerName=\"layerOdataName\" srslayer=\"EPSG:32640\"><pkList><pk primarykey=\"1\"/><pk primarykey=\"2\"/></pkList></layer></odata>';\n      assert.equal(stubAjax.getCall(0).args[0].data, data);\n      done();\n      stubAjax.restore();\n    });\n  });\n});","define('dummy/tests/unit/utils/download-file-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/download-file-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/download-file-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/download-file-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/download-file-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/download-file-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/get-crs-by-name-test', ['exports', 'ember', 'ember-flexberry-gis/utils/get-crs-by-name', 'qunit', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326', 'sinon'], function (exports, _ember, _emberFlexberryGisUtilsGetCrsByName, _qunit, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326, _sinon) {\n\n  (0, _qunit.module)('Unit | Utility | get crs by name');\n\n  var crsFactory32640 = {\n    code: 'EPSG:32640',\n    definition: '+proj=utm +zone=40 +datum=WGS84 +units=m +no_defs',\n    create: function create() {\n      var crs = L.extend({}, new L.Proj.CRS(this.code, this.definition), {\n        scale: function scale(zoom) {\n          return 256 * Math.pow(2, zoom);\n        },\n        zoom: function zoom(scale) {\n          return Math.log(scale / 256) / Math.LN2;\n        }\n      });\n      return crs;\n    }\n  };\n\n  (0, _qunit.test)('test method getCrsByName for EPSG:32640', function (assert) {\n    var crsName = 'EPSG:32640';\n    var that = {};\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'],\n          'epsg32640': crsFactory32640\n        };\n      }\n    });\n\n    var crsResult = (0, _emberFlexberryGisUtilsGetCrsByName.getCrsByName)(crsName, that);\n\n    assert.ok(crsResult.crs);\n    assert.ok(crsResult.definition);\n    assert.equal(crsResult.crs.code, 'EPSG:32640');\n    assert.equal(crsResult.definition, '+proj=utm +zone=40 +datum=WGS84 +units=m +no_defs');\n    ownerStub.restore();\n  });\n\n  (0, _qunit.test)('test method getCrsByName for EPSG:4326', function (assert) {\n    var crsName = 'EPSG:4326';\n    var that = {};\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'],\n          'epsg32640': crsFactory32640\n        };\n      }\n    });\n\n    var crsResult = (0, _emberFlexberryGisUtilsGetCrsByName.getCrsByName)(crsName, that);\n\n    assert.ok(crsResult.crs);\n    assert.ok(crsResult.definition);\n    assert.equal(crsResult.crs.code, 'EPSG:4326');\n    assert.equal(crsResult.definition, '+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees');\n    ownerStub.restore();\n  });\n});","define('dummy/tests/unit/utils/get-crs-by-name-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/get-crs-by-name-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/get-crs-by-name-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/get-crs-by-name-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/get-crs-by-name-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/get-crs-by-name-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/lat-lng-to-coord-test', ['exports', 'ember-flexberry-gis/utils/lat-lng-to-coord', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326', 'qunit', 'npm:jsts'], function (exports, _emberFlexberryGisUtilsLatLngToCoord, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326, _qunit, _npmJsts) {\n\n  (0, _qunit.module)('Unit | Utility | lat lng to coord');\n\n  var crs = _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'].create();\n  var precision = 0;\n\n  (0, _qunit.test)('test method latLngToCoords for Point', function (assert) {\n    //Arrange\n    var latlng = L.latLng(30, 10);\n    var latlngWithAlt = L.latLng(30, 10, 20);\n    var coordinatesFunction = function coordinatesFunction(coord, altitude) {\n      return altitude ? new _npmJsts['default'].geom.Coordinate(coord.x, coord.y, altitude) : new _npmJsts['default'].geom.Coordinate(coord.x, coord.y);\n    };\n\n    //Act\n    var resCoord = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngToCoords)(latlng, crs, precision);\n    var resCoordWithAlt = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngToCoords)(latlngWithAlt, crs, precision);\n    var resCoordWithFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngToCoords)(latlng, crs, precision, coordinatesFunction);\n    var resCoordWithAltAndFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngToCoords)(latlngWithAlt, crs, precision, coordinatesFunction);\n\n    //Assert\n    assert.deepEqual(resCoord, [10, 30]);\n    assert.deepEqual(resCoordWithAlt, [10, 30, 20]);\n    assert.deepEqual(resCoordWithFunc.toString(), '(10, 30, undefined)');\n    assert.deepEqual(resCoordWithAltAndFunc.toString(), '(10, 30, 20)');\n  });\n\n  (0, _qunit.test)('test method latLngsToCoords for LineString', function (assert) {\n    //Arrange\n    var latlngs = [L.latLng(30, 10), L.latLng(10, 30), L.latLng(40, 40)];\n    var latlngsWithAlt = [L.latLng(30, 10, 20), L.latLng(10, 30, 21), L.latLng(40, 40, 22)];\n    var coordinatesFunction = function coordinatesFunction(coord, altitude) {\n      return altitude ? new _npmJsts['default'].geom.Coordinate(coord.x, coord.y, altitude) : new _npmJsts['default'].geom.Coordinate(coord.x, coord.y);\n    };\n\n    var levelsDeep = 0;\n    var closed = false;\n\n    //Act\n    var resCoord = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision);\n    var resCoordWithAlt = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision);\n    var resCoordWithFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision, coordinatesFunction);\n    var resCoordWithAltAndFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision, coordinatesFunction);\n\n    //Assert\n    assert.deepEqual(resCoord, [[10, 30], [30, 10], [40, 40]]);\n    assert.deepEqual(resCoordWithAlt, [[10, 30, 20], [30, 10, 21], [40, 40, 22]]);\n    assert.deepEqual(resCoordWithFunc.toString(), '(10, 30, undefined),(30, 10, undefined),(40, 40, undefined)');\n    assert.deepEqual(resCoordWithAltAndFunc.toString(), '(10, 30, 20),(30, 10, 21),(40, 40, 22)');\n  });\n\n  (0, _qunit.test)('test method latLngsToCoords for MultiLineString', function (assert) {\n    //Arrange\n    var latlngs = [[L.latLng(10, 10), L.latLng(20, 20), L.latLng(10, 40)], [L.latLng(40, 40), L.latLng(30, 30), L.latLng(40, 20)]];\n    var latlngsWithAlt = [[L.latLng(10, 10, 20), L.latLng(20, 20, 21), L.latLng(10, 40, 22)], [L.latLng(40, 40, 23), L.latLng(30, 30, 24), L.latLng(40, 20, 25)]];\n    var coordinatesFunction = function coordinatesFunction(coord, altitude) {\n      return altitude ? new _npmJsts['default'].geom.Coordinate(coord.x, coord.y, altitude) : new _npmJsts['default'].geom.Coordinate(coord.x, coord.y);\n    };\n\n    var levelsDeep = 1;\n    var closed = false;\n\n    //Act\n    var resCoord = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision);\n    var resCoordWithAlt = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision);\n    var resCoordWithFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision, coordinatesFunction);\n    var resCoordWithAltAndFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision, coordinatesFunction);\n\n    //Assert\n    assert.deepEqual(resCoord, [[[10, 10], [20, 20], [40, 10]], [[40, 40], [30, 30], [20, 40]]]);\n    assert.deepEqual(resCoordWithAlt, [[[10, 10, 20], [20, 20, 21], [40, 10, 22]], [[40, 40, 23], [30, 30, 24], [20, 40, 25]]]);\n    assert.equal(resCoordWithFunc.length, 2);\n    assert.deepEqual(resCoordWithFunc[0].toString(), '(10, 10, undefined),(20, 20, undefined),(40, 10, undefined)');\n    assert.deepEqual(resCoordWithFunc[1].toString(), '(40, 40, undefined),(30, 30, undefined),(20, 40, undefined)');\n    assert.equal(resCoordWithAltAndFunc.length, 2);\n    assert.deepEqual(resCoordWithAltAndFunc[0].toString(), '(10, 10, 20),(20, 20, 21),(40, 10, 22)');\n    assert.deepEqual(resCoordWithAltAndFunc[1].toString(), '(40, 40, 23),(30, 30, 24),(20, 40, 25)');\n  });\n\n  (0, _qunit.test)('test method latLngsToCoords for Polygon without hole', function (assert) {\n    //Arrange\n    var latlngs = [[L.latLng(30, 10), L.latLng(40, 40), L.latLng(20, 40), L.latLng(10, 20)]];\n    var latlngsWithAlt = [[L.latLng(30, 10, 20), L.latLng(40, 40, 21), L.latLng(20, 40, 22), L.latLng(10, 20, 23)]];\n    var coordinatesFunction = function coordinatesFunction(coord, altitude) {\n      return altitude ? new _npmJsts['default'].geom.Coordinate(coord.x, coord.y, altitude) : new _npmJsts['default'].geom.Coordinate(coord.x, coord.y);\n    };\n\n    var levelsDeep = 1;\n    var closed = true;\n\n    //Act\n    var resCoord = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision);\n    var resCoordWithAlt = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision);\n    var resCoordWithFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision, coordinatesFunction);\n    var resCoordWithAltAndFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision, coordinatesFunction);\n\n    //Assert\n    assert.deepEqual(resCoord, [[[10, 30], [40, 40], [40, 20], [20, 10], [10, 30]]]);\n    assert.deepEqual(resCoordWithAlt, [[[10, 30, 20], [40, 40, 21], [40, 20, 22], [20, 10, 23], [10, 30, 20]]]);\n    assert.deepEqual(resCoordWithFunc.toString(), '(10, 30, undefined),(40, 40, undefined),(40, 20, undefined)' + ',(20, 10, undefined),(10, 30, undefined)');\n    assert.deepEqual(resCoordWithAltAndFunc.toString(), '(10, 30, 20),(40, 40, 21),(40, 20, 22)' + ',(20, 10, 23),(10, 30, 20)');\n  });\n\n  (0, _qunit.test)('test method latLngsToCoords for Polygon with hole', function (assert) {\n    //Arrange\n    var latlngs = [[L.latLng(35, 10), L.latLng(45, 45), L.latLng(15, 40), L.latLng(10, 20)], [L.latLng(20, 30), L.latLng(35, 35), L.latLng(30, 20)]];\n    var latlngsWithAlt = [[L.latLng(35, 10, 20), L.latLng(45, 45, 21), L.latLng(15, 40, 22), L.latLng(10, 20, 23)], [L.latLng(20, 30, 24), L.latLng(35, 35, 25), L.latLng(30, 20, 26)]];\n    var coordinatesFunction = function coordinatesFunction(coord, altitude) {\n      return altitude ? new _npmJsts['default'].geom.Coordinate(coord.x, coord.y, altitude) : new _npmJsts['default'].geom.Coordinate(coord.x, coord.y);\n    };\n\n    var levelsDeep = 1;\n    var closed = true;\n\n    //Act\n    var resCoord = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision);\n    var resCoordWithAlt = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision);\n    var resCoordWithFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision, coordinatesFunction);\n    var resCoordWithAltAndFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision, coordinatesFunction);\n\n    //Assert\n    assert.deepEqual(resCoord, [[[10, 35], [45, 45], [40, 15], [20, 10], [10, 35]], [[30, 20], [35, 35], [20, 30], [30, 20]]]);\n    assert.deepEqual(resCoordWithAlt, [[[10, 35, 20], [45, 45, 21], [40, 15, 22], [20, 10, 23], [10, 35, 20]], [[30, 20, 24], [35, 35, 25], [20, 30, 26], [30, 20, 24]]]);\n    assert.deepEqual(resCoordWithFunc[0].toString(), '(10, 35, undefined),(45, 45, undefined),(40, 15, undefined)' + ',(20, 10, undefined),(10, 35, undefined)');\n    assert.deepEqual(resCoordWithFunc[1].toString(), '(30, 20, undefined),(35, 35, undefined),(20, 30, undefined),' + '(30, 20, undefined)');\n    assert.deepEqual(resCoordWithAltAndFunc[0].toString(), '(10, 35, 20),(45, 45, 21),(40, 15, 22)' + ',(20, 10, 23),(10, 35, 20)');\n    assert.deepEqual(resCoordWithAltAndFunc[1].toString(), '(30, 20, 24),(35, 35, 25),(20, 30, 26),' + '(30, 20, 24)');\n  });\n\n  (0, _qunit.test)('test method latLngsToCoords for MultiPolygon without hole', function (assert) {\n    //Arrange\n    var latlngs = [[[L.latLng(30, 20), L.latLng(45, 40), L.latLng(10, 40)]], [[L.latLng(15, 5), L.latLng(40, 10), L.latLng(10, 20), L.latLng(5, 10)]]];\n    var latlngsWithAlt = [[[L.latLng(30, 20, 20), L.latLng(45, 40, 21), L.latLng(10, 40, 22)]], [[L.latLng(15, 5, 23), L.latLng(40, 10, 24), L.latLng(10, 20, 25), L.latLng(5, 10, 26)]]];\n    var coordinatesFunction = function coordinatesFunction(coord, altitude) {\n      return altitude ? new _npmJsts['default'].geom.Coordinate(coord.x, coord.y, altitude) : new _npmJsts['default'].geom.Coordinate(coord.x, coord.y);\n    };\n\n    var levelsDeep = 2;\n    var closed = true;\n\n    //Act\n    var resCoord = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision);\n    var resCoordWithAlt = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision);\n    var resCoordWithFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision, coordinatesFunction);\n    var resCoordWithAltAndFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision, coordinatesFunction);\n\n    //Assert\n    assert.deepEqual(resCoord, [[[[20, 30], [40, 45], [40, 10], [20, 30]]], [[[5, 15], [10, 40], [20, 10], [10, 5], [5, 15]]]]);\n    assert.deepEqual(resCoordWithAlt, [[[[20, 30, 20], [40, 45, 21], [40, 10, 22], [20, 30, 20]]], [[[5, 15, 23], [10, 40, 24], [20, 10, 25], [10, 5, 26], [5, 15, 23]]]]);\n    assert.deepEqual(resCoordWithFunc[0][0].toString(), '(20, 30, undefined),(40, 45, undefined),(40, 10, undefined),(20, 30, undefined)');\n    assert.deepEqual(resCoordWithFunc[1][0].toString(), '(5, 15, undefined),(10, 40, undefined),(20, 10, undefined),(10, 5, undefined)' + ',(5, 15, undefined)');\n    assert.deepEqual(resCoordWithAltAndFunc[0][0].toString(), '(20, 30, 20),(40, 45, 21),(40, 10, 22),(20, 30, 20)');\n    assert.deepEqual(resCoordWithAltAndFunc[1][0].toString(), '(5, 15, 23),(10, 40, 24),(20, 10, 25),(10, 5, 26)' + ',(5, 15, 23)');\n  });\n\n  (0, _qunit.test)('test method latLngsToCoords for MultiPolygon with hole', function (assert) {\n    //Arrange\n    var latlngs = [[[L.latLng(40, 40), L.latLng(20, 45), L.latLng(45, 30)]], [[L.latLng(20, 35), L.latLng(10, 30), L.latLng(10, 10), L.latLng(30, 5), L.latLng(45, 20)], [L.latLng(30, 20), L.latLng(20, 15), L.latLng(20, 25)]]];\n    var latlngsWithAlt = [[[L.latLng(40, 40, 20), L.latLng(20, 45, 21), L.latLng(45, 30, 22)]], [[L.latLng(20, 35, 24), L.latLng(10, 30, 25), L.latLng(10, 10, 26), L.latLng(30, 5, 27), L.latLng(45, 20, 28)], [L.latLng(30, 20, 29), L.latLng(20, 15, 30), L.latLng(20, 25, 31)]]];\n    var coordinatesFunction = function coordinatesFunction(coord, altitude) {\n      return altitude ? new _npmJsts['default'].geom.Coordinate(coord.x, coord.y, altitude) : new _npmJsts['default'].geom.Coordinate(coord.x, coord.y);\n    };\n\n    var levelsDeep = 2;\n    var closed = true;\n\n    //Act\n    var resCoord = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision);\n    var resCoordWithAlt = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision);\n    var resCoordWithFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngs, crs, levelsDeep, closed, precision, coordinatesFunction);\n    var resCoordWithAltAndFunc = (0, _emberFlexberryGisUtilsLatLngToCoord.latLngsToCoords)(latlngsWithAlt, crs, levelsDeep, closed, precision, coordinatesFunction);\n\n    //Assert\n    assert.deepEqual(resCoord, [[[[40, 40], [45, 20], [30, 45], [40, 40]]], [[[35, 20], [30, 10], [10, 10], [5, 30], [20, 45], [35, 20]], [[20, 30], [15, 20], [25, 20], [20, 30]]]]);\n    assert.deepEqual(resCoordWithAlt, [[[[40, 40, 20], [45, 20, 21], [30, 45, 22], [40, 40, 20]]], [[[35, 20, 24], [30, 10, 25], [10, 10, 26], [5, 30, 27], [20, 45, 28], [35, 20, 24]], [[20, 30, 29], [15, 20, 30], [25, 20, 31], [20, 30, 29]]]]);\n    assert.deepEqual(resCoordWithFunc[0][0].toString(), '(40, 40, undefined),(45, 20, undefined),(30, 45, undefined),(40, 40, undefined)');\n    assert.deepEqual(resCoordWithFunc[1][0].toString(), '(35, 20, undefined),(30, 10, undefined),(10, 10, undefined)' + ',(5, 30, undefined),(20, 45, undefined),(35, 20, undefined)');\n    assert.deepEqual(resCoordWithFunc[1][1].toString(), '(20, 30, undefined),(15, 20, undefined),(25, 20, undefined),' + '(20, 30, undefined)');\n    assert.deepEqual(resCoordWithAltAndFunc[0][0].toString(), '(40, 40, 20),(45, 20, 21),(30, 45, 22),(40, 40, 20)');\n    assert.deepEqual(resCoordWithAltAndFunc[1][0].toString(), '(35, 20, 24),(30, 10, 25),(10, 10, 26)' + ',(5, 30, 27),(20, 45, 28),(35, 20, 24)');\n    assert.deepEqual(resCoordWithAltAndFunc[1][1].toString(), '(20, 30, 29),(15, 20, 30),(25, 20, 31),' + '(20, 30, 29)');\n  });\n});","define('dummy/tests/unit/utils/lat-lng-to-coord-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/lat-lng-to-coord-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/lat-lng-to-coord-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/lat-lng-to-coord-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/lat-lng-to-coord-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/lat-lng-to-coord-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/layer-to-ewkt-test', ['exports', 'ember-flexberry-gis/utils/layer-to-ewkt', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326', 'qunit'], function (exports, _emberFlexberryGisUtilsLayerToEwkt, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326, _qunit) {\n\n  (0, _qunit.module)('Unit | Utility | layer to ewkt');\n\n  var crs = _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'].create();\n\n  (0, _qunit.test)('test method latLngsToCoords for Point', function (assert) {\n    //Arrange\n    var latlng = L.latLng(30, 10);\n    var latlngWithAlt = L.latLng(30, 10, 20);\n\n    //Act\n    var result = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPointEWKT)(latlng, crs);\n    var resultWithAlt = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPointEWKT)(latlngWithAlt, crs);\n\n    //Assert\n    assert.equal(result, 'SRID=4326;POINT(10 30)');\n    assert.equal(resultWithAlt, 'SRID=4326;POINT(10 30 20)');\n  });\n\n  (0, _qunit.test)('test method latlngToPolylineEWKT for LineString', function (assert) {\n    //Arrange\n    var latlng = [L.latLng(30, 10), L.latLng(10, 30), L.latLng(40, 40)];\n    var latlngWithAlt = [L.latLng(30, 10, 20), L.latLng(10, 30, 21), L.latLng(40, 40, 22)];\n\n    //Act\n    var result = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolylineEWKT)(latlng, crs);\n    var resultWithAlt = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolylineEWKT)(latlngWithAlt, crs);\n\n    //Assert\n    assert.equal(result, 'SRID=4326;LINESTRING(10 30, 30 10, 40 40)');\n    assert.equal(resultWithAlt, 'SRID=4326;LINESTRING(10 30 20, 30 10 21, 40 40 22)');\n  });\n\n  (0, _qunit.test)('test method latlngToPolylineEWKT for MultiLineString', function (assert) {\n    //Arrange\n    var latlng = [[L.latLng(10, 10), L.latLng(20, 20), L.latLng(10, 40)], [L.latLng(40, 40), L.latLng(30, 30), L.latLng(40, 20)]];\n    var latlngsWithAlt = [[L.latLng(10, 10, 20), L.latLng(20, 20, 21), L.latLng(10, 40, 22)], [L.latLng(40, 40, 23), L.latLng(30, 30, 24), L.latLng(40, 20, 25)]];\n\n    //Act\n    var result = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolylineEWKT)(latlng, crs);\n    var resultWithAlt = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolylineEWKT)(latlngsWithAlt, crs);\n\n    //Assert\n    assert.equal(result, 'SRID=4326;MULTILINESTRING((10 10, 20 20, 40 10), (40 40, 30 30, 20 40))');\n    assert.equal(resultWithAlt, 'SRID=4326;MULTILINESTRING((10 10 20, 20 20 21, 40 10 22), (40 40 23, 30 30 24, 20 40 25))');\n  });\n\n  (0, _qunit.test)('test method latlngToPolygonEWKT for Polygon without hole', function (assert) {\n    //Arrange\n    var latlng = [[L.latLng(30, 10), L.latLng(40, 40), L.latLng(20, 40), L.latLng(10, 20)]];\n    var latlngsWithAlt = [[L.latLng(30, 10, 20), L.latLng(40, 40, 21), L.latLng(20, 40, 22), L.latLng(10, 20, 23)]];\n\n    //Act\n    var result = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolygonEWKT)(latlng, crs);\n    var resultWithAlt = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolygonEWKT)(latlngsWithAlt, crs);\n\n    //Assert\n    assert.equal(result, 'SRID=4326;POLYGON((10 30, 40 40, 40 20, 20 10, 10 30))');\n    assert.equal(resultWithAlt, 'SRID=4326;POLYGON((10 30 20, 40 40 21, 40 20 22, 20 10 23, 10 30 20))');\n  });\n\n  (0, _qunit.test)('test method latlngToPolygonEWKT for Polygon with hole', function (assert) {\n    //Arrange\n    var latlng = [[L.latLng(35, 10), L.latLng(45, 45), L.latLng(15, 40), L.latLng(10, 20)], [L.latLng(20, 30), L.latLng(35, 35), L.latLng(30, 20)]];\n    var latlngsWithAlt = [[L.latLng(35, 10, 20), L.latLng(45, 45, 21), L.latLng(15, 40, 22), L.latLng(10, 20, 23)], [L.latLng(20, 30, 24), L.latLng(35, 35, 25), L.latLng(30, 20, 26)]];\n\n    //Act\n    var result = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolygonEWKT)(latlng, crs);\n    var resultWithAlt = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolygonEWKT)(latlngsWithAlt, crs);\n\n    //Assert\n    assert.equal(result, 'SRID=4326;POLYGON((10 35, 45 45, 40 15, 20 10, 10 35), (30 20, 35 35, 20 30, 30 20))');\n    assert.equal(resultWithAlt, 'SRID=4326;POLYGON((10 35 20, 45 45 21, 40 15 22, 20 10 23, 10 35 20), (30 20 24, 35 35 25, 20 30 26, 30 20 24))');\n  });\n\n  (0, _qunit.test)('test method latlngToPolygonEWKT for MultiPolygon without hole', function (assert) {\n    //Arrange\n    var latlng = [[[L.latLng(30, 20), L.latLng(45, 40), L.latLng(10, 40)]], [[L.latLng(15, 5), L.latLng(40, 10), L.latLng(10, 20), L.latLng(5, 10)]]];\n    var latlngsWithAlt = [[[L.latLng(30, 20, 20), L.latLng(45, 40, 21), L.latLng(10, 40, 22)]], [[L.latLng(15, 5, 23), L.latLng(40, 10, 24), L.latLng(10, 20, 25), L.latLng(5, 10, 26)]]];\n\n    //Act\n    var result = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolygonEWKT)(latlng, crs);\n    var resultWithAlt = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolygonEWKT)(latlngsWithAlt, crs);\n\n    //Assert\n    assert.equal(result, 'SRID=4326;MULTIPOLYGON(((20 30, 40 45, 40 10, 20 30)), ((5 15, 10 40, 20 10, 10 5, 5 15)))');\n    assert.equal(resultWithAlt, 'SRID=4326;MULTIPOLYGON(((20 30 20, 40 45 21, 40 10 22, 20 30 20)), ((5 15 23, 10 40 24, 20 10 25, 10 5 26, 5 15 23)))');\n  });\n\n  (0, _qunit.test)('test method latlngToPolygonEWKT for MultiPolygon with hole', function (assert) {\n    //Arrange\n    var latlng = [[[L.latLng(40, 40), L.latLng(20, 45), L.latLng(45, 30)]], [[L.latLng(20, 35), L.latLng(10, 30), L.latLng(10, 10), L.latLng(30, 5), L.latLng(45, 20)], [L.latLng(30, 20), L.latLng(20, 15), L.latLng(20, 25)]]];\n    var latlngsWithAlt = [[[L.latLng(40, 40, 20), L.latLng(20, 45, 21), L.latLng(45, 30, 22)]], [[L.latLng(20, 35, 24), L.latLng(10, 30, 25), L.latLng(10, 10, 26), L.latLng(30, 5, 27), L.latLng(45, 20, 28)], [L.latLng(30, 20, 29), L.latLng(20, 15, 30), L.latLng(20, 25, 31)]]];\n\n    //Act\n    var result = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolygonEWKT)(latlng, crs);\n    var resultWithAlt = (0, _emberFlexberryGisUtilsLayerToEwkt.latlngToPolygonEWKT)(latlngsWithAlt, crs);\n\n    //Assert\n    assert.equal(result, 'SRID=4326;MULTIPOLYGON(((40 40, 45 20, 30 45, 40 40)), ((35 20, 30 10, 10 10, 5 30, 20 45, 35 20), (20 30, 15 20, 25 20, 20 30)))');\n    assert.equal(resultWithAlt, 'SRID=4326;MULTIPOLYGON(((40 40 20, 45 20 21, 30 45 22, 40 40 20)), ' + '((35 20 24, 30 10 25, 10 10 26, 5 30 27, 20 45 28, 35 20 24), (20 30 29, 15 20 30, 25 20 31, 20 30 29)))');\n  });\n});","define('dummy/tests/unit/utils/layer-to-ewkt-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/layer-to-ewkt-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/layer-to-ewkt-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/layer-to-ewkt-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/layer-to-ewkt-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/layer-to-ewkt-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/layer-to-jsts-test', ['exports', 'ember-flexberry-gis/utils/layer-to-jsts', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326', 'qunit'], function (exports, _emberFlexberryGisUtilsLayerToJsts, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326, _qunit) {\n\n  (0, _qunit.module)('Unit | Utility | layer to jsts');\n\n  var crs = _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'].create();\n\n  (0, _qunit.test)('test method latlngToPointJsts and geometryToJsts for Point', function (assert) {\n    //Arrange\n    var latlng = L.latLng(30, 10);\n    var feature = {\n      type: 'Point',\n      coordinates: [10, 30]\n    };\n\n    //Act\n    var resultToJsts = (0, _emberFlexberryGisUtilsLayerToJsts.latlngToPointJsts)(latlng, crs);\n    var resultFromGeoJSON = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(feature);\n\n    //Assert\n    assert.equal(resultToJsts.getNumGeometries(), 1);\n    assert.equal(resultToJsts.getCoordinate().toString(), '(10, 30, undefined)');\n    assert.equal(resultToJsts.getGeometryType(), 'Point');\n    assert.equal(resultFromGeoJSON.getNumGeometries(), 1);\n    assert.equal(resultFromGeoJSON.getCoordinate().toString(), '(10, 30, undefined)');\n    assert.equal(resultFromGeoJSON.getGeometryType(), 'Point');\n  });\n\n  (0, _qunit.test)('test method latlngToPointJsts and geometryToJsts for Point with altitude', function (assert) {\n    //Arrange\n    var latlng = L.latLng(30, 10, 20);\n    var feature = {\n      type: 'Point',\n      coordinates: [10, 30, 20]\n    };\n\n    //Act\n    var resultToJsts = (0, _emberFlexberryGisUtilsLayerToJsts.latlngToPointJsts)(latlng, crs);\n    var resultFromGeoJSON = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(feature);\n\n    //Assert\n    assert.equal(resultToJsts.getNumGeometries(), 1);\n    assert.equal(resultToJsts.getCoordinate().toString(), '(10, 30, 20)');\n    assert.equal(resultToJsts.getGeometryType(), 'Point');\n    assert.equal(resultFromGeoJSON.getNumGeometries(), 1);\n    assert.equal(resultFromGeoJSON.getCoordinate().toString(), '(10, 30, 20)');\n    assert.equal(resultFromGeoJSON.getGeometryType(), 'Point');\n  });\n\n  (0, _qunit.test)('test method latlngToPolylineJsts and geometryToJsts for LineString', function (assert) {\n    //Arrange\n    var latlngs = [L.latLng(30, 10), L.latLng(10, 30), L.latLng(40, 40)];\n    var feature = {\n      type: 'LineString',\n      coordinates: [[10, 30], [30, 10], [40, 40]]\n    };\n\n    //Act\n    var resultToJsts = (0, _emberFlexberryGisUtilsLayerToJsts.latlngToPolylineJsts)(latlngs, crs);\n    var resultFromGeoJSON = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(feature);\n\n    //Assert\n    assert.equal(resultToJsts.getNumGeometries(), 1);\n    assert.equal(resultToJsts.getCoordinates().toString(), '(10, 30, undefined),(30, 10, undefined),(40, 40, undefined)');\n    assert.equal(resultToJsts.getGeometryType(), 'LineString');\n    assert.equal(resultFromGeoJSON.getNumGeometries(), 1);\n    assert.equal(resultFromGeoJSON.getCoordinates().toString(), '(10, 30, undefined),(30, 10, undefined),(40, 40, undefined)');\n    assert.equal(resultFromGeoJSON.getGeometryType(), 'LineString');\n  });\n\n  (0, _qunit.test)('test method latlngToPolylineJsts and geometryToJsts for MultiLineString', function (assert) {\n    //Arrange\n    var latlngs = [[L.latLng(10, 10), L.latLng(20, 20), L.latLng(10, 40)], [L.latLng(40, 40), L.latLng(30, 30), L.latLng(40, 20)]];\n    var feature = {\n      type: 'MultiLineString',\n      coordinates: [[[10, 10], [20, 20], [40, 10]], [[40, 40], [30, 30], [20, 40]]]\n    };\n\n    //Act\n    var resultToJsts = (0, _emberFlexberryGisUtilsLayerToJsts.latlngToPolylineJsts)(latlngs, crs);\n    var resultFromGeoJSON = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(feature);\n\n    //Assert\n    assert.equal(resultToJsts.getNumGeometries(), 2);\n    assert.equal(resultToJsts.getGeometryN(0).getCoordinates().toString(), '(10, 10, undefined),(20, 20, undefined),(40, 10, undefined)');\n    assert.equal(resultToJsts.getGeometryN(1).getCoordinates().toString(), '(40, 40, undefined),(30, 30, undefined),(20, 40, undefined)');\n    assert.equal(resultToJsts.getGeometryType(), 'MultiLineString');\n    assert.equal(resultFromGeoJSON.getNumGeometries(), 2);\n    assert.equal(resultFromGeoJSON.getGeometryN(0).getCoordinates().toString(), '(10, 10, undefined),(20, 20, undefined),(40, 10, undefined)');\n    assert.equal(resultFromGeoJSON.getGeometryN(1).getCoordinates().toString(), '(40, 40, undefined),(30, 30, undefined),(20, 40, undefined)');\n    assert.equal(resultFromGeoJSON.getGeometryType(), 'MultiLineString');\n  });\n\n  (0, _qunit.test)('test method latlngToPolygonJsts and geometryToJsts for Polygon without hole', function (assert) {\n    //Arrange\n    var latlngs = [[L.latLng(30, 10), L.latLng(40, 40), L.latLng(20, 40), L.latLng(10, 20)]];\n    var feature = {\n      type: 'Polygon',\n      coordinates: [[[10, 30], [40, 40], [40, 20], [20, 10], [10, 30]]]\n    };\n\n    //Act\n    var resultToJsts = (0, _emberFlexberryGisUtilsLayerToJsts.latlngToPolygonJsts)(latlngs, crs);\n    var resultFromGeoJSON = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(feature);\n\n    //Assert\n    assert.equal(resultToJsts.getNumGeometries(), 1);\n    assert.equal(resultToJsts.getGeometryN(0).getCoordinates().toString(), '(10, 30, undefined),(40, 40, undefined),(40, 20, undefined)' + ',(20, 10, undefined),(10, 30, undefined)');\n    assert.equal(resultToJsts.getGeometryType(), 'Polygon');\n    assert.equal(resultFromGeoJSON.getNumGeometries(), 1);\n    assert.equal(resultFromGeoJSON.getGeometryN(0).getCoordinates().toString(), '(10, 30, undefined),(40, 40, undefined),(40, 20, undefined)' + ',(20, 10, undefined),(10, 30, undefined)');\n    assert.equal(resultFromGeoJSON.getGeometryType(), 'Polygon');\n  });\n\n  (0, _qunit.test)('test method latlngToPolygonJsts and geometryToJsts for Polygon with hole', function (assert) {\n    //Arrange\n    var latlngs = [[L.latLng(35, 10), L.latLng(45, 45), L.latLng(15, 40), L.latLng(10, 20)], [L.latLng(20, 30), L.latLng(35, 35), L.latLng(30, 20)]];\n    var feature = {\n      type: 'Polygon',\n      coordinates: [[[10, 35], [45, 45], [40, 15], [20, 10], [10, 35]], [[30, 20], [35, 35], [20, 30], [30, 20]]]\n    };\n\n    //Act\n    var resultToJsts = (0, _emberFlexberryGisUtilsLayerToJsts.latlngToPolygonJsts)(latlngs, crs);\n    var resultFromGeoJSON = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(feature);\n\n    //Assert\n    assert.equal(resultToJsts.getNumGeometries(), 1);\n    assert.equal(resultToJsts.getExteriorRing().getCoordinates().toString(), '(10, 35, undefined),(45, 45, undefined),(40, 15, undefined)' + ',(20, 10, undefined),(10, 35, undefined)');\n    assert.equal(resultToJsts.getInteriorRingN(0).getCoordinates().toString(), '(30, 20, undefined),(35, 35, undefined),(20, 30, undefined),' + '(30, 20, undefined)');\n    assert.equal(resultToJsts.getGeometryType(), 'Polygon');\n    assert.equal(resultFromGeoJSON.getNumGeometries(), 1);\n    assert.equal(resultFromGeoJSON.getExteriorRing().getCoordinates().toString(), '(10, 35, undefined),(45, 45, undefined),(40, 15, undefined)' + ',(20, 10, undefined),(10, 35, undefined)');\n    assert.equal(resultFromGeoJSON.getInteriorRingN(0).getCoordinates().toString(), '(30, 20, undefined),(35, 35, undefined),(20, 30, undefined),' + '(30, 20, undefined)');\n    assert.equal(resultFromGeoJSON.getGeometryType(), 'Polygon');\n  });\n\n  (0, _qunit.test)('test method latlngToPolygonJsts and geometryToJsts for MultiPolygon without hole', function (assert) {\n    //Arrange\n    var latlngs = [[[L.latLng(30, 20), L.latLng(45, 40), L.latLng(10, 40)]], [[L.latLng(15, 5), L.latLng(40, 10), L.latLng(10, 20), L.latLng(5, 10)]]];\n    var feature = {\n      type: 'MultiPolygon',\n      coordinates: [[[[20, 30], [40, 45], [40, 10], [20, 30]]], [[[5, 15], [10, 40], [20, 10], [10, 5], [5, 15]]]]\n    };\n\n    //Act\n    var resultToJsts = (0, _emberFlexberryGisUtilsLayerToJsts.latlngToPolygonJsts)(latlngs, crs);\n    var resultFromGeoJSON = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(feature);\n\n    //Assert\n    assert.equal(resultToJsts.getNumGeometries(), 2);\n    assert.equal(resultToJsts.getGeometryN(0).getCoordinates().toString(), '(20, 30, undefined),(40, 45, undefined),(40, 10, undefined),(20, 30, undefined)');\n    assert.equal(resultToJsts.getGeometryN(1).getCoordinates().toString(), '(5, 15, undefined),(10, 40, undefined),(20, 10, undefined),(10, 5, undefined)' + ',(5, 15, undefined)');\n    assert.equal(resultToJsts.getGeometryType(), 'MultiPolygon');\n    assert.equal(resultFromGeoJSON.getNumGeometries(), 2);\n    assert.equal(resultFromGeoJSON.getGeometryN(0).getCoordinates().toString(), '(20, 30, undefined),(40, 45, undefined),(40, 10, undefined),' + '(20, 30, undefined)');\n    assert.equal(resultFromGeoJSON.getGeometryN(1).getCoordinates().toString(), '(5, 15, undefined),(10, 40, undefined),(20, 10, undefined),(10, 5, undefined)' + ',(5, 15, undefined)');\n    assert.equal(resultFromGeoJSON.getGeometryType(), 'MultiPolygon');\n  });\n\n  (0, _qunit.test)('test method latlngToPolygonJsts and geometryToJsts for MultiPolygon with hole', function (assert) {\n    //Arrange\n    var latlngs = [[[L.latLng(40, 40), L.latLng(20, 45), L.latLng(45, 30)]], [[L.latLng(20, 35), L.latLng(10, 30), L.latLng(10, 10), L.latLng(30, 5), L.latLng(45, 20)], [L.latLng(30, 20), L.latLng(20, 15), L.latLng(20, 25)]]];\n    var feature = {\n      type: 'MultiPolygon',\n      coordinates: [[[[40, 40], [45, 20], [30, 45], [40, 40]]], [[[35, 20], [30, 10], [10, 10], [5, 30], [20, 45], [35, 20]], [[20, 30], [15, 20], [25, 20], [20, 30]]]]\n    };\n\n    //Act\n    var resultToJsts = (0, _emberFlexberryGisUtilsLayerToJsts.latlngToPolygonJsts)(latlngs, crs);\n    var resultFromGeoJSON = (0, _emberFlexberryGisUtilsLayerToJsts.geometryToJsts)(feature);\n\n    //Assert\n    assert.equal(resultToJsts.getNumGeometries(), 2);\n    assert.equal(resultToJsts.getGeometryN(0).getCoordinates().toString(), '(40, 40, undefined),(45, 20, undefined),(30, 45, undefined),(40, 40, undefined)');\n    assert.equal(resultToJsts.getGeometryN(1).getExteriorRing().getCoordinates().toString(), '(35, 20, undefined),(30, 10, undefined),(10, 10, undefined)' + ',(5, 30, undefined),(20, 45, undefined),(35, 20, undefined)');\n    assert.equal(resultToJsts.getGeometryN(1).getInteriorRingN(0).getCoordinates().toString(), '(20, 30, undefined),(15, 20, undefined),(25, 20, undefined),' + '(20, 30, undefined)');\n    assert.equal(resultToJsts.getGeometryType(), 'MultiPolygon');\n    assert.equal(resultFromGeoJSON.getNumGeometries(), 2);\n    assert.equal(resultFromGeoJSON.getGeometryN(0).getCoordinates().toString(), '(40, 40, undefined),(45, 20, undefined),(30, 45, undefined),' + '(40, 40, undefined)');\n    assert.equal(resultFromGeoJSON.getGeometryN(1).getExteriorRing().getCoordinates().toString(), '(35, 20, undefined),(30, 10, undefined),(10, 10, undefined)' + ',(5, 30, undefined),(20, 45, undefined),(35, 20, undefined)');\n    assert.equal(resultFromGeoJSON.getGeometryN(1).getInteriorRingN(0).getCoordinates().toString(), '(20, 30, undefined),(15, 20, undefined),' + '(25, 20, undefined),(20, 30, undefined)');\n    assert.equal(resultFromGeoJSON.getGeometryType(), 'MultiPolygon');\n  });\n});","define('dummy/tests/unit/utils/layer-to-jsts-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/layer-to-jsts-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/layer-to-jsts-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/layer-to-jsts-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/layer-to-jsts-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/layer-to-jsts-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/leaflet-opacity-test', ['exports', 'dummy/utils/leaflet-opacity', 'qunit'], function (exports, _dummyUtilsLeafletOpacity, _qunit) {\n\n  (0, _qunit.module)('Unit | Util | Leaflet-opacity');\n\n  (0, _qunit.test)('it works', function (assert) {\n\n    assert.expect(6);\n\n    var color = '#abcdef';\n    var opacity = 0.42;\n\n    var tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png?{foo}', { foo: 'bar' });\n    tileLayer.options.color = color;\n    (0, _dummyUtilsLeafletOpacity.setLeafletLayerOpacity)({ leafletLayer: tileLayer, opacity: opacity });\n    assert.deepEqual([tileLayer.options.color, tileLayer.options.opacity], [color, opacity], 'Tile layer style kept and set');\n\n    var featureGroup = L.featureGroup([L.marker([50, 30]), L.polygon([[3, -10], [4, -10], [4, -11], [3, -11]])]);\n    featureGroup.eachLayer(function (l) {\n      l.options.color = color;\n    });\n    (0, _dummyUtilsLeafletOpacity.setLeafletLayerOpacity)({ leafletLayer: featureGroup, opacity: opacity });\n    var fgGeometries = featureGroup.getLayers();\n    assert.deepEqual([fgGeometries[0].options.color, fgGeometries[0].options.opacity], [color, opacity], 'Marker style in featureGroup kept and set');\n    assert.deepEqual([fgGeometries[1].options.color, fgGeometries[1].options.opacity], [color, opacity], 'Polygon style in featureGroup kept and set');\n\n    var markerGroup = L.markerClusterGroup();\n    markerGroup.addLayers([L.marker([0, 1]), L.marker([2, 3])]);\n    markerGroup.eachLayer(function (l) {\n      l.options.color = color;\n    });\n    (0, _dummyUtilsLeafletOpacity.setLeafletLayerOpacity)({ leafletLayer: markerGroup, opacity: opacity });\n    var markers = markerGroup.getLayers();\n    assert.deepEqual([markers[1].options.color, markers[1].options.opacity], [color, opacity], 'Marker style in markerCluster kept and set');\n\n    var data = { 'type': 'FeatureCollection',\n      'features': [{ 'type': 'Feature',\n        'geometry': {\n          'type': 'Point', 'coordinates': [2, 3] }\n      }, { 'type': 'Feature',\n        'geometry': {\n          'type': 'Polygon',\n          'coordinates': [[[10, 0], [11, 0], [11, 1], [10, 1], [10, 0]]]\n        } }]\n    };\n\n    var geojson = L.geoJSON(data, {\n      style: function style(feature) {\n        return { color: color };\n      } });\n\n    geojson.eachLayer(function (l) {\n      l.options.color = color;\n    });\n    (0, _dummyUtilsLeafletOpacity.setLeafletLayerOpacity)({ leafletLayer: geojson, opacity: opacity });\n    var geometries = geojson.getLayers();\n    assert.deepEqual([geometries[0].options.color, geometries[0].options.opacity], [color, opacity], 'feature Point style in geoJOSN kept and set');\n    assert.deepEqual([geometries[1].options.color, geometries[1].options.opacity], [color, opacity * _dummyUtilsLeafletOpacity.maxGeometryOpacity], 'feature Polygon style in geoJOSN kept and set');\n  });\n});","define('dummy/tests/unit/utils/leaflet-opacity-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/leaflet-opacity-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/leaflet-opacity-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/leaflet-opacity-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/leaflet-opacity-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/leaflet-opacity-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/polygon-intersect-check-test', ['exports', 'ember-flexberry-gis/utils/polygon-intersect-check', 'qunit'], function (exports, _emberFlexberryGisUtilsPolygonIntersectCheck, _qunit) {\n\n  (0, _qunit.module)('Unit | Utility | polygon intersect check');\n\n  //Test intersecting polygon, type - L.Polygon\n  var intersectPolygonLeaflet = L.polygon([[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.08, 58.02]], { color: 'red' });\n\n  //Test intersecting polygon, type - array of latLngs\n  var intersectPolygonArray = [[[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.08, 58.02]]];\n\n  //Test intersecting polygon, type - GeoJson\n  var intersectPolygonGeoJson = {\n    type: 'Polygon',\n    coordinates: [[[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.08, 58.02]]]\n  };\n\n  //Test nonintersecting polygon, type - L.Polygon\n  var nonIntersectPolygonLeaflet = L.polygon([[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.1, 58.02]], { color: 'red' });\n\n  //Test nonintersecting polygon, type - array of latLngs\n  var nonIntersectPolygonArray = [[[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.1, 58.02]]];\n\n  //Test nonintersecting polygon, type - GeoJson\n  var nonIntersectPolygonGeoJson = {\n    type: 'Polygon',\n    coordinates: [[[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.1, 58.02]]]\n  };\n\n  //Test intersecting multi polygon, type - L.Polygon\n  var intersectMPolygonLeaflet = L.polygon([[[45.51, -122.68], [37.77, -122.43], [34.04, -118.2]], [[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.08, 58.02]]], { color: 'red' });\n\n  //Test intersecting multi polygon, type - array of latLngs\n  var intersectMPolygonArray = [[[45.51, -122.68], [37.77, -122.43], [34.04, -118.2]], [[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.08, 58.02]]];\n\n  //Test intersecting multi polygon, type - GeoJson\n  var intersectMPolygonGeoJson = {\n    type: 'MultiPolygon',\n    coordinates: [[[[45.51, -122.68], [37.77, -122.43], [34.04, -118.2]]], [[[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.08, 58.02]]]]\n  };\n\n  //Test nonintersecting multi polygon, type - L.Polygon\n  var nonIntersectMPolygonLeaflet = L.polygon([[[45.51, -122.68], [37.77, -122.43], [34.04, -118.2]], [[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.1, 58.02]]], { color: 'red' });\n\n  //Test nonintersecting multi polygon, type - array of latLngs\n  var nonIntersectMPolygonArray = [[[45.51, -122.68], [37.77, -122.43], [34.04, -118.2]], [[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.1, 58.02]]];\n\n  //Test nonintersecting multi polygon, type - GeoJson\n  var nonIntersectMPolygonGeoJson = {\n    type: 'MultiPolygon',\n    coordinates: [[[[45.51, -122.68], [37.77, -122.43], [34.04, -118.2]]], [[[56.09, 58.03], [56.02, 58.007], [56.07, 58.07], [56.1, 58.02]]]]\n  };\n\n  (0, _qunit.test)('should define is testing polygon intersecting or not', function (assert) {\n\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(intersectPolygonLeaflet), true);\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(nonIntersectPolygonLeaflet), false);\n\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(intersectPolygonArray), true);\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(nonIntersectPolygonArray), false);\n\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(intersectPolygonGeoJson), true);\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(nonIntersectPolygonGeoJson), false);\n\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(intersectMPolygonLeaflet), true);\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(nonIntersectMPolygonLeaflet), false);\n\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(intersectMPolygonArray), true);\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(nonIntersectMPolygonArray), false);\n\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(intersectMPolygonGeoJson), true);\n    assert.equal((0, _emberFlexberryGisUtilsPolygonIntersectCheck['default'])(nonIntersectMPolygonGeoJson), false);\n  });\n});","define('dummy/tests/unit/utils/polygon-intersect-check-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/polygon-intersect-check-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/polygon-intersect-check-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/polygon-intersect-check-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/polygon-intersect-check-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/polygon-intersect-check-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/utils/rhumb-operations-test', ['exports', 'ember-flexberry-gis/utils/rhumb-operations', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326', 'qunit', 'sinon', 'ember'], function (exports, _emberFlexberryGisUtilsRhumbOperations, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326, _qunit, _sinon, _ember) {\n\n  (0, _qunit.module)('Unit | Utility | rhumb operations');\n\n  var crsFactory32640 = {\n    code: 'EPSG:32640',\n    definition: '+proj=utm +zone=40 +datum=WGS84 +units=m +no_defs',\n    create: function create() {\n      var crs = L.extend({}, new L.Proj.CRS(this.code, this.definition), {\n        scale: function scale(zoom) {\n          return 256 * Math.pow(2, zoom);\n        },\n        zoom: function zoom(scale) {\n          return Math.log(scale / 256) / Math.LN2;\n        }\n      });\n      return crs;\n    }\n  };\n\n  var crs32640 = crsFactory32640.create();\n\n  (0, _qunit.test)('test method createObjectRhumb for Polygon with startPoint in EPSG:32640', function (assert) {\n    //Arrange\n    var testObj = {\n      type: 'Polygon',\n      startPoint: [20, 20],\n      crs: 'EPSG:32640',\n      skip: 0,\n      points: [{ rhumb: 'SE', angle: 0, distance: 10 }, { rhumb: 'NE', angle: 90, distance: 10 }, { rhumb: 'NW', angle: 0, distance: 10 }, { rhumb: 'NW', angle: 90, distance: 10 }]\n    };\n\n    var resObj = {\n      type: 'Feature',\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[20, 20], [20, 10], [30, 10], [30, 20], [20, 20]]]\n      },\n      properties: undefined,\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:32640'\n        }\n      }\n    };\n\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': crsFactory32640,\n          'epsg32640': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default']\n        };\n      }\n    });\n\n    //Act\n    var result = (0, _emberFlexberryGisUtilsRhumbOperations.createObjectRhumb)(testObj, crs32640);\n\n    //Assert\n    assert.deepEqual(result, resObj);\n    ownerStub.restore();\n  });\n\n  (0, _qunit.test)('test method createObjectRhumb for Polygon with startPoint in EPSG:4326', function (assert) {\n    //Arrange\n    var testObj = {\n      type: 'Polygon',\n      startPoint: [7, 3],\n      crs: 'EPSG:4326',\n      skip: 0,\n      points: [{ rhumb: 'SE', angle: 0, distance: 1000 }, { rhumb: 'NE', angle: 90, distance: 1000 }, { rhumb: 'NW', angle: 0, distance: 1000 }, { rhumb: 'NW', angle: 90, distance: 1000 }]\n    };\n\n    var resObj = {\n      type: 'Feature',\n      properties: undefined,\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[-5936517.120908923, 517670.4443068467], [-5936517.120908923, 516670.4443068467], [-5935517.120908923, 516670.4443068467], [-5935517.120908923, 517670.4443068467], [-5936517.120908923, 517670.4443068467]]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:32640'\n        }\n      }\n    };\n\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': crsFactory32640,\n          'epsg32640': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default']\n        };\n      }\n    });\n\n    //Act\n    var result = (0, _emberFlexberryGisUtilsRhumbOperations.createObjectRhumb)(testObj, crs32640);\n\n    //Assert\n    assert.deepEqual(result, resObj);\n    ownerStub.restore();\n  });\n\n  (0, _qunit.test)('test method createObjectRhumb for LineString with startPoint in EPSG:32640', function (assert) {\n    //Arrange\n    var testObj = {\n      type: 'LineString',\n      startPoint: [20, 20],\n      crs: 'EPSG:32640',\n      skip: 0,\n      points: [{ rhumb: 'SE', angle: 0, distance: 10 }, { rhumb: 'NE', angle: 90, distance: 10 }, { rhumb: 'NW', angle: 0, distance: 10 }]\n    };\n\n    var resObj = {\n      type: 'Feature',\n      geometry: {\n        type: 'LineString',\n        coordinates: [[20, 20], [20, 10], [30, 10], [30, 20]]\n      },\n      properties: undefined,\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:32640'\n        }\n      }\n    };\n\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': crsFactory32640,\n          'epsg32640': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default']\n        };\n      }\n    });\n\n    //Act\n    var result = (0, _emberFlexberryGisUtilsRhumbOperations.createObjectRhumb)(testObj, crs32640);\n\n    //Assert\n    assert.deepEqual(result, resObj);\n    ownerStub.restore();\n  });\n\n  (0, _qunit.test)('test method createObjectRhumb for LineString with startPoint in EPSG:4326', function (assert) {\n    //Arrange\n    var testObj = {\n      type: 'LineString',\n      startPoint: [7, 3],\n      crs: 'EPSG:4326',\n      skip: 0,\n      points: [{ rhumb: 'SE', angle: 0, distance: 1000 }, { rhumb: 'NE', angle: 90, distance: 1000 }, { rhumb: 'NW', angle: 0, distance: 1000 }]\n    };\n\n    var resObj = {\n      type: 'Feature',\n      properties: undefined,\n      geometry: {\n        type: 'LineString',\n        coordinates: [[-5936517.120908923, 517670.4443068467], [-5936517.120908923, 516670.4443068467], [-5935517.120908923, 516670.4443068467], [-5935517.120908923, 517670.4443068467]]\n      },\n      crs: {\n        type: 'name',\n        properties: {\n          name: 'EPSG:32640'\n        }\n      }\n    };\n\n    var ownerStub = _sinon['default'].stub(_ember['default'], 'getOwner');\n    ownerStub.returns({\n      knownForType: function knownForType() {\n        return {\n          'epsg4326': crsFactory32640,\n          'epsg32640': _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default']\n        };\n      }\n    });\n\n    //Act\n    var result = (0, _emberFlexberryGisUtilsRhumbOperations.createObjectRhumb)(testObj, crs32640);\n\n    //Assert\n    assert.deepEqual(result, resObj);\n    ownerStub.restore();\n  });\n});","define('dummy/tests/unit/utils/rhumb-operations-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/utils');\n  test('unit/utils/rhumb-operations-test.js should pass jscs', function () {\n    ok(true, 'unit/utils/rhumb-operations-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/utils/rhumb-operations-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/utils/rhumb-operations-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/rhumb-operations-test.js should pass jshint.');\n  });\n});","define('dummy/tests/views/components-examples/flexberry-maplayers/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - views/components-examples/flexberry-maplayers');\n  test('views/components-examples/flexberry-maplayers/settings-example.js should pass jscs', function () {\n    ok(true, 'views/components-examples/flexberry-maplayers/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/views/components-examples/flexberry-maplayers/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - views/components-examples/flexberry-maplayers/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'views/components-examples/flexberry-maplayers/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/views/components-examples/flexberry-tree/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - views/components-examples/flexberry-tree');\n  test('views/components-examples/flexberry-tree/settings-example.js should pass jscs', function () {\n    ok(true, 'views/components-examples/flexberry-tree/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/views/components-examples/flexberry-tree/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - views/components-examples/flexberry-tree/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'views/components-examples/flexberry-tree/settings-example.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChhEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnvFA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxrtDA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhtGA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACblGA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9GA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC31BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnvlIA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnjDA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzrFA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpjxvVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbhZA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACppHA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrxhBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtpFA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtttLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChMA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}